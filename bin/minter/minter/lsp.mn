/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module implements the language server protocol for the mint language.
 */

load network.protocols.jsonrpc.serializer
load network.protocols.jsonrpc.exception
load network.protocols.jsonrpc.server
load network.endpoints.tcpip
load system.terminal
load system.process
load system.thread
load system.os
load event.pipe
load container.set
load mint.function
load mint.range

load minter.workspace
load minter.config

enum LspTextDocumentSyncKind {
	None = 0
	Full = 1
	Incremental = 2
}

/**
 * This class provides an implementation of the language server protocol for the
 * mint language.
 */
class MintLspServer {
	/**
	 * Creates a new language server. The `stream` parameter must implement the
	 * stream interface (read and write) and will be used to send end receive
	 * messages. If the `checkParentProcess` is set to `true`, the server will
	 * be closed if the parent process is stoped. If the `consumer` parameter
	 * is not `none`, the given object will be called to send responses instead
	 * of the `stream` write method.
	 */
	const def new(self, stream, checkParentProcess = false, consumer = none) {

		self.checkParentProcess = checkParentProcess
		self.jsonRpcStream = stream

		// if consumer is none, it is assumed that the default streams-based approach is being used
		if consumer {
			self.jsonRpcEndpoint = def [consumer] (self, data) {
				var message = self.toMessage(data)
				log.debug("Sending response to client %s", message.toString())
				return consumer(message)
			}
		} else {
			self.jsonRpcEndpoint = def (self, data) {
				var message = self.toMessage(data)
				log.debug("Sending response to client %s", message.toString())
				return self.jsonRpcStream.write(message)
			}
		}

		return self
	}

	/**
	 * Entry point for the server.
	 */
	const def start(self) {
		self.running = true
		while self.running {
			try {
				if let var message = self.jsonRpcStream.read() {
					self.consume(message)
				}
			} catch error {
				if typeof error == 'DocumentStream.InvalidDocument' {
					log.error("Failed to read from stream")
					log.error(error.getError())
				}
			}
		}
	}

	/**
	 * Consume a JSON RPC message from the client.
	 * Args:
	 * message (dict): The JSON RPC message sent by the client
	 */
	const def consume(self, message) {
		
		const JSONRPC_VERSION = '2.0'

		if 'jsonrpc' not in message or message['jsonrpc'] != JSONRPC_VERSION {
			log.warning("Unknown message type %s", message.toString())
			return none
		}

		if 'id' not in message {
			try {
				log.debug("Handling notification from client %s", message.toString())
				self.onRpcNotification(message['method'], message.get('params'))
			} catch error {
				log.error("Failed to handle request %s", message['method'])
				log.error('%s (%s)' % (error.getMessage(), error.getCode()))
			}
		} elif 'method' not in message {
			try {
				log.debug("Handling response from client %s", message.toString())
				self.onRpcResponse(message['id'], message.get('result'), message.get('error'))
			} catch error {
				log.error("Failed to handle request %s", message['id'])
				log.error('%s (%s)' % (error.getMessage(), error.getCode()))
			}
		} else {
			try {
				log.debug("Handling request from client %s", message.toString())
				var result = self.onRpcRequest(message['id'], message['method'], message.get('params'))
				if defined result {
					self.jsonRpcEndpoint({
						"jsonrpc": JSONRPC_VERSION,
						"result": result.toHash(),
						"id": message['id']
					})
				}
			} catch error {
				log.error("Failed to handle request %s (%s)", message['method'], message['id'])
				log.error('%s (%s)' % (error.getMessage(), error.getCode()))
				self.jsonRpcEndpoint({
					'jsonrpc': JSONRPC_VERSION,
					'id': message['id'],
					'error': error.toHash()
				})
			}
		}
	}

	var def onRpcNotification(self, method, params) {
		if self.shutdown and method != 'exit' {
			// exit is the only allowed method during shutdown
			log.debug("Ignoring non-exit method during shutdown: %s", item)
			raise KeyError
		}
		const callMethod = Network.JsonRpc.RequestHandler.toMethodSymbol(method)
		log.debug("RPC call %s", callMethod)
		if callMethod not in membersof self {
			raise Network.JsonRpc.MethodNotFound(method)
		}
		self.$(callMethod)(params)
	}

	/**
	 * Override getitem to fallback through multiple dispatchers.
	 */
	var def onRpcRequest(self, id, method, params) {
		if self.shutdown and method != 'exit' {
			// exit is the only allowed method during shutdown
			log.debug("Ignoring non-exit method during shutdown: %s", item)
			raise KeyError
		}
		const callMethod = Network.JsonRpc.RequestHandler.toMethodSymbol(method)
		log.debug("RPC call %s", callMethod)
		if callMethod not in membersof self {
			raise Network.JsonRpc.MethodNotFound(method)
		}
		return self.$(callMethod)(params)
	}

	var def onRpcResponse(self, id, result, error) {

	}

	- const def getWorkspaceFromUrl(self, uri) {
		if var url = System.Url(uri) {
			var path = url.getPath()
			if not defined path {
				return none
			}
			var parts = path.split('/')
			for let var name in parts.reversed() {
				if let var workspace = self.workspaces.get(name) {
					return workspace
				}
			}
		}
	}

	/**
	 * Returns `data` converted into an instance of `Network.JsonRpc.Message`.
	 */
	- const def toMessage(self, data) {
		switch typeof data {
		case 'Network.JsonRpc.Message':
			return data
		case 'string':
			return Network.JsonRpc.Message.fromString(data)
		default:
			return Network.JsonRpc.Message(data)
		}
	}

	const def capabilities(self, rootUri) {
		return {
			'codeActionProvider': true,
			'codeLensProvider': {
				'resolveProvider': false  // We may need to make this configurable
			},
			'completionProvider': {
				'resolveProvider': true,  // We could know everything ahead of time, but this takes time to transfer
				'triggerCharacters': ['.']
			},
			'documentFormattingProvider': true,
			'documentHighlightProvider': true,
			'documentRangeFormattingProvider': true,
			'documentSymbolProvider': true,
			'definitionProvider': true,
			'executeCommandProvider': {
				'commands': self.flatten(self.hook('getCommands', rootUri))
			},
			'hoverProvider': true,
			'referencesProvider': true,
			'renameProvider': true,
			'foldingRangeProvider': true,
			'signatureHelpProvider': {
				'triggerCharacters': ['(', ',', '=']
			},
			'textDocumentSync': {
				'change': LspTextDocumentSyncKind.Incremental,
				'save': {
					'includeText': true
				},
				'openClose': true
			},
			'workspace': {
				'workspaceFolders': {
					'supported': true,
					'changeNotifications': true
				}
			},
			'experimental': self.hook('getExperimentalCapabilities', rootUri).accumulate({}, def (result, item) {
				for k, v in item {
					result[k] = v
				}
				return result
			})
		}
	}

	- const def rpc_initialize(self, params) {

		var processId = params.get('processId')
		var rootUri = params.get('rootUri')
		var rootPath = params.get('rootPath')
		var capabilities = params.get('capabilities', {})
		var initializationOptions = params.get('initializationOptions', {})

		log.debug('Language server initialized with %s %s %s %s', processId, rootUri, rootPath, initializationOptions)
		if rootUri {
			let var url = System.Url(rootUri)
			let var config = MintLspConfig(url, initializationOptions, processId, capabilities)
			let var workspace = MintLspWorkspace(url, Callback(self, self.jsonRpcEndpoint), config)
			let var name = (url.getPath().split('/'))[-1]
			log.debug('Updated workspace for %s', name)
			self.workspaces[name] = workspace
		} elif rootPath {
			let var url = System.Url.fromFilePath(rootPath)
			let var config = MintLspConfig(url, initializationOptions, processId, capabilities)
			let var workspace = MintLspWorkspace(url, Callback(self, self.jsonRpcEndpoint), config)
			let var name = (url.getPath().split('/'))[-1]
			log.debug('Updated workspace for %s', name)
			self.workspaces[name] = workspace
			rootUri = url.toString()
		}
		for var folder in params.get('workspaceFolders') {
			let var uri = folder.get('uri')
			if uri == rootUri {
				continue // Already created
			}
			let var url = System.Url(uri)
			let var config = MintLspConfig(url, initializationOptions, processId, capabilities)
			let var workspace = MintLspWorkspace(url, Callback(self, self.jsonRpcEndpoint), config)
			let var name = folder.get('name')
			log.debug('Updated workspace for %s', name)
			self.workspaces[name] = workspace
		}

		self.hook('onInitialize', rootUri)

		if self.checkParentProcess and defined processId and self.watchingThread is none {
			let const watchParentProcess = def [self] (pid) {
				const PARENT_PROCESS_WATCH_INTERVAL = 10  // 10 s
				var parentProcess = System.Process(pid)
				while parentProcess.isRunning() {
					System.sleep(PARENT_PROCESS_WATCH_INTERVAL * 1000)
				}
				// exit when the given pid is not alive
				log.info("Parent process %s is not alive, exiting!", pid)
				self.onRpcNotification('exit', {})
			}

			log.debug('Starting parent process watcher for PID %d', processId)
			self.watchingThread = System.Thread(watchParentProcess)
			self.watchingThread.start(processId)
		}

		// Get our capabilities
		var serverCapabilities = self.capabilities(rootUri)
		log.info('Server capabilities: %s', serverCapabilities)
		return {
			'capabilities': serverCapabilities,
			'serverInfo': {
				'name': 'minter',
				'version': __version__
			}
		}
	}

	- const def rpc_initialized(self, params) {
		for rootUri, _ in self.workspaces {
			self.hook('onInitialized', rootUri)
		}
	}

	- const def rpc_completion_item__resolve(self, params) {
		var completionItem = params.get('completionItem', {})
		var docUri = completionItem.get('data', {}).get('docUri')
		return self.hook('onCompletionItemResolve', docUri, completionItem)
	}

	- const def rpc_textDocument_didClose(self, params) {
		var textDocument = params['textDocument']
		var workspace = self.getWorkspaceFromUrl(textDocument['uri'])
		workspace.publish_diagnostics(textDocument['uri'], [])
		workspace.rm_document(textDocument['uri'])
	}

	- const def rpc_textDocument_didOpen(self, params) {
		var textDocument = params['textDocument']
		var workspace = self.getWorkspaceFromUrl(textDocument['uri'])
		workspace.createDocument(textDocument['uri'], textDocument['text'], textDocument.get('version'))
		self.hook('onDocumentDidOpen', textDocument['uri'])
		self.lint(textDocument['uri'], true)
	}

	- const def rpc_textDocument_didChange(self, params) {
		var contentChanges = params['contentChanges']
		var textDocument = params['textDocument']
		var workspace = self.getWorkspaceFromUrl(textDocument['uri'])
		for change in contentChanges {
			workspace.updateDocument(textDocument['uri'], change, version=textDocument.get('version'))
		}
		self.lint(textDocument['uri'], false)
	}

	- const def rpc_textDocument_didSave(self, params) {
		var textDocument = params['textDocument']
		self.lint(textDocument['uri'], true)
		return self.hook("onDocumentDidSave", textDocument['uri'])
	}

	- const def rpc_textDocument_codeAction(self, params) {
		var textDocument = params['textDocument']
		var range = params['range']
		var context = params['context']
		return self.flatten(self.hook('onCodeActions', textDocument['uri'], range, context))
	}

	- const def rpc_textDocument_codeLens(self, params) {
		var textDocument = params['textDocument']
		return self.flatten(self.hook('onCodeLens', textDocument['uri']))
	}

	- const def rpc_textDocument_completion(self, params) {
		var textDocument = params['textDocument']
		var position = params['position']
		return {
			'isIncomplete': false,
			'items': self.flatten(self.hook('onCompletions', textDocument['uri'], position))
		}
	}

	- const def rpc_textDocument_definition(self, params) {
		var textDocument = params['textDocument']
		var position = params['position']
		return self.flatten(self.hook('onDefinitions', textDocument['uri'], position))
	}

	- const def rpc_textDocument_documentHighlight(self, params) {
		var textDocument = params['textDocument']
		var position = params['position']
		return self.flatten(self.hook('onDocumentHighlight', textDocument['uri'], position)) or None
	}

	- const def rpc_textDocument_hover(self, params) {
		var textDocument = params['textDocument']
		var position = params['position']
		return self.hook('onHover', textDocument['uri'], position) or {'contents': ''}
	}

	- const def rpc_textDocument_documentSymbol(self, params) {
		var textDocument = params['textDocument']
		return self.flatten(self.hook('onDocumentSymbols', textDocument['uri']))
	}

	- const def rpc_textDocument_formatting(self, params) {
		var textDocument = params['textDocument']
		var options = params['options']
		return self.hook('onFormatDocument', textDocument['uri'], options)
	}

	- const def rpc_textDocument_rename(self, params) {
		var textDocument = params['textDocument']
		var position = params['position']
		var newName = params['newName']
		return self.hook('onRename', textDocument['uri'], position, newName)
	}

	- const def rpc_textDocument_foldingRange(self, params) {
		var textDocument = params['textDocument']
		return self.flatten(self.hook('onFoldingRange', textDocument['uri']))
	}

	- const def rpc_textDocument_rangeFormatting(self, params) {
		var textDocument = params['textDocument']
		var range = params['range']
		var options = params['options']
		return self.hook('onFormatRange', textDocument['uri'], range, options)
	}

	- const def rpc_textDocument_references(self, params) {
		var textDocument = params['textDocument']
		var position = params['position']
		var context = params['context']
		var excludeDeclaration = not context['includeDeclaration']
		return self.flatten(self.hook('onReferences', textDocument['uri'], position, excludeDeclaration))
	}

	- const def rpc_textDocument_signatureHelp(self, params) {
		var textDocument = params['textDocument']
		var position = params['position']
		return self.hook('onSignatureHelp', textDocument['uri'], position)
	}

	- const def rpc_workspace__didChangeConfiguration(self, params) {
		var settings = params['settings']
		if defined self.config {
			self.config.update((settings or {}).get('minter', {}))
		}
		for var workspace in self.workspaces.values() {
			workspace.updateConfig(settings)
			for docUri in workspace.documents {
				self.lint(docUri, is_saved=False)
			}
		}
	}

	- const def rpc_workspace__didChangeWorkspaceFolders(self, params) {
		var event = params['event']
		if not defined event {
			return none
		}

		var added = event.get('added', [])
		var removed = event.get('removed', [])

		for let var removedInfo in removed {
			if 'uri' in removedInfo {
				self.workspaces.remove(removedInfo['uri'])
			}
		}

		for let var addedInfo in added {
			if 'uri' in addedInfo {
				let var added_uri = addedInfo['uri']
				workspace_config = config.Config(added_uri, self.config._init_opts, self.config._process_id, self.config._capabilities)
				workspace_config.update(self.config._settings)
				self.workspaces[added_uri] = MintLspWorkspace(added_uri, self.jsonRpcEndpoint, workspace_config)
			}
		}

		var rootWorkspaceRemoved = removed.anyOf(def [self] (removedInfo) { return removedInfo['uri'] == self.rootUri })
		var workspaceAdded = not added.isEmpty() and added[0].in('uri')
		if rootWorkspaceRemoved and workspaceAdded {
			let var added_uri = added[0]['uri']
			self.rootUri = added_uri
			new_root_workspace = self.workspaces[added_uri]
			self.config = new_root_workspace._config
			self.workspace = new_root_workspace
		} elif rootWorkspaceRemoved {
			// NOTE: Removing the root workspace can only happen when the server
			// is closed, thus the else condition of this if can never happen.
			if self.workspaces {
				log.debug('Root workspace deleted!')
				let var available_workspaces = sorted(self.workspaces)
				let var first_workspace = available_workspaces[0]
				let var new_root_workspace = self.workspaces[first_workspace]
				self.rootUri = first_workspace
				self.config = new_root_workspace._config
				self.workspace = new_root_workspace
			}
		}

		// Migrate documents that are on the root workspace and have a better
		// match now
		var docUris = self.workspace._docs.keys()
		for let var uri in docUris {
			let var doc = self.workspace._docs.pop(uri)
			let var newWorkspace = self.getWorkspaceFromUrl(uri)
			newWorkspace._docs[uri] = doc
		}
	}

	- const def rpc_workspace__didChangeWatchedFiles(self, params) {
		var changes = params.get('changes')
		var changedMintFiles = Set()
		var configChanged = false
		for let var d in changes {
			let var uri = d.get('uri', '')
			if uri.endsWith('.mn') {
				changedMintFiles.insert(uri)
			} elif uri.endsWith(CONFIG_FILEs) {
				configChanged = true
			}
		}

		if configChanged {
			self.config.settings.cache_clear()
		} elif changedMintFiles.isEmpty() {
			// Only externally changed python files and lint configs may result in changed diagnostics.
			return none
		}

		for let var workspace in self.workspaces.values() {
			for let var docUri in workspace.getDocuments() {
				// Changes in docUri are already handled by rpc_textDocument_did_save
				if docUri not in changedMintFiles {
					self.lint(docUri, is_saved=False)
				}
			}
		}
	}

	- const def rpc_workspace__executeCommand(self, params) {
		var command = params['command']
		var arguments = params['arguments']
		return self.hook('onExecuteCommand', command, arguments)
	}

	- const def rpc_shutdown(self, params) {
		for workspace in self.workspaces.values() {
			workspace.close()
		}
		self.shutdown = true
	}

	- const def rpc_exit(self, params) {
		self.running = false
	}

	/**
	 * Calls hookName and returns a list of results from all registered handlers
	 */
	- const def hook(self, hookName, docUri, ...) {
		log.debug('Call hook for %s', hookName)
		if var workspace = self.getWorkspaceFromUrl(docUri) {
			var config = workspace.getConfig()
			var document = workspace.getDocument(docUri)
			var hookHandlers = config.getPluginManager().subSetHookCaller(hookName, config.getDisabledPlugins())
			return hookHandlers(config, workspace, document, *va_args)
		}
	}

	/**
	 * Since we're debounced, the document may no longer be open
	 */
	- const def lint(self, docUri, isSaved) {
		if var workspace = self.getWorkspaceFromUrl(docUri) {
			if docUri in workspace.getDocuments() {
				workspace.publishDiagnostics(docUri, self.flatten(self.hook('onLint', docUri, isSaved)))
			}
		}
	}

	- @const def flatten(listOfLists) {
		return [for let var list in listOfLists {
			for let var item in list {
				item
			}
		}]
	}

	- watchingThread = none
	- workspaces = {}
	- uriWorkspaceMapper = {}

	- checkParentProcess = false
	- jsonRpcEndpoint = null
	- jsonRpcStream = null
	- shutdown = false
	- running = false
}

/**
 * Starts a language server described by the `MintLspServerClass` class initialized
 * to communicate using a TCP socket listening on the address `address` an the port
 * `port`. If the `checkParentProcess` is set to `true`, the server will automaticaly
 * be closed if its parent process is closed.
 */
$def startTcpLangServer(address, port, checkParentProcess, MintLspServerClass = MintLspServer) {

	const shutdownServer = def (checkParentProcess, server) {
		if checkParentProcess {
			log.debug('Shutting down server')
			// Shutdown call must be done on a thread, to prevent deadlocks
			var stopThread = System.Thread(server, server.close)
			stopThread.start()
		}
	}

	// Construct a custom wrapper class around the user's handler_class
	var wrapper_class = type(typeof MintLspServerClass + 'Handler', [Network.JsonRpc.RequestHandler], {
		'new': def [MintLspServerClass, checkParentProcess] (self, endpoint) {
			if self = Network.JsonRpc.RequestHandler.new(self, endpoint) {
				self.delegate = MintLspServerClass(self, checkParentProcess)
				return self
			}
		},
		'onOpen': def (self, channel) {
			try {
				channel.setNonBlocking(false)
			} catch e {
				if not SocketError.isBaseOf(e) or System.OS.getType() != System.OSType.Windows {
					raise e
				}
				if e.getErrno() != OSError.Errno.ECONNRESET {
					raise e
				}
				// Catch and pass on ConnectionResetError when parent process dies
			}
		},
		'onClose': def [shutdownServer, checkParentProcess] (self, channel) {
			shutdownServer(checkParentProcess, channel)
		},
		'onMessage': def (self, channel) {
			while var message = channel.read() {
				self.delegate.consume(message)
			}
		},
		private('delegate'): null
	})

	var endpoint = Network.TcpIp(address, port)
	endpoint.setSocketOption(Network.SocketOption.REUSEADDR, true)

	var server = Network.JsonRpc.Server(endpoint, wrapper_class)

	try {
		server.watch()
		server.listen()
		log.info('Serving %s on (%s, %s)', typeof MintLspServerClass, address, port)
		Network.Scheduler.instance().run()
	}

	log.info('Shutting down')
	server.close()
}

/**
 * Starts a language server described by the `MintLspServerClass` class initialized
 * to communicate using a web socket listening on the the port `port`. If the
 * `checkParentProcess` is set to `true`, the server will automaticaly be closed if
 * its parent process is closed.
 */
$def startWSLangServer(port, checkParentProcess, MintLspServerClass = MintLspServer) {
	
}

/**
 * Starts a language server described by the `MintLspServerClass` class initialized
 * to communicate using the {System.IO} object. If the `checkParentProcess` is
 * set to `true`, the server will automaticaly be closed if its parent process is
 * closed.
 */
$def startIOLangServer(checkParentProcess, MintLspServerClass = MintLspServer) {
	log.info('Starting %s IO language server', typeof MintLspServerClass)
	var server = MintLspServerClass(Network.SynchronousChannel(Event.SystemPipe(System.stdin, System.stdout), Network.JsonRpc.Serializer), checkParentProcess)
	server.start()
}
