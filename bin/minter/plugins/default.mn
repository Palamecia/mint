/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 */

load minter.plugin
load mint.string
load mint.lexicalhandler
load serializer.jsonstream
load system.file
load system.uri

class DefaultPlugin : MintLspPlugin {

    const def onDocumentDidOpen(self, config, workspace, document) {
        const path = document.getPath()
        var parser = DefaultPlugin.Parser()
        if let documentInfo = parser.scan(config, document) {
            self.createOrUpdateDocument(config, path, documentInfo)
        }
    }

    const def onDocumentSymbols(self, config, workspace, document) {
        if let documentInfo = self.documents.get(document.getPath()) {
            return [...self.listSymbols(documentInfo)]
        } else {
            log.error("Document %s not found", document.getPath())
        }
    }

    const def onDefinitions(self, config, workspace, document, position) {
        if let documentInfo = self.documents.get(document.getPath()) {
            if let symbol = self.findSymbol(documentInfo.get('symbols'), position) {
                log.debug("Searching symbol '%s' (line: %d, character: %d)", symbol, position.get('line'), position.get('character'))
                let symbolDefinitions = []
                if let context = self.findContext(documentInfo.get('definitions', {}), position) {
                    for let definition in self.listDefinitions(document, context, symbol) {
                        symbolDefinitions << definition
                    }
                }
                for let (path, moduleInfo) in self.documents {
                    for let definition in self.listDefinitions(document, moduleInfo, symbol) {
                        symbolDefinitions << definition
                    }
                }
                if symbolDefinitions.isEmpty() {
                    log.error("Symbol '%s' not found", symbol)
                } else {
                    return symbolDefinitions
                }
            } else {
                log.error("No symbol found (line: %d, character: %d)", position.get('line'), position.get('character'))
            }
        } else {
            log.error("Document %s not found", document.getPath())
        }
    }

    const def onReferences(self, config, workspace, document, position, includeDeclaration) {
        if let documentInfo = self.documents.get(document.getPath()) {
            if let symbol = self.findSymbol(documentInfo.get('symbols'), position) {
                log.debug("Searching references '%s' (line: %d, character: %d)", symbol, position.get('line'), position.get('character'))
                if let context = self.findContext(documentInfo.get('definitions', {}), position) {
                    switch context.get('kind') {
                    case DefaultPlugin.Parser.SymbolKind.Function:
                        log.debug("Searching in context '%s'", self.findSymbol(documentInfo.get('symbols'), context))
                        return [...self.listReferences(document.getPath(), context, symbol)]
                    default:
                        break
                    }
                }
                log.debug("Searching in module context")
                let symbolReferences = []
                for let (path, moduleInfo) in self.documents {
                    for let reference in self.listReferences(path, moduleInfo, symbol) {
                        symbolReferences << reference
                    }
                }
                if symbolReferences.isEmpty() {
                    log.error("Symbol '%s' not found", symbol)
                } else {
                    return symbolReferences
                }
            } else {
                log.error("No symbol found (line: %d, character: %d)", position.get('line'), position.get('character'))
            }
        } else {
            log.error("Document %s not found", document.getPath())
        }
    }

    - final const def createOrUpdateDocument(self, config, path, documentInfo) {
        let rootDir = System.Dir(config.getRootPath())
        self.documents[path] = documentInfo
        let cacheFile = rootDir.getFile('.minter/cache/' + rootDir.relativeFilePath(path) + '.json')
        try {
            rootDir.mkpath(rootDir.relativeFilePath(cacheFile.getDirectory().getPath()))
        }
        try {
            cacheFile.open('w')
            Serializer.JsonStream(cacheFile).write(documentInfo)
        } catch error {
            log.error("Failed to update %s: %s", cacheFile.absolutePath(), error.toString())
        }
    }

    - final const def findSymbol(self, symbols, position) {
        for let (symbol, ranges) in symbols {
            for let range in ranges {
                if range.get('line') == position.get('line') \
                    and range.get('character') <= position.get('character') \
                    and range.get('character') + range.get('length') >= position.get('character') {
                    return symbol
                }
            }
        }
    }

    - final const def findDefinitions(self, context, symbolPath, index = 0) {
        if index < symbolPath.size() {
            const symbol = symbolPath[index]
            let definitions = context.get('definitions', {})
            log.debug("Searching token '%s' in definitions %s", symbol, [*definitions.keys()])
            if let symbolDefinitions = definitions.get(symbol) {
                for let definition in symbolDefinitions {
                    for let item in self.findDefinitions(definition, symbolPath, index + 1) {
                        yield item
                    }
                }
            } else {
                log.debug("Searching token '%s' in variables %s", symbol, [*context.get('variables', {}).keys()])
                let variable = context.get('variables', {}).get(symbol)
                if defined variable {
                    if 'type' in variable {
                        for let definition in self.findDefinitions(variable['type'].split('.')) {
                            for let item in self.findDefinitions(definition, symbolPath, index + 1) {
                                yield item
                            }
                        }
                    } else {
                        for let item in self.findDefinitions(variable, symbolPath, index + 1) {
                            yield item
                        }
                    }
                }
            }
        } else {
            yield context
        }
    }

    - final const def findDefinitions(self, symbolPath) {
        for let (path, moduleInfo) in self.documents {
            for let definition in self.findDefinitions(moduleInfo, symbolPath) {
                yield definition
            }
        }
    }

    - final const def listSymbols(self, context) {
        for let (symbol, symbolDefinitions) in context.get('definitions') {
            for let definition in symbolDefinitions {
                yield {
                    'name': symbol,
                    'kind': definition.get('kind'),
                    'range': {
                        'start': { 'line': definition.get('line'), 'character': definition.get('character') },
                        'end': { 'line': definition.get('line'), 'character': definition.get('character') + definition.get('length') }
                    },
                    'selectionRange': {
                        'start': { 'line': definition.get('line'), 'character': definition.get('character') },
                        'end': { 'line': definition.get('line'), 'character': definition.get('character') + definition.get('length') }
                    },
                    'children': [...self.listSymbols(definition)]
                }
            }
        }
        /*for let (symbol, symbolReferences) in context.get('references') {
            for let reference in symbolReferences {
                yield {
                    'name': reference.get('token'),
                    'kind': reference.get('kind'),
                    'range': {
                        'start': { 'line': reference.get('line'), 'character': reference.get('character') },
                        'end': { 'line': reference.get('line'), 'character': reference.get('character') + reference.get('length') }
                    },
                    'selectionRange': {
                        'start': { 'line': reference.get('line'), 'character': reference.get('character') },
                        'end': { 'line': reference.get('line'), 'character': reference.get('character') + reference.get('length') }
                    }
                }
            }
        }*/
    }

    - final const def listDefinitions(self, document, context, symbol) {
        if let symbolDefinitions = self.findDefinitions(context, symbol.split('.')) {
            return [for let definition in symbolDefinitions {{
                'uri': System.Url.fromFilePath(document.getPath()).toString(),
                'range': {
                    'start': { 'line': definition.get('line'), 'character': definition.get('character') },
                    'end': { 'line': definition.get('line'), 'character': definition.get('character') + definition.get('length') }
                }
            }}]
        }
        if let symbolDefinitions = self.findDefinitions(context, [symbol]) {
            return [for let definition in symbolDefinitions {{
                'uri': System.Url.fromFilePath(document.getPath()).toString(),
                'range': {
                    'start': { 'line': definition.get('line'), 'character': definition.get('character') },
                    'end': { 'line': definition.get('line'), 'character': definition.get('character') + definition.get('length') }
                }
            }}]
        }
    }

    - final const def listReferences(self, path, context, symbol) {
        if let symbolReferences = context.get('references', {}).get(symbol) {
            for let reference in symbolReferences {
                yield {
                    'uri': System.Url.fromFilePath(path).toString(),
                    'range': {
                        'start': { 'line': reference.get('line'), 'character': reference.get('character') },
                        'end': { 'line': reference.get('line'), 'character': reference.get('character') + reference.get('length') }
                    },
                    'selectionRange': {
                        'start': { 'line': reference.get('line'), 'character': reference.get('character') },
                        'end': { 'line': reference.get('line'), 'character': reference.get('character') + reference.get('length') }
                    }
                }
            }
        }
        for let (member, definitions) in context.get('definitions', {}) {
            for let definition in definitions {
                for let memberReferences in self.listReferences(path, definition, symbol) {
                    yield memberReferences
                }
            }
        }
    }

    - final const def findContext(self, definitions, position) {
        let posLine = position.get('line')
        let posCol = position.get('character')
        for let (symbol, symbolDefinitions) in definitions {
            for let definition in symbolDefinitions {
                if let contextRange = definition.get('range') {
                    let startLine = contextRange.get('start', {}).get('line')
                    let startCol = contextRange.get('start', {}).get('character')
                    let endLine = contextRange.get('end', {}).get('line')
                    let endCol = contextRange.get('end', {}).get('character')
                    if not defined startLine or not defined endLine {
                        continue
                    }
                    if startLine <= posLine and endLine >= posLine {
                        if let members = definition.get('definitions') {
                            if let context = self.findContext(members, position) {
                                return context
                            }
                        }
                        switch definition.get('kind') {
                        case DefaultPlugin.Parser.SymbolKind.Function:
                            let parametersPos = definition.get('character') + definition.get('length')
                            if (startLine < posLine or parametersPos <= posCol) and (endLine > posLine or endCol >= posCol) {
                                return definition
                            }
                            break
                        default:
                            if (startLine < posLine or startCol <= posCol) and (endLine > posLine or endCol >= posCol) {
                                return definition
                            }
                            break
                        }
                    }
                }
            }
        }
    }

    - class Parser : LexicalHandler {
        enum SymbolKind {
            File = 1
            Module = 2
            Namespace = 3
            Package = 4
            Class = 5
            Method = 6
            Property = 7
            Field = 8
            Constructor = 9
            Enum = 10
            Interface = 11
            Function = 12
            Variable = 13
            Constant = 14
            String = 15
            Number = 16
            Boolean = 17
            Array = 18
            Object = 19
            Key = 20
            Null = 21
            EnumMember = 22
            Struct = 23
            Event = 24
            Operator = 25
            TypeParameter = 26
        }

        const def scan(self, config, document) {
            log.debug('Scanning %s', document.getPath())
            let rootDir = System.Dir(config.getRootPath())
            let modulePath = rootDir.relativeFilePath(System.File(document.getPath()).completeBaseName()).replace(System.FileSystem.Separator, '.')
            self.createDefinition(modulePath, DefaultPlugin.Parser.SymbolKind.Module, 0, 0)
            if self.parse(document.getSource()) {
                return {
                    'dependencies': self.dependencies,
                    'definitions': self.definitions,
                    'references': self.references,
                    'symbols': self.symbols
                }
            } else {
                log.error('Failed to scan %s', path)
            }
        }

        override const def onNewLine(self, lineNumber, offset) {
            self.lineNumber = lineNumber
            self.lineOffset = offset
            return true
        }

        override const def onToken(self, % type, token, offset) {
            switch self.getState() {
            case DefaultPlugin.Parser.State.ExpectStart:
                switch type {
                case is LexicalHandler.Token.Load:
                    self.pushState(DefaultPlugin.Parser.State.ExpectModule)
                    self.symbol = {
                        'line': self.lineNumber - 1
                    }
                    break
                case is LexicalHandler.Token.Package:
                    self.pushState(DefaultPlugin.Parser.State.ExpectPackage)
                    break
                case is LexicalHandler.Token.Enum:
                    self.pushState(DefaultPlugin.Parser.State.ExpectEnum)
                    break
                case is LexicalHandler.Token.Class:
                    self.pushState(DefaultPlugin.Parser.State.ExpectClass)
                    break
                case is LexicalHandler.Token.Def:
                    switch self.getContextKind() {
                    case DefaultPlugin.Parser.SymbolKind.Class:
                        self.pushState(DefaultPlugin.Parser.State.ExpectMemberDefinition)
                        break
                    default:
                        self.pushState(DefaultPlugin.Parser.State.ExpectDefinition)
                        break
                    }
                    break
                case is LexicalHandler.Token.At:
                case is LexicalHandler.Token.Var:
                case is LexicalHandler.Token.Let:
                case is LexicalHandler.Token.Const:
                case is LexicalHandler.Token.Dollar:
                case is LexicalHandler.Token.Percent:
                    self.pushState(DefaultPlugin.Parser.State.ExpectVariable)
                    break
                case is LexicalHandler.Token.Symbol:
                    switch self.getContextKind() {
                    case is none:
                        break
                    case DefaultPlugin.Parser.SymbolKind.Enum:
                        log.debug("Found enum member '%s' (line: %d, character: %d)", token, self.lineNumber - 1, offset - self.lineOffset)
                        self.createDefinition(token, DefaultPlugin.Parser.SymbolKind.EnumMember, self.lineNumber - 1, offset - self.lineOffset)
                        break
                    case DefaultPlugin.Parser.SymbolKind.Class:
                        log.debug("Found class member '%s' (line: %d, character: %d)", token, self.lineNumber - 1, offset - self.lineOffset)
                        self.createDefinition(token, DefaultPlugin.Parser.SymbolKind.Field, self.lineNumber - 1, offset - self.lineOffset)
                        break
                    default:
                        break
                    }
                default:
                    break
                }
                break
            case DefaultPlugin.Parser.State.ExpectModule:
                switch type {
                case is LexicalHandler.Token.LineEnd:
                    log.debug("Found module '%s' (line: %d, character: %d)", self.symbol['module'], self.symbol['line'], self.symbol['character'])
                    self.createReference(self.symbol['module'], self.symbol['module'], DefaultPlugin.Parser.SymbolKind.Module, self.symbol['line'], self.symbol['character'])
                    self.createSymbol(self.symbol['module'], self.symbol['module'], self.symbol['line'], self.symbol['character'])
                    self.dependencies << self.symbol
                    self.popState()
                    break
                default:
                    break
                }
                break
            case DefaultPlugin.Parser.State.ExpectPackage:
                switch type {
                case is LexicalHandler.Token.Symbol:
                    log.debug("Found package '%s' (line: %d, character: %d)", token, self.lineNumber - 1, offset - self.lineOffset)
                    self.pushContext(token, self.createDefinition(token, DefaultPlugin.Parser.SymbolKind.Package, self.lineNumber - 1, offset - self.lineOffset))
                    self.popState()
                    break
                default:
                    break
                }
                break
            case DefaultPlugin.Parser.State.ExpectEnum:
                switch type {
                case is LexicalHandler.Token.Symbol:
                    log.debug("Found enum '%s' (line: %d, character: %d)", token, self.lineNumber - 1, offset - self.lineOffset)
                    self.pushContext(token, self.createDefinition(token, DefaultPlugin.Parser.SymbolKind.Enum, self.lineNumber - 1, offset - self.lineOffset))
                    self.popState()
                    break
                default:
                    break
                }
                break
            case DefaultPlugin.Parser.State.ExpectClass:
                switch type {
                case is LexicalHandler.Token.Symbol:
                    log.debug("Found class '%s' (line: %d, character: %d)", token, self.lineNumber - 1, offset - self.lineOffset)
                    self.pushContext(token, self.createDefinition(token, DefaultPlugin.Parser.SymbolKind.Class, self.lineNumber - 1, offset - self.lineOffset))
                    self.popState()
                    break
                default:
                    break
                }
                break
            case DefaultPlugin.Parser.State.ExpectDefinition:
                switch type {
                case is LexicalHandler.Token.Symbol:
                    log.debug("Found function '%s' (line: %d, character: %d)", token, self.lineNumber - 1, offset - self.lineOffset)
                    self.pushContext(token, self.createDefinition(token, DefaultPlugin.Parser.SymbolKind.Function, self.lineNumber - 1, offset - self.lineOffset))
                    break
                default:
                    break
                }
                break
            case DefaultPlugin.Parser.State.ExpectMemberDefinition:
                switch type {
                case is LexicalHandler.Token.Symbol:
                    log.debug("Found method '%s' (line: %d, character: %d, owner: %s)", token, self.lineNumber - 1, offset - self.lineOffset, ([for let context in self.contexts { context['token'] }] + [self.context['token']]).join('.'))
                    self.pushContext(token, self.createDefinition(token, DefaultPlugin.Parser.SymbolKind.Function, self.lineNumber - 1, offset - self.lineOffset))
                    self.context['owner'] = [for let context in self.contexts { context['token'] }]
                    break
                default:
                    break
                }
                break
            case DefaultPlugin.Parser.State.ExpectVariable:
                switch type {
                case is LexicalHandler.Token.Symbol:
                    log.debug("Found variable '%s' (line: %d, character: %d)", token, self.lineNumber - 1, offset - self.lineOffset)
                    self.createVariable(token, DefaultPlugin.Parser.SymbolKind.Variable, self.lineNumber - 1, offset - self.lineOffset)
                    self.popState()
                    break
                case is LexicalHandler.Token.Def:
                    switch self.getContextKind() {
                    case DefaultPlugin.Parser.SymbolKind.Class:
                        self.setState(DefaultPlugin.Parser.State.ExpectMemberDefinition)
                        break
                    default:
                        self.setState(DefaultPlugin.Parser.State.ExpectDefinition)
                        break
                    }
                    break
                default:
                    break
                }
                break
            case DefaultPlugin.Parser.State.ExpectVariableList:
                switch type {
                case is LexicalHandler.Token.Symbol:
                    log.debug("Found variable '%s' (line: %d, character: %d)", token, self.lineNumber - 1, offset - self.lineOffset)
                    self.createVariable(token, DefaultPlugin.Parser.SymbolKind.Variable, self.lineNumber - 1, offset - self.lineOffset)
                    break
                default:
                    break
                }
                break
            case DefaultPlugin.Parser.State.ExpectCaptureList:
                switch type {
                case is LexicalHandler.Token.Symbol:
                    log.debug("Found capture '%s' (line: %d, character: %d)", token, self.lineNumber - 1, offset - self.lineOffset)
                    self.createVariable(token, DefaultPlugin.Parser.SymbolKind.Variable, self.lineNumber - 1, offset - self.lineOffset)
                    break
                default:
                    break
                }
                break
            case DefaultPlugin.Parser.State.ExpectParameterList:
                switch type {
                case is LexicalHandler.Token.Symbol:
                    log.debug("Found parameter '%s' (line: %d, character: %d)", token, self.lineNumber - 1, offset - self.lineOffset)
                    self.createVariable(token, DefaultPlugin.Parser.SymbolKind.Variable, self.lineNumber - 1, offset - self.lineOffset)
                    break
                default:
                    break
                }
                break
            case DefaultPlugin.Parser.State.ExpectSelfParameter:
                switch type {
                case is LexicalHandler.Token.Symbol:
                    log.debug("Found parameter '%s' (line: %d, character: %d, type: %s)", token, self.lineNumber - 1, offset - self.lineOffset, [for let context in self.contexts { context['token'] }].join('.'))
                    self.createVariable(token, DefaultPlugin.Parser.SymbolKind.Variable, self.lineNumber - 1, offset - self.lineOffset)
                    if not self.contexts.isEmpty() {
                        self.context['definition']['variables'][token]['type'] = self.contexts[-1].get('symbol')
                    }
                    self.setState(DefaultPlugin.Parser.State.ExpectParameterList)
                    break
                default:
                    break
                }
                break
            }
            switch type {
            case is LexicalHandler.Token.OpenBrace:
                self.openBlock(self.lineNumber - 1, offset - self.lineOffset)
                switch self.getState() {
                case DefaultPlugin.Parser.State.ExpectDefinition:
                case DefaultPlugin.Parser.State.ExpectMemberDefinition:
                    self.popState()
                    break
                default:
                    break
                }
                break
            case is LexicalHandler.Token.CloseBrace:
                self.closeBlock(self.lineNumber - 1, offset - self.lineOffset)
                break
            case is LexicalHandler.Token.OpenParenthesis:
                switch self.getState() {
                case DefaultPlugin.Parser.State.ExpectDefinition:
                    self.setState(DefaultPlugin.Parser.State.ExpectParameterList)
                    break
                case DefaultPlugin.Parser.State.ExpectMemberDefinition:
                    self.setState(DefaultPlugin.Parser.State.ExpectSelfParameter)
                    break
                case DefaultPlugin.Parser.State.ExpectVariable:
                    self.setState(DefaultPlugin.Parser.State.ExpectVariableList)
                    break
                default:
                    break
                }
                break
            case is LexicalHandler.Token.CloseParenthesis:
                switch self.getState() {
                case DefaultPlugin.Parser.State.ExpectParameterList:
                    self.popState()
                    break
                case DefaultPlugin.Parser.State.ExpectSelfParameter:
                    self.popState()
                    break
                case DefaultPlugin.Parser.State.ExpectVariableList:
                    self.popState()
                    break
                default:
                    break
                }
                break
            case is LexicalHandler.Token.OpenBracket:
                switch self.getState() {
                case DefaultPlugin.Parser.State.ExpectDefinition:
                    self.pushState(DefaultPlugin.Parser.State.ExpectCaptureList)
                    break
                default:
                    break
                }
                break
            case is LexicalHandler.Token.CloseBracket:
                switch self.getState() {
                case DefaultPlugin.Parser.State.ExpectCaptureList:
                    self.popState()
                    break
                default:
                    break
                }
                break
            }
            return true
        }

        override const def onModulePathToken(self, context, token, offset) {
            self.symbol['module'] = (context + token).join('')
            if context.isEmpty() {
                self.symbol['character'] = offset - self.lineOffset
            }
            return true
        }

        override const def onSymbolToken(self, context, token, offset) {
            var symbol = self.getSymbol((context + token).join('.'))
            self.createReference(symbol, token, DefaultPlugin.Parser.SymbolKind.Variable, self.lineNumber - 1, offset - self.lineOffset)
            self.createSymbol(symbol, token, self.lineNumber - 1, offset - self.lineOffset)
            return true
        }

        override const def onSymbolToken(self, context, offset) {
            return true
        }

        - final const def createVariable(self, token, kind, line, character) {
            if self.context {
                let variables = self.context['definition']['variables']
                return variables[token] = {
                    'kind': kind,
                    'line': line,
                    'character': character,
                    'length': token.utf8ByteCount()
                }
            }
            return self.variables[token] = {
                'kind': kind,
                'line': line,
                'character': character,
                'length': token.utf8ByteCount()
            }
        }

        - final const def createDefinition(self, token, kind, line, character) {
            var definition = {
                'kind': kind,
                'line': line,
                'character': character,
                'length': token.utf8ByteCount(),
                'variables': {},
                'references': {},
                'definitions': {},
                'range': {}
            }
            var definitions = self.context ? self.context['definition']['definitions'] : self.definitions
            if token not in definitions {
                definitions[token] = []
            }
            definitions[token] << definition
            return definition
        }

        - final const def createReference(self, symbol, token, kind, line, character) {
            let symbolInfo = {
                'token': token,
                'kind': kind,
                'line': line,
                'character': character,
                'length': token.utf8ByteCount()
            }
            if self.context {
                let symbolPath = symbol.split('.')
                let variable = self.context['definition']['variables'].get(symbolPath[0])
                if defined variable and 'type' in variable {
                    symbolPath[0] = variable['type']
                    symbol = symbolPath.join('.')
                }
                let references = self.context['definition']['references']
                if symbol in references {
                    references[symbol] << symbolInfo
                } else {
                    references[symbol] = [symbolInfo]
                }
            } else {
                if symbol in self.references {
                    self.references[symbol] << symbolInfo
                } else {
                    self.references[symbol] = [symbolInfo]
                }
            }
        }

        - final const def createSymbol(self, symbol, token, line, character) {
            let symbolInfo = {
                'line': line,
                'character': character,
                'length': token.utf8ByteCount()
            }
            if symbol in self.symbols {
                self.symbols[symbol] << symbolInfo
            } else {
                self.symbols[symbol] = [symbolInfo]
            }
        }

        - final const def getContextKind(const self) {
            if self.context {
                return self.context['definition']['kind']
            }
        }

        - final const def pushContext(self, token, definition) {
            if self.context {
                self.contexts << self.context
            }
            let symbol = self.getSymbol(token)
            self.context = {
                'symbol': symbol,
                'token': token,
                'definition': definition,
                'block': 0
            }
        }

        - final const def openBlock(self, line, character) {
            if self.context and not self.context['block']++ {
                self.context['definition']['range']['start'] = { 'line': line, 'character': character }
            }
        }

        - final const def closeBlock(self, line, character) {
            if self.context and not --self.context['block'] {
                self.context['definition']['range']['end'] = { 'line': line, 'character': character }
                if self.contexts.isEmpty() {
                    self.context = null
                } else {
                    self.context = self.contexts[-1]
                    self.contexts.remove(-1)
                }
            }
        }

        - final const def getSymbol(const self, symbol) {
            switch self.getContextKind() {
            case DefaultPlugin.Parser.SymbolKind.Class:
            case DefaultPlugin.Parser.SymbolKind.Enum:
                return [self.context.get('symbol'), symbol].join('.')
            default:
                return symbol
            }
        }

        - final const def getState(const self) {
            if self.states.isEmpty() {
                return DefaultPlugin.Parser.State.ExpectStart
            }
            return self.states[-1]
        }

        - final const def setState(self, %state) {
            return self.states[-1] = state
        }

        - final const def pushState(self, %state) {
            return self.states << state
        }

        - final const def popState(self) {
            return self.states.remove(-1)
        }

        - enum State {
            ExpectStart
            ExpectModule
            ExpectPackage
            ExpectEnum
            ExpectClass
            ExpectDefinition
            ExpectMemberDefinition
            ExpectVariable
            ExpectVariableList
            ExpectCaptureList
            ExpectParameterList
            ExpectSelfParameter
        }

        - final states = []
        - final lineNumber = 0
        - final lineOffset = 0
        - final dependencies = []
        - final definitions = {}
        - final references = {}
        - final variables = {}
        - final symbols = {}
        - final symbol = {}
        - final contexts = []
        - final context = null
    }

    - final documents = {}
}
