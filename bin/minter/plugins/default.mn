/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 */

load minter.plugin
load mint.string
load mint.lexicalhandler
load system.uri

class DefaultPlugin : MintLspPlugin {

    const def onDocumentDidOpen(self, config, workspace, document) {
        const path = document.getPath()
        var parser = DefaultPlugin.Parser()
        if let var documentInfo = parser.scan(document) {
            self.documents[path] = documentInfo
        }
    }

    const def onDocumentSymbols(self, config, workspace, document)  {
        if let var documentInfo = self.documents.get(document.getPath()) {
            return [*self.listDefinitions(documentInfo.get('definitions'))]
        }
    }

    const def onDefinitions(self, config, workspace, document, position) {
        if let var documentInfo = self.documents.get(document.getPath()) {
            if let var symbolPath = self.findSymbol(documentInfo.get('symbols'), position) {
                log.debug("Searching symbol '%s' (line: %d, character: %d)", symbolPath.join('.'), position.get('line'), position.get('character'))
                for let var (path, moduleInfo) in self.documents {
                    if let var definition = self.findDefinition(moduleInfo.get('definitions', {}), symbolPath) {
                        log.debug("Symbol '%s' symbol found in module %s (line: %d, character: %d)", symbolPath.join('.'), path, definition.get('line'), definition.get('character'))
                        return [{
                            'uri': System.Url.fromFilePath(path).toString(),
                            'range': {
                                'start': { 'line': definition.get('line'), 'character': definition.get('character') },
                                'end': { 'line': definition.get('line'), 'character': definition.get('character') + symbolPath.join('.').utf8ByteCount() }
                            }
                        }]
                    }
                    if let var context = self.findContext(moduleInfo.get('definitions', {}), position) {
                        if let var variable = context.get('variables').get(symbolPath.join('.')) {
                            log.debug("Symbol '%s' symbol found in module %s (line: %d, character: %d)", symbolPath.join('.'), path, variable.get('line'), variable.get('character'))
                            return [{
                                'uri': System.Url.fromFilePath(path).toString(),
                                'range': {
                                    'start': { 'line': variable.get('line'), 'character': variable.get('character') },
                                    'end': { 'line': variable.get('line'), 'character': variable.get('character') + symbolPath.join('.').utf8ByteCount() }
                                }
                            }]
                        }
                    }
                }
                log.error("Symbol '%s' not found", symbolPath.join('.'))
            } else {
                log.error("No symbol found (line: %d, character: %d)", position.get('line'), position.get('character'))
            }
        }
    }

    - final const def findSymbol(self, symbols, position) {
        for let var (symbolPath, ranges) in symbols {
            for let var range in ranges {
                if range.get('line') == position.get('line') \
                    and range.get('character') <= position.get('character') \
                    and range.get('character') + symbolPath[-1].utf8ByteCount() >= position.get('character') {
                    return symbolPath
                }
            }
        }
    }

    - final const def findDefinition(self, definitions, symbolPath) {
        var definition = none
        for let var symbol in symbolPath {
            definition = definitions.get(symbol)
            if not defined definition {
                return none
            }
            definitions = definition.get('members', {})
        }
        return definition
    }

    - final const def listDefinitions(self, definitions) {
        for let var (symbol, definition) in definitions {
            yield {
                'name': symbol,
                'kind': definition.get('kind'),
                'range': {
                    'start': { 'line': definition.get('line'), 'character': definition.get('character') },
                    'end': { 'line': definition.get('line'), 'character': definition.get('character') + symbol.utf8ByteCount() }
                },
                'selectionRange': {
                    'start': { 'line': definition.get('line'), 'character': definition.get('character') },
                    'end': { 'line': definition.get('line'), 'character': definition.get('character') + symbol.utf8ByteCount() }
                }
            }
            for let var memberDefinition in self.listDefinitions(definition.get('members')) {
                yield memberDefinition
            }
        }
    }

    - final const def findContext(self, definitions, position) {
        for let var (symbol, definition) in definitions {
            if let var contextRange = definition.get('range') {
                log.debug('Context %s in range %s', symbol, contextRange)
                let var startLine = contextRange.get('start', {}).get('line')
                let var startCol = contextRange.get('start', {}).get('character')
                let var endLine = contextRange.get('end', {}).get('line')
                let var endCol = contextRange.get('end', {}).get('character')
                if not defined startLine or not defined endLine {
                    continue
                }
                if startLine <= position.get('line') and endLine >= position.get('line') {
                    if let var members = definition.get('members') {
                        if let var context = self.findContext(members, position) {
                            return context
                        }
                    }
                    return definition
                }
            }
        }
    }

    - class Parser : LexicalHandler {
        const def scan(self, document) {
            self.state = DefaultPlugin.Parser.State.ExpectStart
            log.debug('Scanning %s', document.getPath())
            if self.parse(document.getSource()) {
                return {
                    'dependencies': self.dependencies,
                    'definitions': self.definitions,
                    'symbols': self.symbols
                }
            } else {
                log.error('Failed to scan %s', path)
            }
        }

        override const def onNewLine(self, lineNumber, offset) {
            self.lineNumber = lineNumber
            self.lineOffset = offset
            return true
        }

        override const def onToken(self, % type, token, offset) {
            switch self.state {
            case is DefaultPlugin.Parser.State.ExpectStart:
                switch type {
                case is LexicalHandler.Token.Load:
                    self.state = DefaultPlugin.Parser.State.ExpectModule
                    self.symbol = {
                        'line': self.lineNumber - 1
                    }
                    break
                case is LexicalHandler.Token.Package:
                    self.state = DefaultPlugin.Parser.State.ExpectPackage
                    break
                case is LexicalHandler.Token.Enum:
                    self.state = DefaultPlugin.Parser.State.ExpectEnum
                    break
                case is LexicalHandler.Token.Class:
                    self.state = DefaultPlugin.Parser.State.ExpectClass
                    break
                case is LexicalHandler.Token.Def:
                    self.state = DefaultPlugin.Parser.State.ExpectDefinition
                    break
                case is LexicalHandler.Token.At:
                case is LexicalHandler.Token.Var:
                case is LexicalHandler.Token.Const:
                case is LexicalHandler.Token.Dollar:
                case is LexicalHandler.Token.Percent:
                    self.state = DefaultPlugin.Parser.State.ExpectVariable
                    break
                case is LexicalHandler.Token.Symbol:
                    switch self.getContextKind() {
                    case is none:
                        break
                    case DefaultPlugin.Parser.SymbolKind.Enum:
                        log.debug("Found enum member '%s' (line: %d, character: %d)", token, self.lineNumber - 1, offset - self.lineOffset)
                        self.createDefinition(token, DefaultPlugin.Parser.SymbolKind.EnumMember, self.lineNumber - 1, offset - self.lineOffset)
                        break
                    case DefaultPlugin.Parser.SymbolKind.Class:
                        log.debug("Found class member '%s' (line: %d, character: %d)", token, self.lineNumber - 1, offset - self.lineOffset)
                        self.createDefinition(token, DefaultPlugin.Parser.SymbolKind.Field, self.lineNumber - 1, offset - self.lineOffset)
                        break
                    default:
                        break
                    }
                default:
                    break
                }
                break
            case is DefaultPlugin.Parser.State.ExpectModule:
                switch type {
                case is LexicalHandler.Token.LineEnd:
                    self.state = DefaultPlugin.Parser.State.ExpectStart
                    self.dependencies << self.symbol
                    break
                default:
                    break
                }
                break
            case is DefaultPlugin.Parser.State.ExpectPackage:
                switch type {
                case is LexicalHandler.Token.Symbol:
                    log.debug("Found package '%s' (line: %d, character: %d)", token, self.lineNumber - 1, offset - self.lineOffset)
                    self.pushContext(token, self.createDefinition(token, DefaultPlugin.Parser.SymbolKind.Package, self.lineNumber - 1, offset - self.lineOffset))
                    self.state = DefaultPlugin.Parser.State.ExpectStart
                    break
                default:
                    break
                }
                break
            case is DefaultPlugin.Parser.State.ExpectEnum:
                switch type {
                case is LexicalHandler.Token.Symbol:
                    log.debug("Found enum '%s' (line: %d, character: %d)", token, self.lineNumber - 1, offset - self.lineOffset)
                    self.pushContext(token, self.createDefinition(token, DefaultPlugin.Parser.SymbolKind.Enum, self.lineNumber - 1, offset - self.lineOffset))
                    self.state = DefaultPlugin.Parser.State.ExpectStart
                    break
                default:
                    break
                }
                break
            case is DefaultPlugin.Parser.State.ExpectClass:
                switch type {
                case is LexicalHandler.Token.Symbol:
                    log.debug("Found class '%s' (line: %d, character: %d)", token, self.lineNumber - 1, offset - self.lineOffset)
                    self.pushContext(token, self.createDefinition(token, DefaultPlugin.Parser.SymbolKind.Class, self.lineNumber - 1, offset - self.lineOffset))
                    self.state = DefaultPlugin.Parser.State.ExpectStart
                    break
                default:
                    break
                }
                break
            case is DefaultPlugin.Parser.State.ExpectDefinition:
                switch type {
                case is LexicalHandler.Token.Symbol:
                    log.debug("Found function '%s' (line: %d, character: %d)", token, self.lineNumber - 1, offset - self.lineOffset)
                    self.pushContext(token, self.createDefinition(token, DefaultPlugin.Parser.SymbolKind.Function, self.lineNumber - 1, offset - self.lineOffset))
                    self.state = DefaultPlugin.Parser.State.ExpectStart
                    break
                default:
                    break
                }
                break
            case is DefaultPlugin.Parser.State.ExpectVariable:
                switch type {
                case is LexicalHandler.Token.Symbol:
                    log.debug("Found variable '%s' (line: %d, character: %d)", token, self.lineNumber - 1, offset - self.lineOffset)
                    self.createVariable(token, DefaultPlugin.Parser.SymbolKind.Variable, self.lineNumber - 1, offset - self.lineOffset)
                    self.state = DefaultPlugin.Parser.State.ExpectStart
                    break
                case is LexicalHandler.Token.Def:
                    self.state = DefaultPlugin.Parser.State.ExpectDefinition
                    break
                default:
                    break
                }
                break
            }
            switch type {
            case is LexicalHandler.Token.OpenBrace:
                self.openBlock(self.lineNumber - 1, offset - self.lineOffset)
                break
            case is LexicalHandler.Token.CloseBrace:
                self.closeBlock(self.lineNumber - 1, offset - self.lineOffset)
                break
            }
            return true
        }

        override const def onModulePathToken(self, context, token, offset) {
            self.symbol['module'] = (context + token).join('.')
            if context.isEmpty() {
                self.symbol['character'] = offset - self.lineOffset
            }
            return true
        }

        override const def onSymbolToken(self, context, token, offset) {
            var symbolPath = context + token
            if symbolPath in self.symbols {
                self.symbols[symbolPath] << {
                    'line': self.lineNumber - 1,
                    'character': offset - self.lineOffset
                }
            } else {
                self.symbols[symbolPath] = [{
                    'line': self.lineNumber - 1,
                    'character': offset - self.lineOffset
                }]
            }
            return true
        }

        override const def onSymbolToken(self, context, offset) {
            return true
        }

        - final const def createVariable(self, token, kind, line, character) {
            if self.context {
                return self.context['definition']['variables'][token] = {
                    'kind': kind,
                    'line': line,
                    'character': character
                }
            }
            return self.variables[token] = {
                'kind': kind,
                'line': line,
                'character': character
            }
        }

        - final const def createDefinition(self, token, kind, line, character) {
            if self.context {
                return self.context['definition']['members'][token] = {
                    'kind': kind,
                    'line': line,
                    'character': character,
                    'variables': {},
                    'members': {},
                    'range': {}
                }
            }
            return self.definitions[token] = {
                'kind': kind,
                'line': line,
                'character': character,
                'variables': {},
                'members': {},
                'range': {}
            }
        }

        - final const def getContextKind(const self) {
            if self.context {
                return self.context['definition']['kind']
            }
        }

        - final const def pushContext(self, token, definition) {
            if self.context {
                self.contexts << self.context
            }
            self.context = {
                'token': token,
                'definition': definition,
                'block': 0
            }
        }

        - final const def openBlock(self, line, character) {
            if self.context and not self.context['block']++ {
                self.context['definition']['range']['start'] = { 'line': line, 'character': character }
            }
        }

        - final const def closeBlock(self, line, character) {
            if self.context and not --self.context['block'] {
                self.context['definition']['range']['end'] = { 'line': line, 'character': character }
                if self.contexts.isEmpty() {
                    self.context = null
                } else {
                    self.context = self.contexts[-1]
                    self.contexts.remove(-1)
                }
            }
        }

        - enum State {
            ExpectStart
            ExpectModule
            ExpectPackage
            ExpectEnum
            ExpectClass
            ExpectDefinition
            ExpectVariable
        }

        - enum SymbolKind {
            File = 1
            Module = 2
            Namespace = 3
            Package = 4
            Class = 5
            Method = 6
            Property = 7
            Field = 8
            Constructor = 9
            Enum = 10
            Interface = 11
            Function = 12
            Variable = 13
            Constant = 14
            String = 15
            Number = 16
            Boolean = 17
            Array = 18
            Object = 19
            Key = 20
            Null = 21
            EnumMember = 22
            Struct = 23
            Event = 24
            Operator = 25
            TypeParameter = 26
        }

        - final %state = none
        - final lineNumber = 0
        - final lineOffset = 0
        - final dependencies = []
        - final definitions = {}
        - final variables = {}
        - final symbols = {}
        - final symbol = {}
        - final contexts = []
        - final context = null
    }

    - final documents = {}
}
