/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {Codec.Iconv} class which provide a codec to convert
 * text using the iconv backend.
 */

load mint.lang
load exception.exception
load serializer.datastream

package Codec {

/**
 * This class use the iconv backend to convert text from and to others encodings.
 * 
 * **Example**:
 * ```mn
 * load system.file
 * load codec.iconv
 * 
 * if file = System.open(path) {
 * 
 *     file.setCodec(Codec.Iconv('ISO-8859-1'))
 * 
 *     /// ...
 * }
 * ```
 */
class Iconv {
	/**
	 * State of a byte conversion. This type is used by the
	 * {Codec.Iconv.decodeChar}, {Codec.Iconv.decode} and
	 * {Codec.Iconv.encode} methods to make the conversion.
	 */
	enum State {
		/// Conversion succed.
		Success
		/// Invalid byte sequence.
		Invalid
		/// Conversion need more bytes.
		NeedMore
	}

	/**
	 * This class provides the context of an invalid byte sequence exception.
	 */
	class InvalidByteSequence : Exception.Exception {
		/**
		 * Create a new instance of the exception for the given `stream` byte
		 * sequence.
		 */
		const def new(self, stream) {
			self.stream = stream
			return self
		}

		/**
		 * Returns the exception informations as a string.
		 */
		const def toString(const self) {
			const byteSequenceToString = def (stream) {
				var str = ''
				for byte in stream.getUInt8(10) {
					str << '0x%02x ' % number(byte)
				}
				if stream.size() > 10 {
					str << '...'
				}
				return str
			}
			return 'invalid byte sequence : %s' % byteSequenceToString(self.stream)
		}
		
		/// Internal byte sequence.
		- final stream = null
	}
	
	/**
	 * Create a new instance of the codec. The `encoding` parameter must be a
	 * valid encoding name supported by [iconv]().
	 */
	const def new(self, encoding) {
		if isDefined(self.d_ptr = Codec.Iconv.g_lib.call('mint_iconv_open', encoding)) {
			self.d_ptr.delete = def [g_lib = Codec.Iconv.g_lib] (self) {
				g_lib.call('mint_iconv_close', self)
			}
			return self
		}
	}
	
	/**
	 * Returns one character decoded from the source encoding to UTF-8. The
	 * `readCallback` parameter must be a function that provide the next byte
	 * of the source. If the byte sequence can not be decoded with the source
	 * encoding, an instance of {@see InvalidByteSequence} is raised.
	 */
	const def decodeChar(self, readCallback) {
		var buffer = ''
		var stream = Serializer.DataStream()
		while byte = readCallback() {
			stream.write(byte)
			switch Codec.Iconv.g_lib.call('mint_iconv_decode', self.d_ptr, buffer, stream.to_std_vector_uint8_t()) {
			case Codec.Iconv.State.Success:
				return buffer
			case Codec.Iconv.State.Invalid:
				raise Codec.Iconv.InvalidByteSequence(stream)
			case Codec.Iconv.State.NeedMore:
				break
			}
		}
		if not stream.isEmpty() {
			raise Codec.Iconv.InvalidByteSequence(stream)
		}
	}
	
	/**
	 * Returns one word decoded from the source encoding to UTF-8. The
	 * `readCallback` parameter must be a function that provide the next byte
	 * of the source. If the byte sequence can not be decoded with the source
	 * encoding, an instance of {@see InvalidByteSequence} is raised.
	 */
	const def decodeWord(self, readCallback) {
		var c = self.decodeChar(readCallback)
		while defined c and c =~ /\s/ {
			c = self.decodeChar(readCallback)
		}
		if defined c {
			var buffer = ''
			while defined c and c !~ /\s/ {
				buffer << c
				c = self.decodeChar(readCallback)
			}
			return buffer
		}
	}
	
	/**
	 * Returns one line decoded from the source encoding to UTF-8. The
	 * `readCallback` parameter must be a function that provide the next byte
	 * of the source. If the byte sequence can not be decoded with the source
	 * encoding, an instance of {@see InvalidByteSequence} is raised.
	 */
	const def decodeLine(self, readCallback) {
		if isDefined(var c = self.decodeChar(readCallback)) {
			var buffer = ''
			while defined c and c != '\n' {
				buffer << c
				c = self.decodeChar(readCallback)
			}
			return buffer
		}
	}
	
	/**
	 * Returns each line decoded from the source encoding to UTF-8. The
	 * `readCallback` parameter must be function that provide the next byte
	 * of the source. If the byte sequence can not be decoded with the source
	 * encoding, an instance of {@see InvalidByteSequence} is raised.
	 */
	const def decodeLines(self, readCallback) {
		while let buffer = self.decodeLine(readCallback) {
			yield buffer
		}
	}
	
	/**
	 * Returns whole content decoded from the source encoding to UTF-8. The
	 * `stream` parameter must be an instance of {Serializer.DataStream}
	 * containing the source. If the byte sequence can not be decoded with the
	 * source encoding, an instance of {@see InvalidByteSequence} is raised.
	 */
	const def decode(self, stream) {
		var buffer = ''
		switch Codec.Iconv.g_lib.call('mint_iconv_decode', self.d_ptr, buffer, stream.to_std_vector_uint8_t()) {
		case Codec.Iconv.State.Success:
			return buffer
		case Codec.Iconv.State.Invalid:
		case Codec.Iconv.State.NeedMore:
			raise Codec.Iconv.InvalidByteSequence(stream)
		}
	}
	
	/**
	 * Returns an instance of {Serializer.DataStream} containing the `buffer`
	 * encoded to the source encoding. If the buffer can not be encoded to the
	 * target encoding, an instance of {@see InvalidByteSequence} is raised.
	 */
	const def encode(self, buffer) {
		var stream = Serializer.DataStream()
		switch Codec.Iconv.g_lib.call('mint_iconv_encode', self.d_ptr, buffer, stream.to_std_vector_uint8_t()) {
		case Codec.Iconv.State.Success:
			return stream
		case Codec.Iconv.State.Invalid:
		case Codec.Iconv.State.NeedMore:
			raise Codec.Iconv.InvalidByteSequence(stream)
		}
	}
	
	/// Global library handle.
	- @g_lib = lib('libmint-codec')

	/// Object data.
	- final d_ptr = null
}

}
