/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides tools to handle data mime type and encoding. It provides
 * the {Codec.MimeTypes} class which manage mime types.
 */

load mint.type

package Codec {
	/**
	 * This class manage the mime types database. It allow to find a mime type
	 * and retrieve informations about it.
	 */
	class MimeTypes {
		/**
		 * Returns the mime type of the given `data`. If the `data` provides a
		 * `read` method, the result of this method is used instead. The mime
		 * type contains the type of the data and the encoding if any.
		 */
		@const def fromData(data) {
			if defined data.read {
				data = data.read()
			}
			switch typeof data {
			case 'Serializer.DataStream':
				return Codec.MimeTypes.g_lib.call('mint_mime_type_from_buffer', data.to_std_vector_uint8_t())
			default:
				return Codec.MimeTypes.g_lib.call('mint_mime_type_from_string', data.toString())
			}
		}

		/// Global library handle.
		- @g_lib = lib('libmint-codec')
	}
}
