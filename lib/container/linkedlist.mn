/**
 * This module provides the {LinkedList} class which store objects with a
 * constant insertion or removal time.
 */

load mint.type
load mint.garbagecollector
load exception.container

/**
 * This class creates a linked list which stores a liste of values and provides
 * an iterator-based access as well as constant time insertions and removals.
 * 
 * For most purposes, {List} is the is the right class to use. If you need a real
 * linked list, with guarantees of constant time insertions in the middle of the
 * list and iterators to items rather than indexes, use {LinkedList}.
 */
class LinkedList {
	/**
	 * This class store the context of a node of a {LinkedList}. It can be
	 * retrieved with {LinkedList.firstNode} or {LinkedList.lastNode}.
	 */
	class Node {
		/**
		 * Creates a new node storing `value` into the `list` context.
		 */
		const def new(self, list, value) {
			self.list = list
			self.value = value
			return self
		}

		/**
		 * Returns the value of the node.
		 */
		const def getValue(const self) {
			return self.value
		}

		/**
		 * Returns the previous node. If `self` is the first node, `none` is
		 * returned.
		 */
		const def getPrevious(const self) {
			if self.prev {
				return self.prev
			}
		}

		/**
		 * Returns the next node. If `self` is the last node, `none` is
		 * returned.
		 */
		const def getNext(const self) {
			if self.next {
				return self.next
			}
		}

		/**
		 * Inserts a previous node.
		 */
		const def insertPrevious(self, node) {
			if node.prev or node.next {
				node.remove()
			}
			node.list = self.list
			if self is self.list.front {
				self.list.front = node
				self.prev = node
				node.next = self
			} else {
				self.prev.next = node
				node.prev = self.prev
				self.prev = node
				node.next = self
			}
		}

		/**
		 * Inserts a next node.
		 */
		const def insertNext(self, node) {
			if node.prev or node.next {
				node.remove()
			}
			node.list = self.list
			if self is self.list.back {
				self.list.back = node
				self.next = node
				node.prev = self
			} else {
				self.next.prev = node
				node.next = self.next
				self.next = node
				node.prev = self
			}
		}

		/**
		 * Replaces the node.
		 */
		const def replace(self, node) {
			if node.prev or node.next {
				node.remove()
			}
			node.list = self.list
			if self is self.list.front {
				self.list.front = node
				self.next.prev = node
			} elif self is self.list.back {
				self.list.back = node
				self.prev.next = node
			} else {
				self.prev.next = node
				self.next.prev = node
			}
			node.prev = self.prev
			node.next = self.next
		}

		/**
		 * Removes the node.
		 */
		const def remove(self) {
			if self is self.list.front {
				self.list.front = self.next
				self.next.prev = null
			} elif self is self.list.back {
				self.list.back = self.prev
				self.prev.next = null
			} else {
				self.prev.next = self.next
				self.next.prev = self.prev
			}
		}

		/// Node value
		- value = none

		/// List element data
		- list = null

		/// Previous node in the list
		- prev = null

		/// Next node in the list
		- next = null
	}

	/**
	 * Creates a new instance of {LinkedList}. If `values` is given, the list will
	 * be initialized with the given values.
	 */
	const def new(self, values = []) {
		self.root = LinkedList.Data()
		for value in values {
			self.append(value)
		}
		return self
	}

	/**
	 * Cleans up the list instance.
	 */
	const def delete(self) {
		GarbageCollector.collect()
	}

	/**
	 * Returns the first element of the list. If the list is empty, `none` is
	 * returned.
	 */
	const def first(const self) {
		if self.root.front {
			return self.root.front.getValue()
		}
	}

	/**
	 * Returns the last element of the list. If the list is empty, `none` is
	 * returned.
	 */
	const def last(const self) {
		if self.root.back {
			return self.root.back.getValue()
		}
	}

	/**
	 * Returns the first node of the list. If the list is empty, `none` is
	 * returned.
	 */
	const def firstNode(const self) {
		if self.root.front {
			return self.root.front
		}
	}

	/**
	 * Returns the last node of the list. If the list is empty, `none` is
	 * returned.
	 */
	const def lastNode(const self) {
		if self.root.back {
			return self.root.back
		}
	}

	/**
	 * Returns an `array` containing each elements of the list.
	 */
	const def data(const self) {
		var content = []
		for (node = self.firstNode(), node = node.getNext(), defined node) {
			content << node.getValue()
		}
		return content
	}

	/**
	 * Returns an `iterator` on the elements of the list.
	 */
	const def in(const self) {
		for (node = self.firstNode(), node = node.getNext(), defined node) {
			yield node.getValue()
		}
	}

	/**
	 * Returns `true` if the list contains `value`; otherwise returns `false`.
	 */
	const def in(const self, const value) {
		for (node = self.firstNode(), node = node.getNext(), defined node) {
			if value == node.getValue() {
				return true
			}
		}
		return false
	}

	/**
	 * Apply the `func` function to each elements of the list.
	 */
	const def each(const self, func) {
		for (node = self.firstNode(), node = node.getNext(), defined node) {
			func(node.getValue())
		}
	}

	/**
	 * Converts the list to an `array`.
	 */
	const def toArray(const self) {
		return self.data()
	}

	/**
	 * Returns `true` if the list contains `value`; otherwise returns `false`.
	 */
	const def contains(const self, value) {
		for (node = self.firstNode(), node = node.getNext(), defined node) {
			if value == node.getValue() {
				return true
			}
		}
		return false
	}

	/**
	 * Returns the number of occurrences of `value` in the list.
	 */
	const def count(const self, value) {
		var found = 0
		for (node = self.firstNode(), node = node.getNext(), defined node) {
			if value == node.getValue() {
				found++
			}
		}
		return found
	}

	/**
	 * Returns the number of elements in the list.
	 */
	const def size(const self) {
		var found = 0
		for (node = self.firstNode(), node = node.getNext(), defined node) {
			found++
		}
		return found
	}

	/**
	 * Returns `true` if the list is empty; otherwise returns `false`.
	 */
	const def isEmpty(const self) {
		return self.root.front is null
	}

	/**
	 * Returns the node of the first occurrence of `value` in the list,
	 * searching forward from node `from` if given or from the list beginning.
	 * Returns `none` if no element matched.
	 */
	const def nodeOf(const self, value, from = none) {
		if not defined from {
			from = self.firstNode()
		}
		for (node = from, node = node.getNext(), defined node) {
			if value == node.getValue() {
				return node
			}
		}
	}

	/**
	 * Replaces the `node` with a new node storing the given `value`.
	 */
	const def replace(self, node, value) {
		node.replace(LinkedList.Node(self.root, value))
	}

	/**
	 * Inserts a new node storing the given `value` before the given `node`.
	 */
	const def insertBefore(self, node, value) {
		node.insertPrevious(LinkedList.Node(self.root, value))
	}

	/**
	 * Inserts a new node storing the given `value` after the given `node`.
	 */
	const def insertAfter(self, node, value) {
		node.insertNext(LinkedList.Node(self.root, value))
	}

	/**
	 * Inserts `value` at the end of the list.
	 */
	const def append(self, value) {
		if self.root.back is null {
			self.root.front = self.root.back = LinkedList.Node(self.root, value)
		} else {
			self.root.back.insertNext(LinkedList.Node(self.root, value))
		}
	}

	/**
	 * Inserts `value` at the beginning of the list.
	 */
	const def prepend(self, value) {
		if self.root.front is null {
			self.root.front = self.root.back = LinkedList.Node(self.root, value)
		} else {
			self.root.front.insertPrevious(LinkedList.Node(self.root, value))
		}
	}

	/**
	 * Moves the `from` node before the `to` node.
	 */
	const def moveBefore(self, from, to) {
		to.insertPrevious(from)
	}

	/**
	 * Moves the `from` node after the `to` node.
	 */
	const def moveAfter(self, from, to) {
		to.insertNext(from)
	}

	/**
	 * Removes the first occurence of `value` in the list.
	 */
	const def removeOne(self, value) {
		if node = self.nodeOf(value) {
			node.remove()
			return true
		}
		return false
	}

	/**
	 * Removes all the occurences of `value` in the list.
	 */
	const def removeAll(self, value) {
		if node = self.nodeOf(value) {
			next = node.getNext()
			node.remove()
			while (node = self.nodeOf(value, next), node = self.nodeOf(value, next), defined node) {
				next = node.getNext()
				node.remove()
			}
			return true
		}
		return false
	}

	/**
	 * Removes the first element of the list.
	 */
	const def removeFirst(self) {
		if self.isEmpty() {
			raise NoItem(self, self.removeFirst)
		}
		if self.root.front is self.root.back {
			self.root.front = self.root.back = null
		} else {
			self.root.front.remove()
		}
	}

	/**
	 * Removes the last element of the list.
	 */
	const def removeLast(self) {
		if self.isEmpty() {
			raise NoItem(self, self.removeLast)
		}
		if self.root.front is self.root.back {
			self.root.front = self.root.back = null
		} else {
			self.root.back.remove()
		}
	}

	/**
	 * Removes the `node` element of the list and returns the next node.
	 */
	const def remove(self, node) {
		var next = node.getNext()
		node.remove()
		return next
	}

	/**
	 * Removes all the elements of the list.
	 */
	const def clear(self) {
		self.root.front = self.root.back = null
	}

	/// Internal root element data structure.
	- class Data {
		/// First element of the list.
		front = null
		/// Last element of the list.
		back = null
	}

	/// Root element data.
	- root = null
}
