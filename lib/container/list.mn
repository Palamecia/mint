/**
 * @license
 * Copyright (c) 2025 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {Container.List} class which store objects sequentially
 * in memory.
 */

load mint.type
load exception.container

package Container {

/**
 * This class creates a list which stores a liste of values and provides an
 * indexes based access and always stores its items sequentially in memory.
 */
class List {
	/**
	 * Creates a new instance of {Container.List}. If `values` is given, the
	 * list will be initialized with the given values.
	 */
	const def new(self, values = []) {
		for var item in array(values) {
			self.values << item
		}
		return self
	}

	/**
	 * Returns `true` if `other` is equal to this list; otherwise returns `false`.
	 * 
	 * Two lists are considered equal if they contain the same values in the same
	 * order.
	 * 
	 * This function requires the values to have an implementation of the `!=`
	 * operator.
	 */
	const def ==(const self, const other) {
		if self.size() == other.size() {
			for var i in 0...self.size() {
				if self[i] != other[i] {
					return false
				}
			}
			return true
		}
		return false
	}

	/**
	 * Returns `true` if `other` is not equal to this list; otherwise returns `false`.
	 * 
	 * Two lists are considered equal if they contain the same values in the same
	 * order.
	 * 
	 * This function requires the values to have an implementation of the `!=`
	 * operator.
	 */
	const def !=(const self, const other) {
		if self.size() == other.size() {
			for var i in 0...self.size() {
				if self[i] != other[i] {
					return true
				}
			}
			return false
		}
		return true
	}

	/**
	 * Returns a list which is the result of concatenating `self` and `value`.
	 */
	const def +(self, value) {
		var result = Container.List(self.values)
		for var item in array(value) {
			result << item
		}
		return result
	}

	/**
	 * Returns a list with each occurence of `value` removed.
	 */
	const def -(self, value) {
		var result = Container.List(self.values)
		for var item in array(value) {
			result.removeAll(item)
		}
		return result
	}

	/**
	 * Returns a list with each elements of this list repeated `value` times.
	 */
	const def *(self, value) {
		return Container.List(self.values * number(value))
	}

	/**
	 * Appends `value` to the list and returns `self`.
	 */
	const def <<(self, value) {
		self.values << value
		return self
	}

	/**
	 * Returns a list corresponding to the intersection `self` and `value`.
	 */
	const def &(self, value) {
		return Container.List(self.values & array(value))
	}

	/**
	 * Returns the elements at the specified `index` in the list. If `index` is
	 * negative, the position is relative to the end of the list.
	 * 
	 * The `index` parameter can either be a `number` or an `iterator`. This
	 * operator can then be used with a range to extract a sub-set of elements
	 * between two positions.
	 */
	const def [](const self, index) {
		if index >= self.size() or self.size() + index < 0 {
			raise Exception.OutOfRange(index, self)
		}
		return self.values[index]
	}

	/**
	 * Replace the elements at the specified `index` in the list with the
	 * elements of `value`. If `index` is negative, the position is relative
	 * to the end of the list.
	 * 
	 * The `index` parameter can either be a `number` or an `iterator`. This
	 * operator can then be used with a range to replace a sub-set of elements
	 * between two positions.
	 */
	const def []=(self, index, value) {
		if index >= self.size() or self.size() + index < 0 {
			raise Exception.OutOfRange(index, self)
		}
		return self.values[index] = value
	}

	/**
	 * Returns the first element of the list. If the list is empty, an instance
	 * of {Exception.NoItem} is raised.
	 */
	const def first(const self) {
		if self.isEmpty() {
			raise Exception.NoItem(self, self.first)
		}
		return self.values[0]
	}

	/**
	 * Returns the last element of the list. If the list is empty, an instance
	 * of {Exception.NoItem} is raised.
	 */
	const def last(const self) {
		if self.isEmpty() {
			raise Exception.NoItem(self, self.last)
		}
		return self.values[-1]
	}
	
	/**
	 * Returns an `array` containing each elements of the list.
	 */
	const def data(const self) {
		return self.values
	}

	/**
	 * Returns an `iterator` on the elements of the list.
	 */
	const def in(const self) {
		for var item in self.values {
			yield item
		}
	}

	/**
	 * Returns `true` if the list contains `value`; otherwise returns `false`.
	 */
	const def in(const self, const value) {
		for var item in self.values {
			if item == value {
				return true
			}
		}
		return false
	}

	/**
	 * Apply the `func` function to each elements of the list.
	 */
	const def each(const self, func) {
		for var item in self.values {
			func(item)
		}
	}

	/**
	 * Converts the list to an `array`.
	 */
	const def toArray(const self) {
		return self.values
	}

	/**
	 * Converts the list to an `hash`.
	 */
	const def toHash(const self) {
		return hash(self.values)
	}

	/**
	 * Returns `true` if the list contains `value`; otherwise returns `false`.
	 */
	const def contains(const self, value) {
		return self.values.contains(value)
	}

	/**
	 * Returns the number of occurrences of `value` in the list.
	 */
	const def count(const self, value) {
		var found = 0
		for var item in self.values {
			if item == value {
				found++
			}
		}
		return found
	}

	/**
	 * Returns the number of elements in the list.
	 */
	const def size(const self) {
		return self.values.size()
	}
	
	/**
	 * Returns `true` if the list is empty; otherwise returns `false`.
	 */
	const def isEmpty(const self) {
		return self.values.isEmpty()
	}

	/**
	 * Returns the index position of the first occurrence of `value` in the list,
	 * searching forward from index position `from`. Returns `none` if no element
	 * matched.
	 */
	const def indexOf(const self, value, from = 0) {
		return self.values.indexOf(value, from)
	}

	/**
	 * Returns the index position of the last occurrence of `value` in the list,
	 * searching backward from index position `from`. Returns `none` if no 
	 * element matched.
	 */
	const def lastIndexOf(const self, value, from = none) {
		return self.values.lastIndexOf(value, from)
	}

	/**
	 * Replace the elements at the specified `index` in the list with the
	 * elements of `value`. If `index` is negative, the position is relative
	 * to the end of the list. If `index` is not a valid index of the list (ie.
	 * `index` is not contained in the range 0...{@see size}), an instance of
	 * {Exception.OutOfRange} is raised.
	 */
	const def replace(self, index, value) {
		if index >= self.size() or self.size() + index < 0 {
			raise Exception.OutOfRange(index, self)
		}
		self.values[index] = value
	}

	/**
	 * Inserts `value` in the list at the specified `index`.  If `index` is
	 * negative, the position is relative to the end of the list. If `index` is
	 * not a valid index of the list (ie. `index` is not contained in the range
	 * 0...{@see size}), an instance of {Exception.OutOfRange} is raised.
	 */
	const def insert(self, index, value) {
		if index < 0 {
			index = self.values.size() + index
		}
		if 0 <= index and index <= self.values.size() {
			return self.values.insert(index, value)
		} else {
			raise Exception.OutOfRange(index, self)
		}
	}

	/**
	 * Inserts `value` at the end of the list.
	 */
	const def append(self, value) {
		self.values << value
	}

	/**
	 * Inserts `value` at the beginning of the list.
	 */
	const def prepend(self, value) {
		self.values := [value] + self.values
	}

	/**
	 * Moves the element at index position `from` to index position `to`.
	 */
	const def move(self, from, to) {
		if from >= self.size() or self.size() + from < 0 {
			raise Exception.OutOfRange(self, from)
		}
		if to >= self.size() or self.size() + to < 0 {
			raise Exception.OutOfRange(self, to)
		}
		var memory = self.values[from]
		self.values[from] = self.values[to]
		self.values[to] = memory
	}

	/**
	 * Removes the first occurence of `value` in the list.
	 */
	const def removeOne(self, value) {
		for var i in 0...self.values.size() {
			if self.values[i] == value {
				self.values.remove(i)
				return true
			}
		}
		return false
	}

	/**
	 * Removes all the occurences of `value` in the list.
	 */
	const def removeAll(self, value) {
		if self.removeOne(value) {
			while self.removeOne(value) {}
			return true
		}
		return false
	}

	/**
	 * Removes the element at the given `index` in the list.
	 */
	const def remove(self, index) {
		if index >= self.size() or self.size() + index < 0 {
			raise Exception.OutOfRange(index, self)
		}
		self.values.remove(index)
	}

	/**
	 * Removes all the elements of the list.
	 */
	const def clear(self) {
		self.clear()
	}

	/// Internal values representation.
	- final values = []
}

}
