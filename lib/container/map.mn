load mint.type
load exception.container
load container.redblacktree

class Map {
	def new(self) {
		self.root = RedBlackTree()
		return self
	}

	def new(self, values) {
		self.root = RedBlackTree()
		hash_values = hash(values)
		for key in hash_values {
			self.insert(key, hash_values[key])
		}
		return self
	}

	def [](self, key) {
		node = self.root.find(Map.Item(key))
		if defined node {
			return node.value
		}
		raise InvalidKey(key)
	}

	def []=(self, key, value) {
		self.set(key, value)
		return value
	}

	def in(self) {
		for key in self.data() {
			yield key
		}
	}

	def in(self, key) {
		node = self.root.find(Map.Item(key))
		return defined node
	}

	def data(self) {
		data = {}
		self.root.visit(def [data] (item) {
			data[item.key] = item.value
		})
		return data
	}

	def items(self) {
		items = []
		self.root.visit(def [items] (item) {
			items << (item.key, item.value)
		})
		return items
	}

	def keys(self) {
		keys = []
		self.root.visit(def [keys] (item) {
			keys << item.key
		})
		return keys
	}

	def values(self) {
		values = []
		self.root.visit(def [values] (item) {
			values << item.value
		})
		return values
	}

	def toArray(self) {
		return self.keys()
	}

	def toHash(self) {
		return self.data()
	}

	def insert(self, key, value) {
		self.root.insert(Map.Item(key, value))
	}

	def get(self, key, default_value = none) {
		node = self.root.find(Map.Item(key))
		if defined node {
			return node.value
		}
		return default_value
	}

	def set(self, key, value) {
		node = self.root.find(Map.Item(key))
		if defined node {
			node.value = value
		} else {
			self.root.insert(Map.Item(key, value))
		}
	}

	def remove(self, key) {
		return self.root.remove(Map.Item(key))
	}

	def clear(self) {
		self.root = RedBlackTree()
	}

	def size(self) {
		count = 0
		self.root.visit(def [count] (item) {
			count := count + 1
		})
		return count
	}

	def isEmpty(self) {
		return self.root.isEmpty()
	}

	- class Item {
		def new(self, key, value = none) {
			self.key = key
			self.value = value
			return self
		}

		def <(self, other) {
			return self.key < other.key
		}

		+ key = none
		+ value = none
	}

	- root = null
}
