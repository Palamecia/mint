/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {Container.Map} class which store objects and provides
 * fast lookup of the value associated with a key.
 */

load mint.lang
load mint.type
load exception.container
load container.redblacktree

package Container {

/**
 * This class create a dictionary based on {Container.RedBlackTree} which stores
 * a liste of values mapped to a key value.
 * 
 * When iterating over a {Container.Map}, the elements are always sorted by key.
 * A `comparator` function must be provided to the class instances to be used to
 * sort keys. The values used as key in the instances must provide the operator
 * used by the function.
 */
class Map {
	/**
	 * Creates a new instance of {Container.Map}. If `values` is given, the
	 * dictionary will be initialized with the given values. The `comparator`
	 * function can be overloaded to change the key sorting behaviour of the
	 * dictionary. By default, the same behaviour than the `hash` is used.
	 */
	const def new(self, values = {}, comparator = hashKeyCompareOperator) {
		self.root = Container.RedBlackTree(Container.Map.Node.Comparator(comparator))
		for var key, var value in hash(values) {
			self.insert(key, value)
		}
		return self
	}

	/**
	 * Returns `true` if `other` is equal to this dictionary; otherwise returns
	 * `false`.
	 * 
	 * Two dictionaries are considered equal if they contain the same keys
	 * associated to the same value.
	 * 
	 * This function requires the values to have an implementation of the `!=`
	 * operator. The keys are compared using the `comparator` function.
	 */
	const def ==(const self, const other) {
		if self.size() == other.size() {
			for var key, var value in self {
				if key not in other {
					return false
				}
				if value != other[key] {
					return false
				}
			}
			return true
		}
		return false
	}

	/**
	 * Returns `true` if `other` is not equal to this dictionary; otherwise
	 * returns `false`.
	 * 
	 * Two dictionaries are considered equal if they contain the same keys
	 * associated to the same value.
	 * 
	 * This function requires the values to have an implementation of the `!=`
	 * operator. The keys are compared using the `comparator` function.
	 */
	const def !=(const self, const other) {
		if self.size() == other.size() {
			for var key, var value in self {
				if key not in other {
					return true
				}
				if value != other[key] {
					return true
				}
			}
			return false
		}
		return true
	}

	/**
	 * Returns a dictionary which is the result of concatenating `self` and
	 * `value`. The created dictionary use the `comparator` function of `self`.
	 * If a key is contained in both `self` and `value`, the element of `self`
	 * is used.
	 */
	const def +(self, value) {
		var result = Container.Map(self.data(), self.root.getComparator().getComparator())
		for var key, var value in hash(value) {
			result.insert(key, value)
		}
		return result
	}

	/**
	 * Returns the value associated to the specified `key` in the dictionary.
	 * 
	 * If `key` is not contained in the dictionary, an instance of
	 * {Exception.InvalidKey} is raised.
	 */
	const def [](const self, key) {
		var node = self.root.find(Container.Map.Node(key))
		if defined node {
			return node.value
		}
		raise Exception.InvalidKey(key, self)
	}

	/**
	 * Replaces the value of the element associated to the specified `key` in
	 * the dictionary with the value provided by `value`.
	 * 
	 * If `key` is not contained in the dictionary, a new entry is created with
	 * the givens `key` and `value`.
	 */
	const def []=(self, key, value) {
		self.set(key, value)
		return value
	}

	/**
	 * Returns an `iterator` on each element of the dictionary. The elements are
	 * provided by an `iterator` with the key as first element and the value as
	 * second element.
	 */
	const def in(const self) {
		for var item in self.data() {
			yield item
		}
	}

	/**
	 * Returns `true` if the dictionary contains the `key` key element; otherwise
	 * returns `false`.
	 */
	const def in(const self, const key) {
		var node = self.root.find(Container.Map.Node(key))
		return defined node
	}

	/**
	 * Apply the `func` function to each elements of the dictionary.
	 * 
	 * If `func` can take two parameters, the key is passed as first parameter
	 * and the value as second parameter; otherwise the key and value of the
	 * element are passed using an `iterator`.
	 */
	const def each(const self, func) {

		var unpackFunc = func[2]

		if defined unpackFunc {
			self.root.each(def [unpackFunc] (item) {
				unpackFunc(item.key, item.value)
			})
		} else {
			self.root.each(def [func] (item) {
				func((item.key, item.value))
			})
		}
	}

	/**
	 * Returns an `hash` containing each elements of the dictionary.
	 */
	const def data(const self) {
		var data = {}
		self.root.each(def [data] (item) {
			data[item.key] = item.value
		})
		return data
	}

	/**
	 * Returns an `array` containing each elements of the dictionary. The
	 * elements are represented by an `iterator` on the key and the value.
	 */
	const def items(const self) {
		var items = []
		self.root.each(def [items] (item) {
			items << (item.key, item.value)
		})
		return items
	}

	/**
	 * Returns an `array` containing each keys of the dictionary.
	 */
	const def keys(const self) {
		var keys = []
		self.root.each(def [keys] (item) {
			keys << item.key
		})
		return keys
	}

	/**
	 * Returns an `array` containing each values of the dictionary.
	 */
	const def values(const self) {
		var values = []
		self.root.each(def [values] (item) {
			values << item.value
		})
		return values
	}

	/**
	 * Converts the dictionary to an `array`.
	 * 
	 * Same as {@see keys}.
	 */
	const def toArray(const self) {
		return self.keys()
	}

	/**
	 * Converts the dictionary to an `hash`.
	 * 
	 * Same as {@see data}.
	 */
	const def toHash(const self) {
		return self.data()
	}

	/**
	 * Inserts `value` in the dictionary associated with the specified `key`.
	 * If `key` is already contained in the dictionary, this method has no
	 * effect.
	 */
	const def insert(self, key, value) {
		self.root.insert(Container.Map.Node(key, value))
	}

	/**
	 * Returns the value associated to the specified `key` in the dictionary.
	 * 
	 * If `key` is not contained in the dictionary, the value of `defaultValue`
	 * is returned instead.
	 */
	const def get(const self, key, defaultValue = none) {
		if isDefined(var node = self.root.find(Container.Map.Node(key))) {
			return node.value
		}
		return defaultValue
	}

	/**
	 * Replaces the value of the element associated to the specified `key` in
	 * the dictionary with the value provided by `value`.
	 * 
	 * If `key` is not contained in the dictionary, a new entry is created with
	 * the givens `key` and `value`.
	 */
	const def set(self, key, value) {
		if isDefined(var node = self.root.find(Container.Map.Node(key))) {
			node.value = value
		} else {
			self.root.insert(Container.Map.Node(key, value))
		}
	}

	/**
	 * Removes the element associated to the specified `key` in the dictionary.
	 * 
	 * If `key` is not contained in the dictionary, `false` is returned; otherwise
	 * `true` is returned.
	 */
	const def remove(self, key) {
		return self.root.remove(Container.Map.Node(key))
	}

	/**
	 * Removes all the elements of the dictionary.
	 */
	const def clear(self) {
		self.root = Container.RedBlackTree()
	}

	/**
	 * Returns `true` if the dictionary contains the `key` key element; otherwise
	 * returns `false`.
	 */
	const def contains(const self, key) {
		return isDefined(self.root.find(Container.Map.Node(key)))
	}

	/**
	 * Returns the number of occurrences of the value `value` in the dictionary.
	 */
	const def count(const self, value) {
		var found = 0
		self.root.each(def [found, value] (item) {
			 if item.value == value {
			 	++found
			 }
		})
		return found
	}

	/**
	 * Returns the number of elements in the dictionary.
	 */
	const def size(const self) {
		var count = 0
		self.root.each(def [count] (item) {
			++count
		})
		return count
	}

	/**
	 * Returns `true` if the dictionary is empty; otherwise returns `false`.
	 */
	const def isEmpty(const self) {
		return self.root.isEmpty()
	}

	/// Internal node structure.
	- class Node {
		/// Internal node comparison strategy.
		class Comparator {
			/// Creates a new comparator using the given `comparator` function.
			const def new(self, comparator) {
				self.comparator = comparator
				return self
			}

			/// Returns `true` if `left` is before `right`; otherwise returns `false`.
			const def ()(self, left, right) {
				return (self.comparator)(left.key, right.key)
			}

			/// Returns the comparison function used by the strategy.
			const def getComparator(const self) {
				return self.comparator
			}

			/// Comparison function.
			- final comparator = null
		}

		/// Creates a new node with the givens `key` and `value`.
		const def new(self, key, value = none) {
			self.key = key
			self.value = value
			return self
		}

		/// Node key value.
		+ final key = none

		/// Node mapped value.
		+ final value = none
	}

	/// Root element node.
	- final root = null
}

}
