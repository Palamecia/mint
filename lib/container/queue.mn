/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {Queue} class which store objects and retrives them
 * with the first in first out logic.
 */

load container.linkedlist

/**
 * This class create a queue based on a {LinkedList} which stores a set of
 * values.
 * 
 * A queue is a first in, first out (FIFO) structure. Elements are added to the
 * tail of the queue using {@see push} and retrieved from the head using
 * {@see pop}. The {@see top} function provides access to the head element
 * without removing it.
 */
class Queue {
	/**
	 * Creates a new instance of {Queue}. The created queue is empty.
	 */
	const def new(self) {
		self.values = LinkedList()
		return self
	}

	/**
	 * Adds `value` to the tail of the queue.
	 */
	const def push(self, value) {
		self.values.append(value)
	}

	/**
	 * Removes the head element in the queue and returns it. This function
	 * assumes that the queue isn't empty.
	 */
	const def pop(self) {
		var value = self.values.first()
		self.values.removeFirst()
		return value
	}

	/**
	 * Returns the queue's head element. This function assumes that the queue
	 * isn't empty.
	 */
	const def top(const self) {
		return self.values.first()
	}

	/**
	 * Returns `true` if the queue is empty; otherwise returns `false`.
	 */
	const def isEmpty(const self) {
		return self.values.isEmpty()
	}

	/// Internal values representation.
	- values = null
}
