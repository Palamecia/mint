/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {Event.Event} class which provides a basic event
 * implementation.
 */

load mint.type

package Event {
	/**
	 * This class provides a basic event implementation that can only be setted
	 * or reseted.
	 * 
	 * > This type is not copyable
	 */
	class Event {
		/**
		 * Creates a new event. The created event is not setted.
		 * 
		 * If no event can be created, `none` is returned.
		 */
		const def new(self) {
		    self.eventHandle = Event.Event.g_lib.call('mint_event_create')
		    if defined self.eventHandle {
		    	return self
		    }
		}

		/**
		 * Cleans up the event instance.
		 */
		const def delete(self) {
			if defined self.eventHandle {
				Event.Event.g_lib.call('mint_event_close', self.eventHandle)
			}
		}

		/**
		 * Disable object copy.
		 */
		- clone

		/**
		 * Returns `true` if the event is set; otherwise returns `false`.
		 */
		const def isSet(const self) {
			return Event.Event.g_lib.call('mint_event_is_set', self.eventHandle)
		}

		/**
		 * Sets the event.
		 */
		const def set(self) {
			return Event.Event.g_lib.call('mint_event_set', self.eventHandle)
		}

		/**
		 * Resets the event.
		 */
		const def clear(self) {
			Event.Event.g_lib.call('mint_event_clear', self.eventHandle)
		}

		/**
		 * Waits until the event is set. If `timeout` is given, the wait stop after
		 * `timeout` milliseconds if the event is still not set.
		 * 
		 * Returns `true` if the event is set; otherwise returns `false` if the
		 * wait timed out.
		 * 
		 * After a call to this method, the event is reseted.
		 */
		const def wait(self, timeout = none) {
			return Event.Event.g_lib.call('mint_event_wait', self.eventHandle, timeout)
		}

		/**
		 * Returns the handle used by {Event.Watcher}.
		 */
		const def getHandle(const self) {
			return self.eventHandle
		}

		/**
		 * Reset the internal event state
		 */
		const def reset(self) {
			self.clear()
		}

		/// Global library handle.
		- @g_lib = lib('libmint-event')

		/// Internal handle.
		- eventHandle = none
	}
}
