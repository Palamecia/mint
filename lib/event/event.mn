/**
 * This module provides the {Event.Event} class which provides a basic event
 * implementation.
 */

load mint.type

package Event {
	/**
	 * This class provides a basic event implementation that can only be setted
	 * or reseted.
	 * 
	 * > This type is not copyable
	 */
	class Event {
		/**
		 * Creates a new event. The created event is not setted.
		 * 
		 * If no event can be created, `none` is returned.
		 */
		const def new(self) {
		    self.event_handle = Event.g_lib.call('mint_event_create')
		    if defined self.event_handle {
		    	return self
		    }
		}

		/**
		 * Cleans up the event instance.
		 */
		const def delete(self) {
			if defined self.event_handle {
				Event.g_lib.call('mint_event_close', self.event_handle)
			}
		}

		/**
		 * Returns `true` if the event is set; otherwise returns `false`.
		 */
		const def isSet(const self) {
			return Event.g_lib.call('mint_event_is_set', self.event_handle)
		}

		/**
		 * Sets the event.
		 */
		const def set(self) {
			return Event.g_lib.call('mint_event_set', self.event_handle)
		}

		/**
		 * Resets the event.
		 */
		const def clear(self) {
			Event.g_lib.call('mint_event_clear', self.event_handle)
		}

		/**
		 * Waits until the event is set. If `timeout` is given, the wait stop after
		 * `timeout` milliseconds if the event is still not set.
		 * 
		 * Returns `true` if the event is set; otherwise returns `false` if the
		 * wait timed out.
		 * 
		 * After a call to this method, the event is reseted.
		 */
		const def wait(self, timeout = none) {
			return Event.g_lib.call('mint_event_wait', self.event_handle, timeout)
		}

		/**
		 * Returns the handle used by {Event.Watcher}.
		 */
		const def getHandle(const self) {
			return self.event_handle
		}

		/**
		 * Reset the internal event state
		 */
		const def reset(self) {
			self.clear()
		}

		/// Global library handle.
		- @g_lib = lib('libmint-event')

		/// Internal handle.
		- event_handle = none
	}
}

Event.Event.disableCopy()
