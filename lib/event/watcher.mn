/**
 * This module provides the {Event.Watcher} class which is the main class of the
 * {Event} package.
 */

load container.set

package Event {
	/**
	 * This class is the main class of the {Event} package. It provides
	 * mechanismes to schedule multiple events.
	 * 
	 * An instance of {Event.Watcher} schedule a set of events. Severals
	 * instances of the class can be created to manage distinct sets.
	 * 
	 * The scheduled event objects must provide a `getHandle` method that return
	 * an instance of handle created by the C++ function `mint::create_handle`.
	 */
	class Watcher {
		/**
		 * Creates a new watcher. The created watcher is empty.
		 */
		const def new(self) {
			self.events = Set()
			return self
		}

		/**
		 * Adds an `event` to the watcher. The `event` object must provides the
		 * `getHandle` method.
		 */
		const def watch(self, event) {
			self.events.insert(event)
		}

		/**
		 * Removes the `event` from the watcher. Returns `true` if `event` is
		 * watched by the watcher; otherwise returns `false`.
		 */
		const def remove(self, event) {
			return self.events.remove(event)
		}

		/**
		 * Waits until at least one of the watched events is set. If `timeout`
		 * is given, the wait stop after `timeout` milliseconds if no event is
		 * set.
		 * 
		 * Returns an `iterator` on each setted events. If no event is set, the
		 * iterator has no element.
		 * 
		 * After a call to this method, the events must be manually reseted.
		 * The `reset` method of the event can be called to ignore the event.
		 */
		const def poll(self, timeout = none) {
			
			var fdset = []
			
			for var event in self.events {
				fdset << Watcher.PollDescriptor(event)
			}

			Watcher.g_lib.call('mint_watcher_poll', fdset, timeout)

			for var fd in fdset {
				if fd.activated {
					yield fd.event
				}
			}
		}

		/// Internal poll context structure.
		- class PollDescriptor {
			/// Creates a new context for the given `event` object.
			const def new(self, event) {
				self.event = event
				self.handle = event.getHandle()
				return self
			}

			/// Event object.
			event = none

			/// Event handle.
			handle = none

			/// Activation state.
			activated = false
		}

		/// Global library handle.
		- @g_lib = lib('libmint-event')

		/// Internal set of watched event objects.
		- events = null
	}
}
