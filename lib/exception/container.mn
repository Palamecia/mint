/**
 * This module provides classes to store exception contexts raised by the
 * {@module container} module.
 */

load exception.exception
load mint.function

/**
 * This class provides the context of an exception on access to an element out
 * of range. It provides the container and the index used.
 */
class OutOfRange : Exception {
	/**
	 * Creates a new context. The `index` parameter is the index used when the
	 * exception was raised. The `container` parameter is the container that
	 * raised the error.
	 */
	const def new(self, index, container = none) {
		self.index = index
		self.container = container
		return self
	}

	/**
	 * Prints the exception informations on the error output.
	 */
	const def show(self) {
		self.printError("index '%d' is out of range\n" % self.index)
	}

	/**
	 * Returns the index associated to the exception.
	 */
	const def getIndex(const self) {
		return self.index
	}

	/**
	 * Returns the container that raised the error or `none` if not specified.
	 */
	const def getContainer(const self) {
		return self.container
	}

	/// Internal index.
	- index = 0

	/// Internal container.
	- container = none
}

/**
 * This class provides the context of an exception on access to an element with
 * an invalid key. It provides the container and the key used.
 */
class InvalidKey : Exception {
	/**
	 * Creates a new context. The `key` parameter is the key used when the
	 * exception was raised. The `container` parameter is the container that
	 * raised the error.
	 */
	const def new(self, key, container = none) {
		self.key = key
		self.container = container
		return self
	}

	/**
	 * Prints the exception informations on the error output.
	 */
	const def show(self) {
		self.printError("key '%s' is not valid\n" % self.key)
	}

	/**
	 * Returns the key associated to the exception.
	 */
	const def getKey(const self) {
		return self.key
	}

	/**
	 * Returns the container that raised the error or `none` if not specified.
	 */
	const def getContainer(const self) {
		return self.container
	}

	/// Internal key.
	- key = none

	/// Internal container.
	- container = none
}

/**
 * This class provides the context of an exception on modification to an non
 * existing element. It provides the container used and the action performed.
 */
class NoItem : Exception {
	/**
	 * Creates a new context. The `method` parameter is the method used when the
	 * exception was raised. The `container` parameter is the container that
	 * raised the error.
	 */
	const def new(self, container, %method) {
		self.function = Callback(container, method)
		return self
	}

	/**
	 * Prints the exception informations on the error output.
	 */
	const def show(self) {
		self.printError("no item for %s\n" % self.function.toString())
	}

	/**
	 * Returns the container that raised the error.
	 */
	const def getContainer(const self) {
		return self.function.getObject()
	}

	/**
	 * Returns the method associated to the exception.
	 */
	const def getMethod(const self) {
		return self.function.getFunction()
	}

	/// Internal function infos.
	- function = none
}
