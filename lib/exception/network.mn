/**
 * @license
 * Copyright (c) 2025 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides classes to store exception contexts raised by the
 * {@module network} module.
 */

load exception.exception
load exception.system

package Exception {

/**
 * This class provides the context of an exception raised on attempt to perform
 * an invalide operation on a network device.
 */
class InvalidNetworkOperation : Exception.Exception {
	/**
	 * Creates a new context. The `message` parameter provides a description of
	 * the attempted operation. The `device` parameter is the object that raised
	 * the error.
	 */
	 const def new(self, message, device) {
		self.message = message
		self.device = device
		return null
	 }

	/**
	 * Returns the exception informations as a string.
	 */
	const def toString(const self) {
		return '%s, %s' % (typeof self.device, self.message)
	}

	/**
	 * Returns the device that raised the error.
	 */
	const def getDevice(const self) {
		return self.device
	}

	/**
	 * Returns the error description.
	 */
	const def getMessage(const self) {
		return self.message
	}

	/// Internal message
	- final message = ''

	/// Internal device object.
	- final device = null
}

/**
 * This class provides the context of an exception raised by a socket.
 */
class SocketError : Exception.Exception {
	/**
	 * Creates a new context. The `object` parameter is the object that raised
	 * the error. It must provides a `getSocket` method. The error is retrived
	 * from this socket.
	 */
	const def new(self, object) {
		var socket = object.getSocket()
		if defined socket {
			self.errno = Exception.SystemError.Errno.findEnumValue(Exception.SocketError.g_lib.call('mint_socket_get_error', socket))
		} else {
			self.errno = Exception.SystemError.Errno.EINVAL
		}
		self.object = object
		return self
	}

	/**
	 * Creates a new context. The `errno` parameter must be an instance of
	 * {Exception.SystemError.Errno} describing the error. The `object` parameter
	 * is the object that raised the error. It must provides a `getSocket` method.
	 */
	const def new(self, errno, object) {
		self.errno = Exception.SystemError.Errno.findEnumValue(errno)
		self.object = object
		return self
	}

	/**
	 * Returns the exception informations as a string.
	 */
	const def toString(const self) {
		if self.errno {
			return '%s (%s)' % (self.getDescription(), Exception.SystemError.Errno.findEnumName(self.errno))
		}
		return self.getDescription()
	}

	/**
	 * Returns the error identifier.
	 */
	const def getErrno(const self) {
		return self.errno
	}

	/**
	 * Returns the object that raised the error or `none` if not specified.
	 */
	const def getObject(const self) {
		return self.object
	}

	/**
	 * Returns the object that raised the error or `none` if not specified.
	 */
	const def getSocket(const self) {
		return self.object.getSocket()
	}

	/**
	 * Returns the error description.
	 */
	const def getDescription(const self) {
		return Exception.SocketError.g_lib.call('mint_socket_strerror', self.errno or 0)
	}

	/// Global library handle.
	- @g_lib = lib('libmint-network')

	/// Internal error identifier.
	- final %errno = none

	/// Internal involved object.
	- final object = none
}

}
