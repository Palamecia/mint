@const E = 2.71828182845904523536028747135266249775724709369995957496696763
@const π = 3.14159265358979323846264338327950288419716939937510582097494459
@const φ = 1.61803398874989484820458683436563811772030917980576286213544862

@const Sqrt2 = 1.41421356237309504880168872420969807856967187537694807317667974
@const SqrtE = 1.64872127070012814684865078781416357165377610071014801157507931
@const Sqrtπ = 1.77245385090551602729816748334114518279754945612238712821380779
@const Sqrtφ = 1.27201964951406896425242246173749149171560804184009624861664038

@const Ln2 = 0.693147180559945309417232121458176568075500134360255254120680009
@const Log2E = 1 / Ln2
@const Ln10 = 2.30258509299404568401799145468436420760110148862877297603332790
@const Log10E = 1 / Ln10

/**
 * Compute the cosine of `x`.
 */
def cos(x) {
	return g_math_lib.call('mint_math_cos', x)
}

/**
 * Compute the sine of `x`.
 */
def sin(x) {
	return g_math_lib.call('mint_math_sin', x)
}

/**
 * Compute the sine and cosine of `x`.
 */
def sin_cos(x) {
	return g_math_lib.call('mint_math_sin_cos', x)
}

/**
 * Compute the tangent of `x`.
 */
def tan(x) {
	return g_math_lib.call('mint_math_tan', x)
}

/**
 * Compute the arc cosine of `x`.
 */
def acos(x) {
	return g_math_lib.call('mint_math_acos', x)
}

/**
 * Compute the arc sine of `x`.
 */
def asin(x) {
	return g_math_lib.call('mint_math_asin', x)
}

/**
 * Compute the arc tangent of `x`.
 */
def atan(x) {
	return g_math_lib.call('mint_math_atan', x)
}

/**
 * Compute the arc tangent with two parameters `x` and `y`.
 */
def atan2(y, x) {
	return g_math_lib.call('mint_math_atan', x, y)
}

/**
 * Compute the hyperbolic cosine of `x`.
 */
def cosh(x) {
	return g_math_lib.call('mint_math_cosh', x)
}
/**
 * Compute the hyperbolic sine of `x`.
 */
def sinh(x) {
	return g_math_lib.call('mint_math_sinh', x)
}

/**
 * Compute the hyperbolic tangent of `x`.
 */
def tanh(x) {
	return g_math_lib.call('mint_math_tanh', x)
}

/**
 * Compute the area hyperbolic cosine of `x`.
 */
def acosh(x) {
	return g_math_lib.call('mint_math_acosh', x)
}

/**
 * Compute the area hyperbolic sine of `x`.
 */
def asinh(x) {
	return g_math_lib.call('mint_math_asinh', x)
}

/**
 * Compute the area hyperbolic tangent of `x`.
 */
def atanh(x) {
	return g_math_lib.call('mint_math_atanh', x)
}

/**
 * Compute the exponential function of `x`.
 */
def exp(x) {
	return g_math_lib.call('mint_math_exp', x)
}

/**
 * Get the significand and exponent of `x`.
 */
def frexp(x) {
	return g_math_lib.call('mint_math_frexp', x)
}

/**
 * Generate the value from significand `x` and exponent `exp`.
 */
def ldexp(x, exp) {
	return g_math_lib.call('mint_math_ldexp', x, exp)
}

/**
 * Compute the natural logarithm of `x`.
 */
def log(x) {
	return g_math_lib.call('mint_math_log', x)
}

/**
 * Compute the common logarithm of `x`.
 */
def log10(x) {
	return g_math_lib.call('mint_math_log10', x)
}

/**
 * Break `x` into fractional and integral parts.
 */
def modf(x) {
	return g_math_lib.call('mint_math_modf', x)
}

/**
 * Compute binary exponential function of `x`.
 */
def exp2(x) {
	return g_math_lib.call('mint_math_exp2', x)
}

/**
 * Compute exponential minus one of `x`.
 */
def expm1(x) {
	return g_math_lib.call('mint_math_expm1', x)
}

/**
 * Integer binary logarithm of `x`.
 */
def ilogb(x) {
	return g_math_lib.call('mint_math_ilogb', x)
}

/**
 * Compute logarithm plus one of `x`.
 */
def log1p(x) {
	return g_math_lib.call('mint_math_log1p', x)
}

/**
 * Compute binary logarithm of `x`.
 */
def log2(x) {
	return g_math_lib.call('mint_math_log2', x)
}

/**
 * Compute floating-point base logarithm of `x`.
 */
def logb(x) {
	return g_math_lib.call('mint_math_logb', x)
}

def scalbn(x) {
	/// @todo
}

def scalbln(x) {
	/// @todo
}

/**
 * Raise `x` to power `y`.
 */
def pow(x, y) {
	return g_math_lib.call('mint_math_pow', x, y)
}

/**
 * Computes the square root of `x`. 
 */
def sqrt(x) {
	return g_math_lib.call('mint_math_sqrt', x)
}

def cbrt(x) {
	/// @todo
}

def hypot(p, q) {
	/// @todo
}

def erf(x) {
	/// @todo
}

def erfc(x) {
	/// @todo
}

def gamma(x) {
	/// @todo
}

def lgamma(x) {
	/// @todo
}

def ceil(x) {
	/// @todo
}

def floor(x) {
	/// @todo
}

def mod(x, y) {
	/// @todo
}

def abs(x) {
	/// @todo
}

def trunc(x) {
	/// @todo
}

def round(x) {
	/// @todo
}

def rint(x) {
	/// @todo
}

def nearbyint(x) {
	/// @todo
}

def remainder(x) {
	/// @todo
}

def remquo(x) {
	/// @todo
}

def copysign(x, y) {
	/// @todo
}

def nan() {
	/// @todo
}

def inf(sign) {
	/// @todo
}

def nextafter(x, y) {
	/// @todo
}

def nexttoward(x, y) {
	/// @todo
}

def dim(x, y) {
	/// @todo
}

def max(x, y) {
	return x < y ? y : x
}

def min(x, y) {
	return x < y ? x : y
}

def is_inf(x, sign) {
	/// @todo
}

def is_nan(x) {
	/// @todo
}

def signbit(x) {
	/// @todo
}

// Functions to check : not found in math.h

def erfcinv(x) {
	/// @todo
}

def erfinv(x) {
	/// @todo
}

def j0(x) {
	/// @todo
}

def j1(x) {
	/// @todo
}

def jn(n, x) {
	/// @todo
}

def y0(x) {
	/// @todo
}

def y1(x) {
	/// @todo
}

def yn(n, x) {
	/// @todo
}

@g_math_lib = lib('libmint-math')
