/**
 * @license
 * Copyright (c) 2025 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides a set of functions to perform extra operations on enums.
 */

load mint.lang

/**
 * Returns the member name from `self` that is equal to `value`. If `self`
 * is not an enum or has no member that match `value`, `none` is returned.
 */
def findEnumName(const self, %value) {
    for var name, in globals(self) {
        if value is self.${name} {
            return '%s.%s' % (typeof self, name)
        }
    }
}

/**
 * Returns the first member from `self` that is equal to `value`. If `self`
 * is not an enum or has no member that match `value`, `none` is returned.
 */
def findEnumValue(const self, value) {
    for let (name, member) in globals(self) {
        if member == value {
            return self.${name}
        }
    }
}
