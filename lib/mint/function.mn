/**
 * @license
 * Copyright (c) 2025 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides tools to extend functions capabilities.
 */

load mint.lang
load mint.type

/**
 * This class provides a context to call a function or a method indirectly.
 */
class Callback {
	/**
	 * Creates a new callback on the `func` function.
	 * 
	 * The `func` parameter can also be:
	 * * an instance of {Callback}, in this case the object is returned as the
	 *   new instance.
	 * * an object providing a `toCallback` method, in this case the result of
	 *   this method call is used as the new instance.
	 * * an object providing a `toFunction` method, in this case the result of
	 *   this method call is used to retrieve the function.
	 * 
	 * In other cases, `none` is returned.
	 */
	const def new(self, %func) {
		switch typeof func {
		case 'Callback':
			return func
		case 'function':
			self.function = func
			return self
		default:
			if defined func.toCallback {
				return func.toCallback()
			}
			if defined func.toFunction {
				self.function = func.toFunction()
				return self
			}
		}
	}

	/**
	 * Creates a new callback on the `member` member of the `object` object. The
	 * member can either be a member function of `object` or a member name.
	 * 
	 * If `object` has no member `member`, `none` is returned.
	 */
	const def new(self, object, %member) {
		if isDefined(self.memberInfo = Callback.g_lib.call('mint_get_member_info', object, member)) {
			self.object = object
			self.function = member
			return self
		} elif member in membersof object {
			self.object = object
			self.function = member
			return self
		}
	}

	/**
	 * Calls the callback with the given parameters and returns the callback's
	 * return value.
	 */
	const def ()(const self, ...) {
		if defined self.memberInfo {
			return Callback.g_lib.call('mint_function_call', self.memberInfo, self.object, self.function, va_args)
		}
		if defined self.object {
			return self.object.${self.function}(*va_args)
		}
		return (self.function)(*va_args)
	}

	/**
	 * Returns `true` if `other` is equal to this callback; otherwise returns
	 * `false`.
	 * 
	 * Two callbacks are considered equal if they calls the same function or
	 * the same method on the same object.
	 */
	const def ==(const self, const other) {
		if var callback = Callback(other) {
			return self.object is callback.object and self.function == callback.function
		}
		return false
	}

	/**
	 * Returns `true` if `other` is not equal to this callback; otherwise
	 * returns `false`.
	 * 
	 * Two callbacks are considered equal if they calls the same function or
	 * the same method on the same object.
	 */
	const def !=(const self, const other) {
		if var callback = Callback(other) {
			return not (self.object is callback.object) or self.function != callback.function
		}
		return true
	}

	/**
	 * Returns the callback's object or `none` if the callback is not a callback
	 * on an object member.
	 */
	const def getObject(const self) {
		return self.object
	}

	/**
	 * Returns the callback's function or method.
	 */
	const def getFunction(const self) {
		return self.function
	}

	/**
	 * Returns the callback's function or method name or a placeholder.
	 */
	const def toString(const self) {
		if defined self.memberInfo {
			return Callback.g_lib.call('mint_function_name', self.memberInfo)
		}
		return self.function.toString()
	}

	/// Global library handle.
	- @g_lib = lib('libmint-mint')

	/// Internal member informations.
	- final memberInfo = none
	
	/// Internal object.
	- final object = none

	/// Internal function.
	- final %function = none
}

/**
 * This class provides an evenemential callback mechanisme. Multiple
 * callbacks can be connected to an instance using the {@see connect}
 * method. Each connected callback will then be called on a call to the
 * {@see ()} operator.
 */
class Signal {
	/**
	 * Creates a new signal.
	 */
	const def new(self) {
		return self
	}

	/**
	 * Connects the signal to the given `func` function. The `func` function can
	 * either be a `function` or an instane of {Callback}.
	 * 
	 * Returns `true` if the function was correctly connected to the signal;
	 * otherwise returs `false`.
	 */
	const def connect(self, func) {
		if func not in self.slots {
			self.slots << func
			return true
		}
		return false
	}

	/**
	 * Connects the signal to an instance of {Callback} using the `object`
	 * instance and the `member` method.
	 * 
	 * Returns `true` if the callback was correctly connected to the signal;
	 * otherwise returs `false`.
	 */
	const def connect(self, object, %member) {
		return self.connect(Callback(object, member))
	}

	/**
	 * Disconnects the signal and the given `object` function or object. If
	 * `object` is not a function, each connected callback that call a method
	 * on this object is disconnected.
	 * 
	 * The functions will no more be called by the signal.
	 * 
	 * Returns `true` if the functions were correctly disconnected from the
	 * signal; otherwise returs `false`.
	 */
	const def disconnect(self, %object) {
		switch typeof object {
		case 'function':
		case 'Callback':
			var index = self.slots.indexOf(object)
			if defined index {
				self.slots.remove(index)
				return true
			}
			return false
		default:
			var found = false
			const count = self.slots.size()
			for var index in 1...count {
				if defined self.slots[count - index].getObject and object is self.slots[count - index].getObject() {
					self.slots.remove(count - index)
					found = true
				}
			}
			return found
		}
	}

	/**
	 * Disconnects the signal and the callback using the `object` instance
	 * and the `member` method. The callback will no more be called by the
	 * signal.
	 * 
	 * Returns `true` if the callback was correctly disconnected from the
	 * signal; otherwise returs `false`.
	 */
	const def disconnect(self, object, %member) {
		var index = self.slots.indexOf(Callback(object, member))
		if defined index {
			self.slots.remove(index)
			return true
		}
		return false
	}

	/**
	 * Calls each callbacks connected to the signal. Parameters provided to
	 * this operator are also provided to the callbacks.
	 */
	const def ()(const self, ...) {
		for var slot in self.slots {
			slot(*va_args)
		}
	}

	/// Internal connected slots list.
	- final slots = []
}

/**
 * Returns a new function equivalent to `func` but with the extra arguments
 * automaticaly passed as first arguments.
 * 
 * Example:
 * ```mn
 * load mint.math
 * const powerOfTwo = partial(pow, 2)
 * powerOfTwo(3) // gives 8
 * ```
 */
def partial(func, ...) {
	return def [func, args = va_args] (...) {
		return func(*args, *va_args)
	}
}

/**
 * Returns a new method equivalent to `func` but with the extra arguments
 * automaticaly passed as first arguments. This function works like {@see
 * partial} but keep the calling object instance as first parameter.
 * 
 * Example:
 * ```mn
 * load mint.range
 * const startsWithDot = partialMethod(startsWith, '.')
 * '.local'.startsWithDot(3) // gives true
 * ```
 */
def partialMethod(func, ...) {
	return def [func, args = va_args] (self, ...) {
		return func(self, *args, *va_args)
	}
}

/**
 * Returns the value of the `func` binary function applied cumulatively to each
 * extra arguments.
 */
def reduce(func, ...) {
    value = va_args.next()
    for var element in va_args {
        value = func(value, element)
    }
    return value
}
