/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides a set of functions to perform extra operations on hashes.
 */

/**
 * Returns the value associated to `key` if contained in `self`; otherwise
 * returns `defaultValue`. The content of `self` is not modified.
 */
$def get(const self, key, defaultValue = none) {
    if key in self {
        return self[key]
    }
    return defaultValue
}

/**
 * Returns `true` if `self` contains the key `key`; otherwise returns `false`.
 */
$def contains(const self, key) {
    return self.in(key)
}

/**
 * Returns an iterator on each item contained in `self`.
 */
$def items(const self) {
    return self.in()
}

/**
 * Returns an iterator on each key contained in `self`.
 */
$def keys(const self) {
    for var key, _ in self {
        yield key
    }
}

/**
 * Returns an iterator on each value contained in `self`.
 */
$def values(const self) {
    for _, var value in self {
        yield value
    }
}
