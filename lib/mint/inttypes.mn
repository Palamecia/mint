/**
 * This module provides fixed size integer types.
 */

load mint.type

/**
 * This class provides an integer representation encoded on 8 bits.
 */
class int8 {
	/**
	 * Creates a new integer initialized to `value`.
	 */
	def new(self, value = 0) {
		self.value = self.g_lib.call('mint_' + typeof self + '_create', number(value))
		self.value.delete = def [g_lib = int8.g_lib] (self) {
			g_lib.call('mint_int8_delete', self)
		}
		return self
	}

	def +(self) {
		return $(typeof self)(+self.toNumber())
	}

	def -(self) {
		return $(typeof self)(-self.toNumber())
	}

	def ~(self) {
		return $(typeof self)(~self.toNumber())
	}

	def +(self, other) {
		return $(typeof self)(self.toNumber() + number(other))
	}

	def -(self, other) {
		return $(typeof self)(self.toNumber() - number(other))
	}

	def *(self, other) {
		return $(typeof self)(self.toNumber() * number(other))
	}

	def /(self, other) {
		return $(typeof self)(self.toNumber() / number(other))
	}

	def %(self, other) {
		return $(typeof self)(self.toNumber() % number(other))
	}

	def <(self, other) {
		return self.toNumber() < number(other)
	}

	def >(self, other) {
		return self.toNumber() > number(other)
	}

	def &(self, other) {
		return $(typeof self)(self.toNumber() & number(other))
	}

	def |(self, other) {
		return $(typeof self)(self.toNumber() | number(other))
	}

	def ^(self, other) {
		return $(typeof self)(self.toNumber() ^ number(other))
	}

	def **(self, other) {
		return $(typeof self)(self.toNumber() ** number(other))
	}

	def ==(self, other) {
		return self.toNumber() == number(other)
	}

	def !=(self, other) {
		return self.toNumber() != number(other)
	}

	def <=(self, other) {
		return self.toNumber() <= number(other)
	}

	def >=(self, other) {
		return self.toNumber() >= number(other)
	}

	def <<(self, other) {
		return $(typeof self)(self.toNumber() << number(other))
	}

	def >>(self, other) {
		return $(typeof self)(self.toNumber() >> number(other))
	}

	def &&(self, other) {
		return self.toNumber() && number(other)
	}

	def ||(self, other) {
		return self.toNumber() || number(other)
	}

	def ++(self) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, self.toNumber() + 1)
		return self
	}

	def --(self) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, self.toNumber() - 1)
		return self
	}

	def :=(self, other) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, number(other))
		return self
	}

	def toNumber(self) {
		return self.g_lib.call('mint_' + typeof self + '_to_number', self.value)
	}

	- @g_lib = lib('libmint-mint')
	- value = null
}

/**
 * This class provides an integer representation encoded on 16 bits.
 */
class int16 {
	/**
	 * Creates a new integer initialized to `value`.
	 */
	def new(self, value = 0) {
		self.value = self.g_lib.call('mint_' + typeof self + '_create', value)
		self.value.delete = def [g_lib = int16.g_lib] (self) {
			g_lib.call('mint_int16_delete', self)
		}
		return self
	}

	def +(self) {
		return $(typeof self)(+self.toNumber())
	}

	def -(self) {
		return $(typeof self)(-self.toNumber())
	}

	def ~(self) {
		return $(typeof self)(~self.toNumber())
	}

	def +(self, other) {
		return $(typeof self)(self.toNumber() + number(other))
	}

	def -(self, other) {
		return $(typeof self)(self.toNumber() - number(other))
	}

	def *(self, other) {
		return $(typeof self)(self.toNumber() * number(other))
	}

	def /(self, other) {
		return $(typeof self)(self.toNumber() / number(other))
	}

	def %(self, other) {
		return $(typeof self)(self.toNumber() % number(other))
	}

	def <(self, other) {
		return self.toNumber() < number(other)
	}

	def >(self, other) {
		return self.toNumber() > number(other)
	}

	def &(self, other) {
		return $(typeof self)(self.toNumber() & number(other))
	}

	def |(self, other) {
		return $(typeof self)(self.toNumber() | number(other))
	}

	def ^(self, other) {
		return $(typeof self)(self.toNumber() ^ number(other))
	}

	def **(self, other) {
		return $(typeof self)(self.toNumber() ** number(other))
	}

	def ==(self, other) {
		return self.toNumber() == number(other)
	}

	def !=(self, other) {
		return self.toNumber() != number(other)
	}

	def <=(self, other) {
		return self.toNumber() <= number(other)
	}

	def >=(self, other) {
		return self.toNumber() >= number(other)
	}

	def <<(self, other) {
		return $(typeof self)(self.toNumber() << number(other))
	}

	def >>(self, other) {
		return $(typeof self)(self.toNumber() >> number(other))
	}

	def &&(self, other) {
		return self.toNumber() && number(other)
	}

	def ||(self, other) {
		return self.toNumber() || number(other)
	}

	def ++(self) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, self.toNumber() + 1)
		return self
	}

	def --(self) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, self.toNumber() - 1)
		return self
	}

	def :=(self, other) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, number(other))
		return self
	}

	def toNumber(self) {
		return self.g_lib.call('mint_' + typeof self + '_to_number', self.value)
	}

	- @g_lib = lib('libmint-mint')
	- value = null
}

/**
 * This class provides an integer representation encoded on 32 bits.
 */
class int32 {
	/**
	 * Creates a new integer initialized to `value`.
	 */
	def new(self, value = 0) {
		self.value = self.g_lib.call('mint_' + typeof self + '_create', value)
		self.value.delete = def [g_lib = int32.g_lib] (self) {
			g_lib.call('mint_int32_delete', self)
		}
		return self
	}

	def +(self) {
		return $(typeof self)(+self.toNumber())
	}

	def -(self) {
		return $(typeof self)(-self.toNumber())
	}

	def ~(self) {
		return $(typeof self)(~self.toNumber())
	}

	def +(self, other) {
		return $(typeof self)(self.toNumber() + number(other))
	}

	def -(self, other) {
		return $(typeof self)(self.toNumber() - number(other))
	}

	def *(self, other) {
		return $(typeof self)(self.toNumber() * number(other))
	}

	def /(self, other) {
		return $(typeof self)(self.toNumber() / number(other))
	}

	def %(self, other) {
		return $(typeof self)(self.toNumber() % number(other))
	}

	def <(self, other) {
		return self.toNumber() < number(other)
	}

	def >(self, other) {
		return self.toNumber() > number(other)
	}

	def &(self, other) {
		return $(typeof self)(self.toNumber() & number(other))
	}

	def |(self, other) {
		return $(typeof self)(self.toNumber() | number(other))
	}

	def ^(self, other) {
		return $(typeof self)(self.toNumber() ^ number(other))
	}

	def **(self, other) {
		return $(typeof self)(self.toNumber() ** number(other))
	}

	def ==(self, other) {
		return self.toNumber() == number(other)
	}

	def !=(self, other) {
		return self.toNumber() != number(other)
	}

	def <=(self, other) {
		return self.toNumber() <= number(other)
	}

	def >=(self, other) {
		return self.toNumber() >= number(other)
	}

	def <<(self, other) {
		return $(typeof self)(self.toNumber() << number(other))
	}

	def >>(self, other) {
		return $(typeof self)(self.toNumber() >> number(other))
	}

	def &&(self, other) {
		return self.toNumber() && number(other)
	}

	def ||(self, other) {
		return self.toNumber() || number(other)
	}

	def ++(self) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, self.toNumber() + 1)
		return self
	}

	def --(self) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, self.toNumber() - 1)
		return self
	}

	def :=(self, other) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, number(other))
		return self
	}

	def toNumber(self) {
		return self.g_lib.call('mint_' + typeof self + '_to_number', self.value)
	}

	- @g_lib = lib('libmint-mint')
	- value = null
}

/**
 * This class provides an integer representation encoded on 64 bits.
 */
class int64 {
	/**
	 * Creates a new integer initialized to `value`.
	 */
	def new(self, value = 0) {
		self.value = self.g_lib.call('mint_' + typeof self + '_create', value)
		self.value.delete = def [g_lib = int64.g_lib] (self) {
			g_lib.call('mint_int64_delete', self)
		}
		return self
	}

	def +(self) {
		return $(typeof self)(+self.toNumber())
	}

	def -(self) {
		return $(typeof self)(-self.toNumber())
	}

	def ~(self) {
		return $(typeof self)(~self.toNumber())
	}

	def +(self, other) {
		return $(typeof self)(self.toNumber() + number(other))
	}

	def -(self, other) {
		return $(typeof self)(self.toNumber() - number(other))
	}

	def *(self, other) {
		return $(typeof self)(self.toNumber() * number(other))
	}

	def /(self, other) {
		return $(typeof self)(self.toNumber() / number(other))
	}

	def %(self, other) {
		return $(typeof self)(self.toNumber() % number(other))
	}

	def <(self, other) {
		return self.toNumber() < number(other)
	}

	def >(self, other) {
		return self.toNumber() > number(other)
	}

	def &(self, other) {
		return $(typeof self)(self.toNumber() & number(other))
	}

	def |(self, other) {
		return $(typeof self)(self.toNumber() | number(other))
	}

	def ^(self, other) {
		return $(typeof self)(self.toNumber() ^ number(other))
	}

	def **(self, other) {
		return $(typeof self)(self.toNumber() ** number(other))
	}

	def ==(self, other) {
		return self.toNumber() == number(other)
	}

	def !=(self, other) {
		return self.toNumber() != number(other)
	}

	def <=(self, other) {
		return self.toNumber() <= number(other)
	}

	def >=(self, other) {
		return self.toNumber() >= number(other)
	}

	def <<(self, other) {
		return $(typeof self)(self.toNumber() << number(other))
	}

	def >>(self, other) {
		return $(typeof self)(self.toNumber() >> number(other))
	}

	def &&(self, other) {
		return self.toNumber() && number(other)
	}

	def ||(self, other) {
		return self.toNumber() || number(other)
	}

	def ++(self) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, self.toNumber() + 1)
		return self
	}

	def --(self) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, self.toNumber() - 1)
		return self
	}

	def :=(self, other) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, number(other))
		return self
	}

	def toNumber(self) {
		return self.g_lib.call('mint_' + typeof self + '_to_number', self.value)
	}

	- @g_lib = lib('libmint-mint')
	- value = null
}

/**
 * This class provides an unsigned integer representation encoded on 8 bits.
 */
class uint8 {
	/**
	 * Creates a new integer initialized to `value`.
	 */
	def new(self, value = 0) {
		self.value = self.g_lib.call('mint_' + typeof self + '_create', value)
		self.value.delete = def [g_lib = uint8.g_lib] (self) {
			g_lib.call('mint_uint8_delete', self)
		}
		return self
	}

	def +(self) {
		return $(typeof self)(+self.toNumber())
	}

	def -(self) {
		return $(typeof self)(-self.toNumber())
	}

	def ~(self) {
		return $(typeof self)(~self.toNumber())
	}

	def +(self, other) {
		return $(typeof self)(self.toNumber() + number(other))
	}

	def -(self, other) {
		return $(typeof self)(self.toNumber() - number(other))
	}

	def *(self, other) {
		return $(typeof self)(self.toNumber() * number(other))
	}

	def /(self, other) {
		return $(typeof self)(self.toNumber() / number(other))
	}

	def %(self, other) {
		return $(typeof self)(self.toNumber() % number(other))
	}

	def <(self, other) {
		return self.toNumber() < number(other)
	}

	def >(self, other) {
		return self.toNumber() > number(other)
	}

	def &(self, other) {
		return $(typeof self)(self.toNumber() & number(other))
	}

	def |(self, other) {
		return $(typeof self)(self.toNumber() | number(other))
	}

	def ^(self, other) {
		return $(typeof self)(self.toNumber() ^ number(other))
	}

	def **(self, other) {
		return $(typeof self)(self.toNumber() ** number(other))
	}

	def ==(self, other) {
		return self.toNumber() == number(other)
	}

	def !=(self, other) {
		return self.toNumber() != number(other)
	}

	def <=(self, other) {
		return self.toNumber() <= number(other)
	}

	def >=(self, other) {
		return self.toNumber() >= number(other)
	}

	def <<(self, other) {
		return $(typeof self)(self.toNumber() << number(other))
	}

	def >>(self, other) {
		return $(typeof self)(self.toNumber() >> number(other))
	}

	def &&(self, other) {
		return self.toNumber() && number(other)
	}

	def ||(self, other) {
		return self.toNumber() || number(other)
	}

	def ++(self) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, self.toNumber() + 1)
		return self
	}

	def --(self) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, self.toNumber() - 1)
		return self
	}

	def :=(self, other) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, number(other))
		return self
	}

	def toNumber(self) {
		return self.g_lib.call('mint_' + typeof self + '_to_number', self.value)
	}

	- @g_lib = lib('libmint-mint')
	- value = null
}

/**
 * This class provides an unsigned integer representation encoded on 16 bits.
 */
class uint16 {
	/**
	 * Creates a new integer initialized to `value`.
	 */
	def new(self, value = 0) {
		self.value = self.g_lib.call('mint_' + typeof self + '_create', value)
		self.value.delete = def [g_lib = uint16.g_lib] (self) {
			g_lib.call('mint_uint16_delete', self)
		}
		return self
	}

	def +(self) {
		return $(typeof self)(+self.toNumber())
	}

	def -(self) {
		return $(typeof self)(-self.toNumber())
	}

	def ~(self) {
		return $(typeof self)(~self.toNumber())
	}

	def +(self, other) {
		return $(typeof self)(self.toNumber() + number(other))
	}

	def -(self, other) {
		return $(typeof self)(self.toNumber() - number(other))
	}

	def *(self, other) {
		return $(typeof self)(self.toNumber() * number(other))
	}

	def /(self, other) {
		return $(typeof self)(self.toNumber() / number(other))
	}

	def %(self, other) {
		return $(typeof self)(self.toNumber() % number(other))
	}

	def <(self, other) {
		return self.toNumber() < number(other)
	}

	def >(self, other) {
		return self.toNumber() > number(other)
	}

	def &(self, other) {
		return $(typeof self)(self.toNumber() & number(other))
	}

	def |(self, other) {
		return $(typeof self)(self.toNumber() | number(other))
	}

	def ^(self, other) {
		return $(typeof self)(self.toNumber() ^ number(other))
	}

	def **(self, other) {
		return $(typeof self)(self.toNumber() ** number(other))
	}

	def ==(self, other) {
		return self.toNumber() == number(other)
	}

	def !=(self, other) {
		return self.toNumber() != number(other)
	}

	def <=(self, other) {
		return self.toNumber() <= number(other)
	}

	def >=(self, other) {
		return self.toNumber() >= number(other)
	}

	def <<(self, other) {
		return $(typeof self)(self.toNumber() << number(other))
	}

	def >>(self, other) {
		return $(typeof self)(self.toNumber() >> number(other))
	}

	def &&(self, other) {
		return self.toNumber() && number(other)
	}

	def ||(self, other) {
		return self.toNumber() || number(other)
	}

	def ++(self) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, self.toNumber() + 1)
		return self
	}

	def --(self) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, self.toNumber() - 1)
		return self
	}

	def :=(self, other) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, number(other))
		return self
	}

	def toNumber(self) {
		return self.g_lib.call('mint_' + typeof self + '_to_number', self.value)
	}

	- @g_lib = lib('libmint-mint')
	- value = null
}

/**
 * This class provides an unsigned integer representation encoded on 32 bits.
 */
class uint32 {
	/**
	 * Creates a new integer initialized to `value`.
	 */
	def new(self, value = 0) {
		self.value = self.g_lib.call('mint_' + typeof self + '_create', value)
		self.value.delete = def [g_lib = uint32.g_lib] (self) {
			g_lib.call('mint_uint32_delete', self)
		}
		return self
	}

	def +(self) {
		return $(typeof self)(+self.toNumber())
	}

	def -(self) {
		return $(typeof self)(-self.toNumber())
	}

	def ~(self) {
		return $(typeof self)(~self.toNumber())
	}

	def +(self, other) {
		return $(typeof self)(self.toNumber() + number(other))
	}

	def -(self, other) {
		return $(typeof self)(self.toNumber() - number(other))
	}

	def *(self, other) {
		return $(typeof self)(self.toNumber() * number(other))
	}

	def /(self, other) {
		return $(typeof self)(self.toNumber() / number(other))
	}

	def %(self, other) {
		return $(typeof self)(self.toNumber() % number(other))
	}

	def <(self, other) {
		return self.toNumber() < number(other)
	}

	def >(self, other) {
		return self.toNumber() > number(other)
	}

	def &(self, other) {
		return $(typeof self)(self.toNumber() & number(other))
	}

	def |(self, other) {
		return $(typeof self)(self.toNumber() | number(other))
	}

	def ^(self, other) {
		return $(typeof self)(self.toNumber() ^ number(other))
	}

	def **(self, other) {
		return $(typeof self)(self.toNumber() ** number(other))
	}

	def ==(self, other) {
		return self.toNumber() == number(other)
	}

	def !=(self, other) {
		return self.toNumber() != number(other)
	}

	def <=(self, other) {
		return self.toNumber() <= number(other)
	}

	def >=(self, other) {
		return self.toNumber() >= number(other)
	}

	def <<(self, other) {
		return $(typeof self)(self.toNumber() << number(other))
	}

	def >>(self, other) {
		return $(typeof self)(self.toNumber() >> number(other))
	}

	def &&(self, other) {
		return self.toNumber() && number(other)
	}

	def ||(self, other) {
		return self.toNumber() || number(other)
	}

	def ++(self) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, self.toNumber() + 1)
		return self
	}

	def --(self) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, self.toNumber() - 1)
		return self
	}

	def :=(self, other) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, number(other))
		return self
	}

	def toNumber(self) {
		return self.g_lib.call('mint_' + typeof self + '_to_number', self.value)
	}

	- @g_lib = lib('libmint-mint')
	- value = null
}

/**
 * This class provides an unsigned integer representation encoded on 64 bits.
 */
class uint64 {
	/**
	 * Creates a new integer initialized to `value`.
	 */
	def new(self, value = 0) {
		self.value = self.g_lib.call('mint_' + typeof self + '_create', value)
		self.value.delete = def [g_lib = uint64.g_lib] (self) {
			g_lib.call('mint_uint64_delete', self)
		}
		return self
	}

	def +(self) {
		return $(typeof self)(+self.toNumber())
	}

	def -(self) {
		return $(typeof self)(-self.toNumber())
	}

	def ~(self) {
		return $(typeof self)(~self.toNumber())
	}

	def +(self, other) {
		return $(typeof self)(self.toNumber() + number(other))
	}

	def -(self, other) {
		return $(typeof self)(self.toNumber() - number(other))
	}

	def *(self, other) {
		return $(typeof self)(self.toNumber() * number(other))
	}

	def /(self, other) {
		return $(typeof self)(self.toNumber() / number(other))
	}

	def %(self, other) {
		return $(typeof self)(self.toNumber() % number(other))
	}

	def <(self, other) {
		return self.toNumber() < number(other)
	}

	def >(self, other) {
		return self.toNumber() > number(other)
	}

	def &(self, other) {
		return $(typeof self)(self.toNumber() & number(other))
	}

	def |(self, other) {
		return $(typeof self)(self.toNumber() | number(other))
	}

	def ^(self, other) {
		return $(typeof self)(self.toNumber() ^ number(other))
	}

	def **(self, other) {
		return $(typeof self)(self.toNumber() ** number(other))
	}

	def ==(self, other) {
		return self.toNumber() == number(other)
	}

	def !=(self, other) {
		return self.toNumber() != number(other)
	}

	def <=(self, other) {
		return self.toNumber() <= number(other)
	}

	def >=(self, other) {
		return self.toNumber() >= number(other)
	}

	def <<(self, other) {
		return $(typeof self)(self.toNumber() << number(other))
	}

	def >>(self, other) {
		return $(typeof self)(self.toNumber() >> number(other))
	}

	def &&(self, other) {
		return self.toNumber() && number(other)
	}

	def ||(self, other) {
		return self.toNumber() || number(other)
	}

	def ++(self) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, self.toNumber() + 1)
		return self
	}

	def --(self) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, self.toNumber() - 1)
		return self
	}

	def :=(self, other) {
		self.g_lib.call('mint_' + typeof self + '_copy', self.value, number(other))
		return self
	}

	def toNumber(self) {
		return self.g_lib.call('mint_' + typeof self + '_to_number', self.value)
	}

	- @g_lib = lib('libmint-mint')
	- value = null
}
