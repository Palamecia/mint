/**
 * @license
 * Copyright (c) 2025 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides functions to extend the language abilities.
 */

/**
 * This enum provides standard values to use with the `exit` keyword.
 */
enum ExitStatus {
    /// Successful execution of the script.
    Success = 0
    /// Unsuccessful execution of the script.
    Failure = 1
}

/**
 * Returns an array of strings containing the path of each directory used by the
 * `load` keyword to search modules.
 */
def [g_lib = lib('libmint-mint')] modulesRoots() {
	return g_lib.call('mint_lang_modules_roots')
}

/**
 * Returns an array of strings containing the path of each module found under
 * the module path given by `modulePath`. If the given module path is a full
 * path to a loadable module, the array will only contains the given module. If
 * it is path to a module directory, the array will contains the path to each
 * module found under the directory recursively. If the path is empty, the array
 * will contains the full list of modules installed on the system.
 */
def [g_lib = lib('libmint-mint')] modulesList(const modulePath = none) {
	return g_lib.call('mint_lang_modules_list', modulePath)
}

/**
 * Returns the module path of the main module.
 */
def [g_lib = lib('libmint-mint')] mainModulePath() {
	return g_lib.call('mint_lang_main_module_path').toModulePath()
}

/**
 * Returns the module path of the file identified by `filePath` or `none` if the
 * file is not a module (i.e. is not a mint script or is not located in an
 * accessible location).
 */
def [g_lib = lib('libmint-mint')] toModulePath(const filePath) {
	return g_lib.call('mint_lang_to_module_path', filePath)
}

/**
 * Returns the file path of the main module.
 */
def [g_lib = lib('libmint-mint')] mainModuleFilePath() {
	return g_lib.call('mint_lang_main_module_path')
}

/**
 * Returns the file path of the module identified by `modulePath` or `none` if the
 * module does not exists.
 */
def [g_lib = lib('libmint-mint')] toFilePath(const modulePath) {
	return g_lib.call('mint_lang_to_file_path', modulePath)
}

/**
 * Loads the module with the path given by `modulePath`. Returns `true` if the
 * module was successfully loaded; otherwise returns `false`.
 */
def [g_lib = lib('libmint-mint')] loadModule(const modulePath) {
	return g_lib.call('mint_lang_load_module', modulePath)
}

/**
 * Returns the current backtrace as an array of iterators containing the module
 * path and the line number. The array starts from the most recent call to the
 * oldest. If the `threadId` parameter is given, the backtrace of the thread
 * with the given id is used; otherwise the current thread is used.
 */
def [g_lib = lib('libmint-mint')] backtrace(const threadId = none) {
	return g_lib.call('mint_lang_backtrace', threadId)
}

/**
 * Returns an hash containing each local variables name mapped to its value. If
 * `object` is given, the variables are the public members of the given object;
 * otherwise the variables of the current context are used.
 */
def [g_lib = lib('libmint-mint')] locals(object = none) {
	if defined object {
		return g_lib.call('mint_lang_get_object_locals', object)
	}
	return g_lib.call('mint_lang_get_locals')
}

/**
 * Returns an hash containing each global variables name mapped to its value. If
 * `object` is given, the variables are the public members of the given object;
 * otherwise the variables of the root package are used.
 */
def [g_lib = lib('libmint-mint')] globals(object = none) {
	if defined object {
		return g_lib.call('mint_lang_get_object_globals', object)
	}
	return g_lib.call('mint_lang_get_globals')
}

/**
 * Returns an hash containing each class name mapped to its value. If `object`
 * is given, the types are the public member class of the given object; otherwise
 * the types of the root package are used.
 */
def [g_lib = lib('libmint-mint')] types(object = none) {
	if defined object {
		return g_lib.call('mint_lang_get_object_types', object)
	}
	return g_lib.call('mint_lang_get_types')
}

/**
 * Returns `true` if `expr` is defined; otherwise returns `false`. This function
 * allow to apply the `defined` operator to the result of an expression.
 * 
 * **Example**:
 * ```mn
 * if isDefined(var = object.getOptionalValue()) {
 *     // use var
 * }
 * ```
 */
def isDefined(expr) {
	return defined expr
}

/**
 * Returns `true` if the current module is the main module; otherwise returns
 * `false`.
 */
def [g_lib = lib('libmint-mint')] isMain() {
	return g_lib.call('mint_lang_is_main')
}

/**
 * Adds `callback` function to be called when the script exits. The function will
 * take one parameter corresponding to the exit code.
 * 
 * **Example**:
 * ```mn
 * atExit(def (code) {
 *     print {'Exited with code %d\n' % code}
 * })
 * ```
 */
def [g_lib = lib('libmint-mint')] atExit(callback) {
	g_lib.call('mint_at_exit', callback)
}

/**
 * Adds `callback` function to be called when the script crash. The function will
 * take two parameters corresponding to the error message and the state of the
 * call stack when crash occured as returned by {backtrace}.
 * 
 * **Example**:
 * ```mn
 * atError(def (message, callstack) {
 *     print {
 *         'Exited with error %s\n' % message
 *         'The call stack is:\n'
 *         for let (module, line) in callstack {
 *             '  Module %s, line %d\n' % (module, line)
 *         }
 *     }
 * })
 * ```
 */
def [g_lib = lib('libmint-mint')] atError(callback) {
	g_lib.call('mint_at_error', callback)
}

/**
 * Executes the `src` string as a mint script part. If `context` is a valid hash
 * containing variables mapping, the execution context is initialized with the
 * given variables; otherwise an empty context is created.
 * 
 * Returns `true` on execution success or `false` on error.
 */
def [g_lib = lib('libmint-mint')] exec(src, context = none) {
	return g_lib.call('mint_lang_exec', src, context)
}

/**
 * Executes the `src` string as a mint script statement. If `context` is a valid
 * hash containing variables mapping, the execution context is initialized with
 * the given variables; otherwise an empty context is created.
 * 
 * Returns statement result.
 */
def [g_lib = lib('libmint-mint')] eval(src, context = none) {
	return g_lib.call('mint_lang_eval', src, context)
}

/**
 * Creates a new global variable named `name` if no variable with the same name
 * already exists.
 * 
 * If `value` is given, the variable is initialized with the given value.
 * 
 * If `object` is given, the global variable is added to the object; otherwise
 * the variable is added to the root package. The given object must be a class,
 * an object or a package.
 * 
 * Returns `true` if the variable was successfully created; otherwise returns
 * `false`.
 */
def [g_lib = lib('libmint-mint')] createGlobal(name, value = none, object = none) {
	if defined object {
		return g_lib.call('mint_lang_create_object_global', object, name, value)
	}
	return g_lib.call('mint_lang_create_global', name, value)
}
