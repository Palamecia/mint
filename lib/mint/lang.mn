/**
 * This module provides functions to extend the language abilities.
 */

/**
 * This enum provides standard values to use with the `exit` keyword.
 */
enum ExitStatus {
    /// Successful execution of the script.
    Success = 0
    /// Unsuccessful execution of the script.
    Failure = 1
}

/**
 * Returns an hash containing each local variables name mapped to its value. If
 * `object` is given, the variables are the public members of the given object;
 * otherwise the variables of the current context are used.
 */
$ def [g_lib = lib('libmint-mint')] locals(object = none) {
	if defined object {
		return g_lib.call('mint_lang_get_object_locals', object)
	}
	return g_lib.call('mint_lang_get_locals')
}

/**
 * Returns an hash containing each global variables name mapped to its value. If
 * `object` is given, the variables are the public members of the given object;
 * otherwise the variables of the root package are used.
 */
$ def [g_lib = lib('libmint-mint')] globals(object = none) {
	if defined object {
		return g_lib.call('mint_lang_get_object_globals', object)
	}
	return g_lib.call('mint_lang_get_globals')
}

/**
 * Returns an hash containing each class name mapped to its value. If `object`
 * is given, the types are the public member class of the given object; otherwise
 * the types of the root package are used.
 */
$ def [g_lib = lib('libmint-mint')] types(object = none) {
	if defined object {
		return g_lib.call('mint_lang_get_object_types', object)
	}
	return g_lib.call('mint_lang_get_types')
}

/**
 * Returns `true` if `expr` is defined; otherwise returns `false`. This function
 * allow to apply the `defined` operator to the result of an expression.
 * 
 * Example :
 * ```mint
 * if isDefined(var = object.getOptionalValue()) {
 *     // use var
 * }
 * ```
 */
$ def isDefined(expr) {
	return defined expr
}

/**
 * Returns `true` if the current module is the main module; otherwise returns
 * `false`.
 */
$ def [g_lib = lib('libmint-mint')] isMain() {
	return g_lib.call('mint_lang_isMain')
}

/**
 * Executes the `src` string as a mint script part. If `context` is a valid hash
 * containing variables mapping, the execution context is initialized with the
 * given variables; otherwise an empty context is created.
 * 
 * Returns `true` on execution success or `false` on error.
 */
$ def [g_lib = lib('libmint-mint')] exec(src, context = none) {
	return g_lib.call('mint_lang_exec', src, context)
}

/**
 * Executes the `src` string as a mint script statement. If `context` is a valid
 * hash containing variables mapping, the execution context is initialized with
 * the given variables; otherwise an empty context is created.
 * 
 * Returns statement result.
 */
$ def [g_lib = lib('libmint-mint')] eval(src, context = none) {
	return g_lib.call('mint_lang_eval', src, context)
}

/**
 * Creates a new global variable named `name` if no variable with the same name
 * already exists.
 * 
 * If `value` is given, the variable is initialized with the given value.
 * 
 * If `object` is given, the global variable is added to the object; otherwise
 * the variable is added to the root package. The given object must be a class,
 * an object or a package.
 * 
 * Returns `true` if the variable was successfully created; otherwise returns
 * `false`.
 */
$ def [g_lib = lib('libmint-mint')] createGlobal(name, value = none, object = none) {
	if defined object {
		return g_lib.call('mint_lang_create_object_global', object, name, value)
	}
	return g_lib.call('mint_lang_createGlobal', name, value)
}
