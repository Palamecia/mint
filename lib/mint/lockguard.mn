/**
 * @license
 * Copyright (c) 2025 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {LockGuard} class which allow to perform a scoped
 * {System.Mutex} lock.
 */


/**
 * This class provides a scoped lock mecanisme. It allows to ensure that the
 * {System.Mutex} lock is released after a function call.
 * 
 * **Example**:
 * ```mn
 * def thread_safe_operation(mutex) {
 *     lock = LockGuard(mutex)
 *     // Performe critical operation
 * }
 * ```
 * 
 * > [!NOTE]
 * > The lock can also be released by deleting the object.
 */
class LockGuard {
	/**
	 * Creates a new lock on the `mutex`.
	 */
	const def new(self, mutex) {
		self.mutex = mutex
		self.mutex.lock()
		return self
	}

	/**
	 * Releases the lock when the object is deleted.
	 */
	const def delete(self) {
		self.mutex.unlock()
	}

	/// Internal mutex.
	- final mutex = null
}
