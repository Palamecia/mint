/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides a set of functions to compute common mathematical operations
 * and transformations.
 */

/// Value of the *e* constant. 
@const E = 2.71828182845904523536028747135266249775724709369995957496696763
/// Value of the *π* constant.
@const π = 3.14159265358979323846264338327950288419716939937510582097494459
/// Value of the *φ* constant.
@const φ = 1.61803398874989484820458683436563811772030917980576286213544862

/// Value of the square root of *2*.
@const Sqrt2 = 1.41421356237309504880168872420969807856967187537694807317667974
/// Value of the square root of *e*.
@const SqrtE = 1.64872127070012814684865078781416357165377610071014801157507931
/// Value of the square root of *π*.
@const Sqrtπ = 1.77245385090551602729816748334114518279754945612238712821380779
/// Value of the square root of *φ*.
@const Sqrtφ = 1.27201964951406896425242246173749149171560804184009624861664038

/// Value of the binary logarithm of *2*.
@const Ln2 = 0.693147180559945309417232121458176568075500134360255254120680009
/// Value of the binary logarithm of *e*.
@const Log2E = 1 / Ln2
/// Value of the common logarithm of *2*.
@const Ln10 = 2.30258509299404568401799145468436420760110148862877297603332790
/// Value of the common logarithm of *e*.
@const Log10E = 1 / Ln10

/**
 * Compute the cosine of `x`.
 */
def [g_lib = lib('libmint-mint')] cos(x) {
	return g_lib.call('mint_math_cos', x)
}

/**
 * Compute the sine of `x`.
 */
def [g_lib = lib('libmint-mint')] sin(x) {
	return g_lib.call('mint_math_sin', x)
}

/**
 * Compute the sine and cosine of `x`.
 */
def [g_lib = lib('libmint-mint')] sinCos(x) {
	return g_lib.call('mint_math_sin_cos', x)
}

/**
 * Compute the tangent of `x`.
 */
def [g_lib = lib('libmint-mint')] tan(x) {
	return g_lib.call('mint_math_tan', x)
}

/**
 * Compute the arc cosine of `x`.
 */
def [g_lib = lib('libmint-mint')] acos(x) {
	return g_lib.call('mint_math_acos', x)
}

/**
 * Compute the arc sine of `x`.
 */
def [g_lib = lib('libmint-mint')] asin(x) {
	return g_lib.call('mint_math_asin', x)
}

/**
 * Compute the arc tangent of `x`.
 */
def [g_lib = lib('libmint-mint')] atan(x) {
	return g_lib.call('mint_math_atan', x)
}

/**
 * Compute the arc tangent with two parameters `x` and `y`.
 */
def [g_lib = lib('libmint-mint')] atan2(y, x) {
	return g_lib.call('mint_math_atan', x, y)
}

/**
 * Compute the hyperbolic cosine of `x`.
 */
def [g_lib = lib('libmint-mint')] cosh(x) {
	return g_lib.call('mint_math_cosh', x)
}
/**
 * Compute the hyperbolic sine of `x`.
 */
def [g_lib = lib('libmint-mint')] sinh(x) {
	return g_lib.call('mint_math_sinh', x)
}

/**
 * Compute the hyperbolic tangent of `x`.
 */
def [g_lib = lib('libmint-mint')] tanh(x) {
	return g_lib.call('mint_math_tanh', x)
}

/**
 * Compute the area hyperbolic cosine of `x`.
 */
def [g_lib = lib('libmint-mint')] acosh(x) {
	return g_lib.call('mint_math_acosh', x)
}

/**
 * Compute the area hyperbolic sine of `x`.
 */
def [g_lib = lib('libmint-mint')] asinh(x) {
	return g_lib.call('mint_math_asinh', x)
}

/**
 * Compute the area hyperbolic tangent of `x`.
 */
def [g_lib = lib('libmint-mint')] atanh(x) {
	return g_lib.call('mint_math_atanh', x)
}

/**
 * Compute the exponential function of `x`.
 */
def [g_lib = lib('libmint-mint')] exp(x) {
	return g_lib.call('mint_math_exp', x)
}

/**
 * Get the significand and exponent of `x`.
 */
def [g_lib = lib('libmint-mint')] frexp(x) {
	return g_lib.call('mint_math_frexp', x)
}

/**
 * Generate the value from significand `x` and exponent `exp`.
 */
def [g_lib = lib('libmint-mint')] ldexp(x, exp) {
	return g_lib.call('mint_math_ldexp', x, exp)
}

/**
 * Compute the natural logarithm of `x`.
 */
def [g_lib = lib('libmint-mint')] log(x) {
	return g_lib.call('mint_math_log', x)
}

/**
 * Compute the common logarithm of `x`.
 */
def [g_lib = lib('libmint-mint')] log10(x) {
	return g_lib.call('mint_math_log10', x)
}

/**
 * Break `x` into fractional and integral parts.
 */
def [g_lib = lib('libmint-mint')] modf(x) {
	return g_lib.call('mint_math_modf', x)
}

/**
 * Compute binary exponential function of `x`.
 */
def [g_lib = lib('libmint-mint')] exp2(x) {
	return g_lib.call('mint_math_exp2', x)
}

/**
 * Compute exponential minus one of `x`.
 */
def [g_lib = lib('libmint-mint')] expm1(x) {
	return g_lib.call('mint_math_expm1', x)
}

/**
 * Integer binary logarithm of `x`.
 */
def [g_lib = lib('libmint-mint')] ilogb(x) {
	return g_lib.call('mint_math_ilogb', x)
}

/**
 * Compute logarithm plus one of `x`.
 */
def [g_lib = lib('libmint-mint')] log1p(x) {
	return g_lib.call('mint_math_log1p', x)
}

/**
 * Compute binary logarithm of `x`.
 */
def [g_lib = lib('libmint-mint')] log2(x) {
	return g_lib.call('mint_math_log2', x)
}

/**
 * Compute floating-point base logarithm of `x`.
 */
def [g_lib = lib('libmint-mint')] logb(x) {
	return g_lib.call('mint_math_logb', x)
}

/**
 * Scale significand `x` using floating-point base exponent `exp`.
 */
def [g_lib = lib('libmint-mint')] scalbn(x, exp) {
	return g_lib.call('mint_math_scalbn', x)
}

/**
 * Raise `x` to power `y`.
 */
def [g_lib = lib('libmint-mint')] pow(x, y) {
	return g_lib.call('mint_math_pow', x, y)
}

/**
 * Computes the square root of `x`. 
 */
def [g_lib = lib('libmint-mint')] sqrt(x) {
	return g_lib.call('mint_math_sqrt', x)
}

/**
 * Compute cubic root of `x`.
 */
def [g_lib = lib('libmint-mint')] cbrt(x) {
	return g_lib.call('mint_math_cbrt', x)
}

/**
 * Compute hypotenuse as `sqrt(x**2+y**2)` avoiding intermediate overfows.
 */
def [g_lib = lib('libmint-mint')] hypot(x, y) {
	return g_lib.call('mint_math_hypot', x, y)
}

/**
 * Compute error function of `x`.
 */
def [g_lib = lib('libmint-mint')] erf(x) {
	return g_lib.call('mint_math_erf', x)
}

/**
 * Compute complementary error function of `x`.
 */
def [g_lib = lib('libmint-mint')] erfc(x) {
	return g_lib.call('mint_math_erfc', x)
}

/**
 * Compute gamma function of `x`.
 */
def [g_lib = lib('libmint-mint')] gamma(x) {
	return g_lib.call('mint_math_tgamma', x)
}

/**
 * Compute gamma function of `x`.
 */
def [g_lib = lib('libmint-mint')] tgamma(x) {
	return g_lib.call('mint_math_tgamma', x)
}

/**
 * Compute log-gamma function of `x`.
 */
def [g_lib = lib('libmint-mint')] lgamma(x) {
	return g_lib.call('mint_math_gamma', x)
}

/**
 * Round up `x` value.
 */
def [g_lib = lib('libmint-mint')] ceil(x) {
	return g_lib.call('mint_math_ceil', x)
}

/**
 * Round down `x` value.
 */
def [g_lib = lib('libmint-mint')] floor(x) {
	return g_lib.call('mint_math_floor', x)
}

/**
 * Compute remainder of division of `x` by `y`.
 */
def [g_lib = lib('libmint-mint')] mod(x, y) {
	return g_lib.call('mint_math_fmod', x, y)
}

/**
 * Compute absolute value of `x`.
 */
def [g_lib = lib('libmint-mint')] abs(x) {
	return g_lib.call('mint_math_fabs', x)
}

/**
 * Truncate `x` value.
 */
def [g_lib = lib('libmint-mint')] trunc(x) {
	return g_lib.call('mint_math_trunc', x)
}

/**
 * Round `x` to nearest.
 */
def [g_lib = lib('libmint-mint')] round(x) {
	return g_lib.call('mint_math_round', x)
}

/**
 * Round `x` to integral value.
 */
def [g_lib = lib('libmint-mint')] rint(x) {
	return g_lib.call('mint_math_rint', x)
}

/**
 * Round `x` to nearby integral value.
 */
def [g_lib = lib('libmint-mint')] nearbyint(x) {
	return g_lib.call('mint_math_nearbyint', x)
}

/**
 * Compute remainder (IEC 60559) of division of `x` by `y`.
 */
def [g_lib = lib('libmint-mint')] remainder(x, y) {
	return g_lib.call('mint_math_remainder', x, y)
}

/**
 * Compute remainder and quotient of division of `x` by `y`.
 */
def [g_lib = lib('libmint-mint')] remquo(x, y) {
	return g_lib.call('mint_math_remquo', x, y)
}

/**
 * Returns `true` if `x` is a negative value; otherwise returns `false`.
 */
def [g_lib = lib('libmint-mint')] signbit(x) {
	return g_lib.call('mint_math_signbit', x)
}

/**
 * Copy `y`'s sign to `x`'s value.
 */
def [g_lib = lib('libmint-mint')] copysign(x, y) {
	return g_lib.call('mint_math_copysign', x, y)
}

/**
 * Returns `true` if `x` is a NaN (Not-A-Number) value; otherwise returns `false`.
 */
def [g_lib = lib('libmint-mint')] isnan(x) {
	return g_lib.call('mint_math_isnan', x)
}

/**
 * Generate quiet NaN.
 */
def [g_lib = lib('libmint-mint')] nan() {
	return g_lib.call('mint_math_nan')
}

/**
 * Returns `true` if `x` is an infinity value; otherwise returns `false`.
 */
def [g_lib = lib('libmint-mint')] isinf(x, sign) {
	return g_lib.call('mint_math_isinf', x)
}

/**
 * Generate positive or negative infinity depending on the sign of `sign`.
 */
def [g_lib = lib('libmint-mint')] inf(sign) {
	return g_lib.call('mint_math_inf', sign)
}

/**
 * Returns the next representable value after `x` in the direction of `y`.
 */
def [g_lib = lib('libmint-mint')] nextafter(x, y) {
	return g_lib.call('mint_math_nextafter', x, y)
}
/**
 * Returns the next representable value after `x` in the direction of `y`.
 */
def [g_lib = lib('libmint-mint')] nexttoward(x, y) {
	return g_lib.call('mint_math_nexttoward', x, y)
}

/**
 * Returns the positive difference between `x` and `y`.
 */
def [g_lib = lib('libmint-mint')] dim(x, y) {
	return g_lib.call('mint_math_fdim', x, y)
}

/**
 * Returns the larger of its arguments: either `x` or `y`.
 */
def max(x, y) {
	return x < y ? y : x
}

/**
 * Returns the smaller of its arguments: either `x` or `y`.
 */
def min(x, y) {
	return x < y ? x : y
}

/**
 * Returns `x*y+z` avoiding intermediate lost of precision.
 */
def [g_lib = lib('libmint-mint')] fma(x, y, z) {
	return g_lib.call('mint_math_fma', x, y, z)
}
