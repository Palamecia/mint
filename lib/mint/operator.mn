/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides functions to perform operator calls.
 */

load mint.function

/**
 * Returns the result of the `=` operator applied to `left` and `right`.
 */
def moveOperator(left, right) {
	return left = right
}

/**
 * Returns the result of the `:=` operator applied to `left` and `right`.
 */
def copyOperator(left, right) {
	return left := right
}

/**
 * Returns the result of the `()` operator applied to `func`. Extra arguments
 * will be passed to the operator.
 */
def callOperator(func, ...) {
	return func(*va_args)
}

/**
 * Returns the result of the `()` operator applied to `member` member of `object`
 * as a member call. The `member` parameter can either be a member name of a
 * member function of `object`. Extra arguments will be passed to the operator.
 */
def callMemberOperator(object, member, ...) {
	return Callback(object, member)(*va_args)
}

/**
 * Returns the result of the `+` operator applied to `left` and `right`.
 */
def addOperator(left, right) {
	return left + right
}

/**
 * Returns the result of the `-` operator applied to `left` and `right`.
 */
def subOperator(left, right) {
	return left - right
}

/**
 * Returns the result of the `*` operator applied to `left` and `right`.
 */
def mulOperator(left, right) {
	return left * right
}

/**
 * Returns the result of the `/` operator applied to `left` and `right`.
 */
def divOperator(left, right) {
	return left / right
}

/**
 * Returns the result of the `**` operator applied to `left` and `right`.
 */
def powOperator(left, right) {
	return left ** right
}

/**
 * Returns the result of the `%` operator applied to `left` and `right`.
 */
def modOperator(left, right) {
	return left % right
}

/**
 * Returns the result of the `is` operator applied to `left` and `right`.
 */
def isOperator(left, right) {
	return left is right
}

/**
 * Returns the result of the `==` operator applied to `left` and `right`.
 */
def eqOperator(left, right) {
	return left == right
}

/**
 * Returns the result of the `!=` operator applied to `left` and `right`.
 */
def neOperator(left, right) {
	return left != right
}

/**
 * Returns the result of the `<` operator applied to `left` and `right`.
 */
def ltOperator(left, right) {
	return left < right
}

/**
 * Returns the result of the `>` operator applied to `left` and `right`.
 */
def gtOperator(left, right) {
	return left > right
}

/**
 * Returns the result of the `<=` operator applied to `left` and `right`.
 */
def leOperator(left, right) {
	return left <= right
}

/**
 * Returns the result of the `>=` operator applied to `left` and `right`.
 */
def geOperator(left, right) {
	return left >= right
}

/**
 * Returns the result of the `&&` operator applied to `left` and `right`.
 */
def andOperator(left, right) {
	return left && right
}

/**
 * Returns the result of the `||` operator applied to `left` and `right`.
 */
def orOperator(left, right) {
	return left || right
}

/**
 * Returns the result of the `&` operator applied to `left` and `right`.
 */
def bandOperator(left, right) {
	return left & right
}

/**
 * Returns the result of the `|` operator applied to `left` and `right`.
 */
def borOperator(left, right) {
	return left | right
}

/**
 * Returns the result of the `^` operator applied to `left` and `right`.
 */
def xorOperator(left, right) {
	return left ^ right
}

/**
 * Returns the result of the prefix `++` operator applied to `value`.
 */
def preIncOperator(value) {
	return ++value
}

/**
 * Returns the result of the sufix `++` operator applied to `value`.
 */
def postIncOperator(value) {
	return value++
}

/**
 * Returns the result of the prefix `--` operator applied to `value`.
 */
def preDecOperator(value) {
	return --value
}

/**
 * Returns the result of the sufix `--` operator applied to `value`.
 */
def postDecOperator(value) {
	return value--
}

/**
 * Returns the result of the `!` operator applied to `value`.
 */
def notOperator(value) {
	return !value
}

/**
 * Returns the result of the `~` operator applied to `value`.
 */
def complOperator(value) {
	return ~value
}

/**
 * Returns the result of the `+` operator applied to `value`.
 */
def posOperator(value) {
	return +value
}

/**
 * Returns the result of the `-` operator applied to `value`.
 */
def negOperator(value) {
	return -value
}

/**
 * Returns the result of the `<<` operator applied to `left` and `right`.
 */
def shiftLeftOperator(left, right) {
	return left << right
}

/**
 * Returns the result of the `>>` operator applied to `left` and `right`.
 */
def shiftRightOperator(left, right) {
	return left >> right
}

/**
 * Returns the result of the `..` operator applied to `left` and `right`.
 */
def inclusiveRangeOperator(left, right) {
	return left..right
}

/**
 * Returns the result of the `...` operator applied to `left` and `right`.
 */
def exclusiveRangeOperator(left, right) {
	return left...right
}

/**
 * Returns the result of the `typeof` operator applied to `value`.
 */
def typeofOperator(value) {
	return typeof value
}

/**
 * Returns the result of the `membersof` operator applied to `value`.
 */
def membersofOperator(value) {
	return membersof value
}

/**
 * Returns the result of the `[]` operator applied to `container` with the given
 * `index`.
 */
def subscriptOperator(container, index) {
	return container[index]
}

/**
 * Returns the result of the `[]=` operator applied to `container` with the given
 * `index` to set the element to `value`.
 */
def subscriptMoveOperator(container, index, value) {
	return container[index] = value
}

/**
 * Returns an iterator on the elements provided by the `in` operator applied to
 * `range`.
 */
def inOperator(range) {
	for var element in range {
		yield element
	}
}

/**
 * Returns the result of the `in` operator applied to `range` to search for `value`.
 */
def inOperator(range, value) {
	if value in range {
		return true
	}
	return false
}

/**
 * Returns the result of the `===` operator applied to `left` and `right`.
 */
def strictEqOperator(left, right) {
	return left === right
}

/**
 * Returns the result of the `!==` operator applied to `left` and `right`.
 */
def strictNeOperator(left, right) {
	return left !== right
}

/**
 * Returns the priority of the hash of `left` on the hash of `right`.
 */
def [g_lib = lib('libmint-mint')] hashKeyCompareOperator(left, right) {
	return g_lib.call('mint_operator_hash_key_compare', left, right)
}
