/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides a set of functions to perform operations on a range of
 * elements. The range of elements must implement the `in` operator.
 */

/**
 * This class provides access to the current printer.
 */
class Printer {
    /**
     * Creates a new instance pointing to the current printer.
     */
    const def new(self) {
        if self.d_ptr = Printer.g_lib.call('mint_printer_current_handle') {
            return self
        }
    }

    /**
     * Writes the content of `data` to the printer.
     */
    const def write(self, data) {
        Printer.g_lib.call('mint_printer_write', self.d_ptr, data)
    }

    /// Global library handle.
    - @g_lib = lib('libmint-mint')

    /// Object data.
    - d_ptr = null
}

/**
 * Prints `str` to the standard output, with a newline.
 */
def println(str) {
    print {
        str
        '\n'
    }
}

/**
 * Prints `str` to the `printer`, with a newline.
 */
def println(printer, str) {
    print (printer) {
        str
        '\n'
    }
}
