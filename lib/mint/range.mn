/**
 * This module provides a set of functions to perform operations on a range of
 * elements. The range of elements must implement the `in` operator.
 */

load mint.type
load mint.operator

/**
 * Returns `true` if `predicate` returns `true` for all elements in `range`;
 * otherwie returns `false`.
 */
$ def allOf(range, predicate) {
    return findIfNot(range, predicate).isEmpty()
}

/**
 * Returns `true` if `predicate` returns `true` for at least one element in
 * `range`; otherwie returns `false`.
 */
$ def anyOf(range, predicate) {
    return not findIf(range, predicate).isEmpty()
}

/**
 * Returns `true` if `predicate` returns `true` for no elements in `range`;
 * otherwie returns `false`.
 */
$ def noneOf(range, predicate) {
    return findIf(range, predicate).isEmpty()
}

/**
 * Calls `func` for each element in `range`.
 */
$ def each(range, func) {
    for var element in range {
        func(element)
    }
}

/**
 * Calls `func` for the `n` first elements in `range`.
 */
$ def eachN(range, n, func) {
    for var element in range {
        if (n--) == 0 {
            break
        }
        func(element)
    }
}

/**
 * Returns the number of elements in `range`.
 */
$ def count(range) {
    var res = 0
    for var element in range {
        ++res
    }
    return res
}

/**
 * Returns the number of elements in `range` that is equal to `value`. Both
 * `range` elemnts and `value` must implement the `==` operator.
 */
$ def count(range, value) {
    var res = 0
    for var element in range {
        if element == value {
            ++res
        }
    }
    return res
}

/**
 * Returns the number of elements in `range` for which `predicate` returns
 * `true`.
 */
$ def countIf(range, predicate) {
    var res = 0
    for var element in range {
        if predicate(element) {
            ++res
        }
    }
    return res
}

/**
 * Returns an iterator containing two iterators on the first non-equal elements
 * of `range` and `other`. The elements in the two ranges must implement the `==`
 * operator.
 */
$ def mismatch(range, other) {

    var it_range = inOperator(range)
    var it_other = inOperator(other)

    while not it_range.isEmpty() and not it_other.isEmpty() and it_range.value() == it_other.value() {
        it_range.next()
        it_other.next()
    }

    return (it_range, it_other)
}

/**
 * Returns an iterator containing two iterators on the first elements of `range`
 * and `other` where `predicate` returns `false`.
 */
$ def mismatch(range, other, predicate) {

    var it_range = inOperator(range)
    var it_other = inOperator(other)

    while not it_range.isEmpty() and not it_other.isEmpty() and predicate(it_range.value(), it_other.value()) {
        it_range.next()
        it_other.next()
    }

    return (it_range, it_other)
}

/**
 * Returns an iterator on the first element of `range` that match `value`. The
 * elements of `range` must implement the `==` operator.
 */
$ def find(range, value) {

    var it = inOperator(range)

    while not it.isEmpty() {
        if value == it.value() {
            return it
        }
        it.next()
    }

    return it
}

/**
 * Returns an iterator on the first element of `range` where `predicate` returns
 * `true`.
 */
$ def findIf(range, predicate) {

    var it = inOperator(range)

    while not it.isEmpty() {
        if predicate(it.value()) {
            return it
        }
        it.next()
    }

    return it
}

/**
 * Returns an iterator on the first element of `range` where `predicate` returns
 * `false`.
 */
$ def findIfNot(range, predicate) {

    var it = inOperator(range)

    while not it.isEmpty() {
        if not predicate(it.value()) {
            return it
        }
        it.next()
    }

    return it
}

/**
 * Returns an iterator on the beginning of the last occurence of `other` in
 * `range`. The elements of `range` and `other` must implement the `==`
 * operator.
 */
$ def findEnd(range, other) {

    var it_range = inOperator(range)
    var it_other = inOperator(other)

    if it_other.isEmpty() {
        return ()
    }

    var result = ()

    while found = search(range, other) {
        result = copy(found)
        range = found
        range.next()
    }

    return result
}

/**
 * Returns an iterator on the beginning of the last occurence of `other` in
 * `range`. The elements of `range` and `other` are compared using `predicate`.
 */
$ def findEnd(range, other, predicate) {

    var it_range = inOperator(range)
    var it_other = inOperator(other)

    if it_other.isEmpty() {
        return ()
    }

    var result = ()

    while let var found = search(range, other, predicate) {
        result = copy(found)
        range = found
        range.next()
    }

    return result
}

/**
 * Returns an iterator on the first element of `range` that is equal to an element
 * of `values`. The elements of `range` and `values` must implement the `==`
 * operator.
 */
$ def findFirstOf(range, values) {

    var it_range = inOperator(range)

    while not it_range.isEmpty() {
        for let var element in values {
            if element == it_range.value() {
                return it_range
            }
        }
        it_range.next()
    }

    return it_range
}

/**
 * Returns an iterator on the first element of `range` where `predicate` returns
 * `true` for an element of `values`.
 */
$ def findFirstOf(range, values, predicate) {

    var it_range = inOperator(range)

    while not it_range.isEmpty() {
        for let var element in values {
            if predicate(it_range.value(), element) {
                return it_range
            }
        }
        it_range.next()
    }

    return it_range
}

/**
 * Returns an iterator on the first element of `range` that is equal to its next
 * element. The elements of `range` must implement the `==` operator.
 */
$ def adjacentFind(range) {

    var it_range = inOperator(range)
    var it_next = inOperator(range)
    it_next.next()

    while not it_next.isEmpty() {
        if it_range.value() == it_next.value() {
            return it_range
        }
        it_range.next()
        it_next.next()
    }

    return ()
}

/**
 * Returns an iterator on the first element of `range` where `predicate` returns
 * `true` when called with the element and its next element.
 */
$ def adjacentFind(range, predicate) {

    var it_range = inOperator(range)
    var it_next = inOperator(range)
    it_next.next()

    while not it_next.isEmpty() {
        if predicate(it_range.value(), it_next.value()) {
            return it_range
        }
        it_range.next()
        it_next.next()
    }

    return ()
}

/**
 * Returns an iterator on the beginning of the first occurence of `other` in
 * `range`. The elements of `range` and `other` must implement the `==`
 * operator.
 */
$ def search(range, other) {

    var it_range = range.inOperator()

    while not it_range.isEmpty() {
        let var it_search = it_range.copy()
        let var it_other = other.copy().inOperator()
        while not it_search.isEmpty() and not it_other.isEmpty() {
            if not (it_search.next() == it_other.next()) {
                break
            }
            if it_other.isEmpty() {
                return it_range
            }
        }
        it_range.next()
    }

    return it_range
}

/**
 * Returns an iterator on the beginning of the first occurence of `other` in
 * `range`. The elements of `range` and `other` are compared using `predicate`.
 */
$ def search(range, other, predicate) {

    var it_range = range.inOperator()

    while not it_range.isEmpty() {
        let var it_search = it_range.copy()
        let var it_other = other.copy().inOperator()
        while not it_search.isEmpty() and not it_other.isEmpty() {
            if not predicate(it_search.next(), it_other.next()) {
                break
            }
            if it_other.isEmpty() {
                return it_range
            }
        }
        it_range.next()
    }

    return it_range
}

/**
 * Returns an iterator on the beginning of the first occurence of `n` consecutive
 * elements equals to `value` in `range`. The elements of `range` and `value`
 * must implement the `==` operator.
 */
$ def searchN(range, n, value) {

    var it_range = inOperator(range)

    while not it_range.isEmpty() {
        let var result = copy(it_range)
        let var count = 0
        while count < n {
            if it_range.isEmpty() {
                return ()
            }
            if not (value == it_range.next()) {
                break
            }
            ++count
        }
        if count == n {
            return result
        }
    }

    return ()
}

/**
 * Returns an iterator on the beginning of the first occurence of `n` consecutive
 * elements equals to `value` in `range`. The elements of `range` and `value`
 * are compared using `predicate`.
 */
$ def searchN(range, n, value, predicate) {

    var it_range = inOperator(range)

    while not it_range.isEmpty() {
        let var result = copy(it_range)
        let var count = 0
        while count < n {
            if it_range.isEmpty() {
                return ()
            }
            if not predicate(it_range.next(), value) {
                break
            }
            ++count
        }
        if count == n {
            return result
        }
    }

    return ()
}

/**
 * Returns `true` if the last elements of `range` are equal to the elements of
 * `other`; otherwise returns `false`. The elements of `range` and `other` must
 * implement the `==` operator.
 */
$ def endsWith(range, other) {
    return count(findEnd(range, copy(other))) == count(other)
}

/**
 * Returns `true` if the last elements of `range` are equal to the elements of
 * `other`; otherwise returns `false`. The elements of `range` and `other` are
 * compared using `predicate`.
 */
$ def endsWith(range, other, predicate) {
    return count(findEnd(range, copy(other), predicate)) == count(other)
}

/**
 * Returns `true` if the first elements of `range` are equal to the elements of
 * `other`; otherwise returns `false`. The elements of `range` and `other` must
 * implement the `==` operator.
 */
$ def startsWith(range, other) {

    var it_range = inOperator(range)
    var it_other = inOperator(other)

    while not it_other.isEmpty() {
        if it_range.isEmpty() {
            return false
        }
        if not (it_range.next() == it_other.next()) {
            return false
        }
    }

    return true
}

/**
 * Returns `true` if the first elements of `range` are equal to the elements of
 * `other`; otherwise returns `false`. The elements of `range` and `other` are
 * compared using `predicate`.
 */
$ def startsWith(range, other, predicate) {

    var it_range = inOperator(range)
    var it_other = inOperator(other)

    while not it_other.isEmpty() {
        if it_range.isEmpty() {
            return false
        }
        if not predicate(it_range.next(), it_other.next()) {
            return false
        }
    }

    return true
}

/**
 * Copy all elements in `other` to the corresponding element of `range`. Returns
 * an iterator on the next element of `range`.
 */
$ def copy(range, other) {

    var it_range = inOperator(range)

    for var element in other {
        it_range.next() := element
    }

    return it_range
}

/**
 * Copy all elements in `other` for which predicate returns `true` to the
 * corresponding element of `range`. Returns an iterator on the next element of
 * `range`.
 */
$ def copyIf(range, other, predicate) {

    var it_range = inOperator(range)

    for var element in other {
        if predicate(element) {
            it_range.next() := element
        }
    }

    return it_range
}

/**
 * Copy the `n` first elements in `other` to the corresponding element of `range`.
 * Returns an iterator on the next element of `range`.
 */
$ def copyN(range, n, other) {

    var it_range = inOperator(range)
    var count = 0

    for var element in other {
        if count < n {
            it_range.next() := element
            ++count
        } else {
            return it_range
        }
    }

    return it_range
}

/**
 * Copy all elements in `other` to the corresponding element of `range` starting
 * from the end. Returns a reversed iterator on the next element of `range`.
 */
$ def copyBackward(range, other) {

    var it_range = reversed(range)

    for var element in revesed(other) {
        it_range.next() := element
    }

    return it_range
}

// ...

/**
 * Returns an iterator on the elements of `range` in reversed order.
 */
$ def reversed(range) {

    var elements = []

    for var element in range {
        elements << element
    }

    for var i in elements.size()...0 {
        yield elements[i - 1]
    }
}

/**
 * Reverses the order of the elements in `range` and returns `range`.
 */
$ def reverse(range) {
    return range := reversed(copy(range))
}

/**
 * Returns an iterator starting to the `step`th next element in the object
 * provided by `range`.
 */
$ def next(range, step = 1) {
    var it_range = range.inOperator()
    for _ in 0...step {
        it_range.next()
    }
    return it_range
}

/**
 * Returns an iterator on each element contained in `range` starting from the
 * `from`th element and until the `to`th element. If `to` is not specified, the
 * object provided by the `range` parameter must provides a `size` method to get
 * the index of the last inserted value. If `step` is provided, elements are
 * skeeped to provides only elements with an index that is a multiple of `step`.
 */
$ def slice(range, from, to = none, step = 1) {

    var i = from
    var it_range = range.inOperator()

    if from {
        it_range = next(it_range, from)
    }

    if not defined to {
        to = range.size()
    }

    while i < to and not it_range.isEmpty() {
        yield it_range.value()
        it_range = next(it_range, step)
        i += step
    }
}

/**
 * Returns an iterator containging iterators with a counter starting from `from`
 * before each element contained in `range`.
 */
$ def enumerate(range, from = 0) {
    for var item in range {
        yield (from++, item)
    }
}

/**
 * Returns an empty iterator.
 */
$ def iterator() {
    return ()
}

/**
 * Returns an iterator on each parameter passed to the function.
 */
$ def iterator(first, ...) {
    yield first
    for var item in va_args {
        yield item
    }
}

/**
 * Returns an iterator containging, iterators with, for each object passed as
 * parameter, the value contained at the same position.
 */
$ def zip(range, ...) {
    var iterators = []
    for var next in iterator(range, *va_args) {
        iterators << next.inOperator()
    }
    var finished = 0
    while finished != iterators.size() {
        yield iterator(*def [...] {
            var count = 0
            for var iterator in iterators {
                yield iterator.next()
                count += iterator.isEmpty()
            }
            finished := count
        } ())
    }
}
