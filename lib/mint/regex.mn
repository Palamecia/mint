/**
 * @license
 * Copyright (c) 2025 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides tools to extend regular expressions capabilities.
 */

load mint.type

/**
 * This class provides a context to access match informations.
 * 
 * **Example**:
 * ```mn
 * if match = RegexMatch(re.match(str)) {
 *     first = match.capturedText(1)
 *     second = match.capturedText(2)
 * }
 * ```
 */
class RegexMatch {
	/**
	 * Creates a new context for `match`. If `match` is an empty match, `none`
	 * is returned.
	 */
	const def new(self, match) {
		if defined match {
			for let (str, pos, len) in match {
				self.matches << RegexMatch.Item(str, pos, len)
			}
			return self
		}
	}

	/**
	 * Returns the captured text at position `index`. The text returned for
	 * position `0` is the entire matched string. Each subsequent indexes
	 * returns a string that matched a (capturing) subexpression of the regexp.
	 * 
	 * **Example**:
	 * ```mn
	 * re = /Looking for (\S+) (and (\S+))/
	 * str = 'Looking for this and that'
	 * if match = RegexMatch(re.match(str)) {
	 *     match.capturedText(0)
	 *     // gives 'Looking for this and that'
	 *     match.capturedText(1)
	 *     // gives 'this'
	 *     match.capturedText(2)
	 *     // gives 'and that'
	 *     match.capturedText(3)
	 *     // gives 'that'
	 * }
	 * ```
	 */
	const def capturedText(self, index) {
		return self.matches[index].matchString
	}

	/**
	 * Returns the position of the captured text at position `index` in the
	 * original string. If `index` is `0`, the position of the whole match is
	 * returned.
	 * 
	 * **Example**:
	 * ```mn
	 * re = /Looking for (\S+) (and (\S+))/
	 * str = 'Looking for this and that'
	 * if match = RegexMatch(re.match(str)) {
	 *     match.position(0)
	 *     // gives 0
	 *     match.position(1)
	 *     // gives 12
	 *     match.position(2)
	 *     // gives 17
	 *     match.position(3)
	 *     // gives 21
	 * }
	 * ```
	 */
	const def position(self, index) {
		return self.matches[index].position
	}

	/**
	 * Returns the length of the captured text at position `index` in the original
	 * string. If `index` is `0`, the length of the whole match is returned.
	 * 
	 * **Example**:
	 * ```mn
	 * re = /Looking for (\S+) (and (\S+))/
	 * str = 'Looking for this and that'
	 * if match = RegexMatch(re.match(str)) {
	 *     match.length(0)
	 *     // gives 25
	 *     match.length(1)
	 *     // gives 4
	 *     match.length(2)
	 *     // gives 8
	 *     match.length(3)
	 *     // gives 4
	 * }
	 * ```
	 */
	const def length(self, index) {
		return self.matches[index].length
	}

	/**
	 * Returns the number of captured texts including the whole match.
	 * 
	 * **Example**:
	 * ```mn
	 * re = /Looking for (\S+) (and (\S+))/
	 * str = 'Looking for this and that'
	 * if match = RegexMatch(re.match(str)) {
	 *     match.count()
	 *     // gives 4
	 * }
	 * ```
	 */
	const def count(self) {
		return self.matches.size()
	}

	/// Internal match item structure.
	 - class Item {
		/**
		 * Creates a new match item with the givens `str` sub-string, `pos`
		 * position in text and `len` length.
		 */
		const def new(self, str, pos, len) {
			self.matchString = str
			self.position = pos
			self.length = len
			return self
		}

		/// Match item's sub-string.
		+ final matchString = ''

		/// Match item's position.
		+ final position = 0

		/// Match item's length.
		+ final length = 0
	}

	/// Internal match items.
	- final matches = []
}
