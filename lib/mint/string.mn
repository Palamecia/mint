/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides a set of functions to perform extra operations on strings.
 */

load mint.type
load mint.lang

/**
 * Returns the amount of bytes used to represent the string using the UTF-8
 * encoding (excluding the trailing `'\0'` character).
 */
$def [g_lib = lib('libmint-mint')] utf8ByteCount(self) {
	return g_lib.call('mint_utf8_byte_count', self)
}

/**
 * Returns a new string after removing any leading and trailing whitespaces.
 */
$def trim(self) {
	if isDefined(var from = self.indexOf(/\S/)) {
		var to = self.lastIndexOf(/\S/)
		if from == to {
			return self[from]
		}
		return self[from..to]
	}
	return ''
}

/**
 * Returns a new string after removing any leading whitespaces.
 */
$def ltrim(self) {
	if isDefined(var from = self.indexOf(/\S/)) {
		return self[from...self.size()]
	}
	return ''
}

/**
 * Returns a new string after removing any trailing whitespaces.
 */
$def rtrim(self) {
	if isDefined(var to = self.lastIndexOf(/\S/)) {
		if to == 0 {
			return self[to]
		}
		return self[0..to]
	}
	return ''
}

/**
 * Returns `true` if any character in `self` is ASCII; otherwise returns `false`.
 */
$def isAscii(const self) {
	for var c in self {
		if c !~ /[\x00-\x7F]/ {
			return false
		}
	}
	return true
}

/**
 * Returns `true` if any character in `self` a decimal digit or a letter; otherwise
 * returns `false`.
 */
$def [g_lib = lib('libmint-mint')] isAlnum(const self) {
	return g_lib.call('mint_string_is_alnum', self)
}

/**
 * Returns `true` if any character in `self` a letter; otherwise returns `false`.
 */
$def [g_lib = lib('libmint-mint')] isAlpha(const self) {
	return g_lib.call('mint_string_is_alpha', self)
}

/**
 * Returns `true` if any character in `self` a decimal digit; otherwise returns
 * `false`.
 */
$def [g_lib = lib('libmint-mint')] isDigit(const self) {
	return g_lib.call('mint_string_is_digit', self)
}

/**
 * Returns `true` if any character in `self` a decimal digit, a letter, or an
 * underscore (`'_'`); otherwise returns `false`.
 */
$def isWord(const self) {
	for var c in self {
		if c !~ /\w/ {
			return false
		}
	}
	return true
}

/**
 * Returns `true` if any character in `self` a blank character; otherwise
 * returns `false`.
 */
$def [g_lib = lib('libmint-mint')] isBlank(const self) {
	return g_lib.call('mint_string_is_blank', self)
}

/**
 * Returns `true` if any character in `self` a space character; otherwise
 * returns `false`.
 */
$def [g_lib = lib('libmint-mint')] isSpace(const self) {
	return g_lib.call('mint_string_is_space', self)
}

/**
 * Returns `true` if any character in `self` a control character; otherwise
 * returns `false`.
 */
$def [g_lib = lib('libmint-mint')] isCntrl(const self) {
	return g_lib.call('mint_string_is_cntrl', self)
}

/**
 * Returns `true` if any character in `self` has a graphical representation; 
 * otherwise returns `false`.
 */
$def [g_lib = lib('libmint-mint')] isGraph(const self) {
	return g_lib.call('mint_string_is_graph', self)
}

/**
 * Returns `true` if any character in `self` is printable; otherwise returns
 * `false`.
 */
$def [g_lib = lib('libmint-mint')] isPrint(const self) {
	return g_lib.call('mint_string_is_print', self)
}

/**
 * Returns `true` if any character in `self` is a punctuation character; otherwise
 * returns `false`.
 */
$def [g_lib = lib('libmint-mint')] isPunct(const self) {
	return g_lib.call('mint_string_is_punct', self)
}

/**
 * Returns `true` if any character in `self` is lowercase; otherwise
 * returns `false`.
 */
$def [g_lib = lib('libmint-mint')] isLower(const self) {
	return g_lib.call('mint_string_is_lower', self)
}

/**
 * Returns a new string after replacing each character by lowercase.
 */
$def [g_lib = lib('libmint-mint')] toLower(const self) {
	return g_lib.call('mint_string_to_lower', self)
}

/**
 * Returns `true` if any character in `self` is uppercase; otherwise
 * returns `false`.
 */
$def [g_lib = lib('libmint-mint')] isUpper(const self) {
	return g_lib.call('mint_string_is_upper', self)
}

/**
 * Returns a new string after replacing each character by uppercase.
 */
$def [g_lib = lib('libmint-mint')] toUpper(const self) {
	return g_lib.call('mint_string_to_upper', self)
}

/**
 * Returns `true` if `self` is capitalized (the first character of each word is
 * uppercase and remaining characters are lowercase); otherwise returns `false`.
 */
$def isCapitalized(const self) {
	
}

/**
 * Returns a new string after replacing each first character of each word by
 * uppercase and remaining characters by lowercase.
 */
$def toCapitalized(const self) {
	
}
