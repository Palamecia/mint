/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides functions to manage types.
 */

/**
 * Converts `value` to `number`. If `value` is already a `number`, it is 
 * returned; otherwise, if it provides a `toNumber` method, the result of the
 * method call is returned; otherwise, a built-in cast is performed.
 */
def [g_lib = lib('libmint-mint')] number(value = 0) {
	if typeof value == 'number' {
		return value
	}
	if defined value.toNumber {
		return value.toNumber()
	}
	return g_lib.call('mint_type_to_number', value)
}

/**
 * Fallback to {number} function when calling `toNumber` on an object without
 * the method.
 */
@const toNumber = number

/**
 * Converts `value` to `boolean`. If `value` is already a `boolean`, it is
 * returned; otherwise, if it provides a `toBoolean` method, the result of the
 * method call is returned; otherwise, a built-in cast is performed.
 */
def [g_lib = lib('libmint-mint')] boolean(value = false) {
	if typeof value == 'boolean' {
		return value
	}
	if defined value.toBoolean {
		return value.toBoolean()
	}
	return g_lib.call('mint_type_to_boolean', value)
}

/**
 * Fallback to {boolean} function when calling `toBoolean` on an object without
 * the method.
 */
@const toBoolean = boolean

/**
 * Converts `value` to `string`. If `value` is already a `string`, it is
 * returned; otherwise, if it provides a `toString` method, the result of the
 * method call is returned; otherwise, a built-in cast is performed.
 */
def [g_lib = lib('libmint-mint')] string(value = '') {
	if typeof value == 'string' {
		return value
	}
	if defined value.toString {
		return value.toString()
	}
	return g_lib.call('mint_type_to_string', value)
}

/**
 * Fallback to {string} function when calling `toString` on an object without
 * the method.
 */
@const toString = string

/**
 * Converts `value` to `regex`. If `value` is already a `regex`, it is
 * returned; otherwise, if it provides a `toRegex` method, the result of the
 * method call is returned; otherwise, a built-in cast is performed.
 */
def [g_lib = lib('libmint-mint')] regex(value = /.*/) {
	if typeof value == 'regex' {
		return value
	}
	if defined value.toRegex {
		return value.toRegex()
	}
	return g_lib.call('mint_type_to_regex', value)
}

/**
 * Fallback to {regex} function when calling `toRegex` on an object without
 * the method.
 */
@const toRegex = regex

/**
 * Converts `value` to `array`. If `value` is already a `array`, it is
 * returned; otherwise, if it provides a `toArray` method, the result of the
 * method call is returned; otherwise, a built-in cast is performed.
 */
def [g_lib = lib('libmint-mint')] array(value = []) {
	if typeof value == 'array' {
		return value
	}
	if defined value.toArray {
		return value.toArray()
	}
	return g_lib.call('mint_type_to_array', value)
}

/**
 * Fallback to {array} function when calling `toArray` on an object without
 * the method.
 */
@const toArray = array

/**
 * Converts `value` to `hash`. If `value` is already a `hash`, it is
 * returned; otherwise, if it provides a `toHash` method, the result of the
 * method call is returned; otherwise, a built-in cast is performed.
 */
def [g_lib = lib('libmint-mint')] hash(value = {}) {
	if typeof value == 'hash' {
		return value
	}
	if defined value.toHash {
		return value.toHash()
	}
	return g_lib.call('mint_type_to_hash', value)
}

/**
 * Fallback to {hash} function when calling `toHash` on an object without
 * the method.
 */
@const toHash = hash

/**
 * Creates a new instance of `type`. The `type` parameter can either be a cast
 * function of this module, a class or a type name. Extra arguments are passed
 * to the cast function or constructor called.
 * 
 * **Example**:
 * ```mint
 * other = new(typeof value)
 * ```
 * 
 * > **Note**
 * > If `type` is an object, the type of `type` is used instead.
 */
def new(type, ...) {

	switch type {
	case is number:
		return type(*va_args)
	case is boolean:
		return type(*va_args)
	case is string:
		return type(*va_args)
	case is regex:
		return type(*va_args)
	case is array:
		return type(*va_args)
	case is hash:
		return type(*va_args)
	}

	if typeof type != 'string' {
		type = typeof type
	}

	for var symbol in type.split('.') {
		if defined prototype {
			prototype = prototype.$(symbol)
		} else {
			prototype = $(symbol)
		}
	}

	return prototype(*va_args)
}

/**
 * This class provides informations about a member of a class.
 */
class MemberInfo {
	/**
	 * This enum describes the modifiers of the member.
	 */
	enum Flag {
		/// Empty flag for default created member.
		None = 0x00
		/// The member has const value.
		ConstValue = 0x01
		/// The member has const address.
		ConstAddress = 0x02
		/// The member is private.
		Private = 0x04
		/// The member is protected.
		Protected = 0x08
		/// The member is public only inside his owner class's package.
		Package = 0x10
		/// The member is global.
		Global = 0x20
	}

	/**
	 * Creates a new member information with the name given by `name` and the
	 * modifiers described by `flags`. The `flags` parameter must be a mask of
	 * values givent by {@see Flag}. Optionally, the owner class of the member
	 * can be provided using the `owner` parameter.
	 */
	const def new(self, name, flags = None, owner = none) {
		self.flags = flags
		self.name = name
		self.owner = owner
		return self
	}

	/**
	 * Returns the modifiers flags of the member as a mask of values described
	 * by {@see Flag}.
	 */
	const def getFlags(const self) {
		return self.flags
	}

	/**
	 * Returns the name of the member.
	 */
	const def getName(const self) {
		return self.name
	}

	/**
	 * Returns the owner class of the member.
	 */
	const def getOwner(const self) {
		return self.owner
	}

	/**
	 * Returns `true` if the member is public (declared using a `+` modifier);
	 * otherwise returns `false`.
	 */
	const def isPublic(const self) {
		return (self.flags & (MemberInfo.Flag.Private | MemberInfo.Flag.Protected | MemberInfo.Flag.Package)) == MemberInfo.Flag.None
	}

	/**
	 * Returns `true` if the member is public inside his owner class package
	 * (declared using a `~` modifier); otherwise returns `false`.
	 */
	const def isPackage(const self) {
		return self.flags & MemberInfo.Flag.Package
	}

	/**
	 * Returns `true` if the member is protected (declared using a `#` modifier);
	 * otherwise returns `false`.
	 */
	const def isProtected(const self) {
		return self.flags & MemberInfo.Flag.Protected
	}

	/**
	 * Returns `true` if the member is private (declared using a `-` modifier);
	 * otherwise returns `false`.
	 */
	const def isPrivate(const self) {
		return self.flags & MemberInfo.Flag.Private
	}

	/**
	 * Returns `true` if the member is const (declared using a `const` modifier);
	 * otherwise returns `false`.
	 */
	const def isConst(const self) {
		return (self.flags & (MemberInfo.Flag.ConstValue | MemberInfo.Flag.ConstAddress)) == (MemberInfo.Flag.ConstValue | MemberInfo.Flag.ConstAddress)
	}

	/**
	 * Returns `true` if the member has const value (declared using a `%` modifier);
	 * otherwise returns `false`.
	 */
	const def isConstValue(const self) {
		return self.flags & MemberInfo.Flag.ConstValue
	}

	/**
	 * Returns `true` if the member has const address (declared using a `$`
	 * modifier); otherwise returns `false`.
	 */
	const def isConstAddress(const self) {
		return self.flags & MemberInfo.Flag.ConstAddress
	}

	/**
	 * Returns `true` if the member is global (declared using a `@` modifier);
	 * otherwise returns `false`.
	 */
	const def isGlobal(const self) {
		return self.flags & MemberInfo.Flag.ConstAddress
	}

	/// Internal member flags.
	- final flags
	
	/// Internal member name.
	- final name
	
	/// Internal member owner.
	- final owner
}

/**
 * Returns the class of the `object` parameter or `none` if the object is not a
 * class instance.
 */
def [g_lib = lib('libmint-mint')] type(object) {
	return g_lib.call('mint_lang_get_type', object)
}

/**
 * Creates a new local class named `type` with the members described by `members`.
 * The `members` parameter must be an hash containing the members names mapped to
 * the default value. The key can also be an instance of {MemberInfo} to add
 * modifiers to the created member.
 * 
 * The created type is returned by the function. The returned value is the only
 * way to access the described type. The type name is not registered as a class
 * name and no standard instanciation is applicable.
 * 
 * By default, each created member is public and local. Members visibility can be
 * changed using the `private` and `protected` function. Global members can be
 * created using the `createGlobalMember` function.
 */
def [g_lib = lib('libmint-mint')] type(type, members) {
	return g_lib.call('mint_lang_create_type', type, [], members)
}

/**
 * Creates a new local class named `type` with the members described by `members`.
 * The `members` parameter must be an hash containing the members names mapped to
 * the default value. The key can also be an instance of {MemberInfo} to add
 * modifiers to the created member.
 * 
 * The `bases` parameter must be an array containing the base classes or base
 * classes name for the created type.
 * 
 * The created type is returned by the function. The returned value is the only
 * way to access the described type. The type name is not registered as a class
 * name and no standard instanciation is applicable.
 * 
 * By default, each created member is public and local. Members visibility can be
 * changed using the `private` and `protected` function. Global members can be
 * created using the `createGlobalMember` function.
 */
def [g_lib = lib('libmint-mint')] type(type, bases, members) {
	return g_lib.call('mint_lang_create_type', type, bases, members)
}

/**
 * Returns the informations about the `memberName` member of the `type` class
 * as an instance of {MemberInfo}. If the `type` parameter is not a class, an
 * object or has no member `memberName`, `none` is returned.
 */
def [g_lib = lib('libmint-mint')] getMemberInfo(type, memberName) {
	if info = g_lib.call('mint_type_get_member_info', type, memberName) {
		return MemberInfo(*info)
	}
}

/**
 * Creates a new global member named `memberName` for the type given by `type` if no
 * global member with the same name already exists.
 * 
 * If `value` is given, the member is initialized with the given value; otherwise
 * the member is initialized to `none`.
 * 
 * Returns `type` if the members was successfully created; otherwise returns
 * `none`.
 */
def [g_lib = lib('libmint-mint')] createGlobalMember(type, memberName, value = none) {
	return g_lib.call('mint_lang_create_object_global', type, memberName, value) ? type : none
}

/**
 * Returns `true` if the member named `memberName` is private in the class
 * `type`; otherwise returns `false`.
 * If no member can be found, `none` is returned.
 */
def [g_lib = lib('libmint-mint')] isMemberPrivate(type, memberName) {
	return g_lib.call('mint_type_is_member_private', type, memberName)
}

/**
 * Returns the value of `member` has a private member.
 */
def [g_lib = lib('libmint-mint')] private(member) {
	return MemberInfo(member, MemberInfo.Flag.Private)
}

/**
 * Returns `true` if the member named `memberName` is protected in the class
 * `type`; otherwise returns `false`.
 * If no member can be found, `none` is returned.
 */
def [g_lib = lib('libmint-mint')] isMemberProtected(type, memberName) {
	return g_lib.call('mint_type_is_member_protected', type, memberName)
}

/**
 * Returns the value of `member` has a private member.
 */
def [g_lib = lib('libmint-mint')] protected(member) {
	return MemberInfo(member, MemberInfo.Flag.Protected)
}

/**
 * Returns the owner class of the member named `memberName` in the class `type`.
 * If no owner class can be found, `none` is returned.
 */
def [g_lib = lib('libmint-mint')] getMemberOwner(type, memberName) {
	return g_lib.call('mint_type_get_member_owner', type, memberName)
}

/**
 * Returns `true` if the built-in copy operation can be applied to `type`; otherwise
 * returns `false`. The `type` parameter can either be a class or an object.
 */
def [g_lib = lib('libmint-mint')] isCopyable(type) {
	return g_lib.call('mint_type_is_copyable', type)
}

/**
 * Copy the value of `value`. If `value` provides a `clone` method, the result
 * of the method call is returned; otherwise a built-in copy operation is
 * performed.
 */
def [g_lib = lib('libmint-mint')] copy(value) {

	if defined value.clone {
		return value.clone()
	}

	return g_lib.call('mint_type_deep_copy', value)
}

/**
 * Returns `true` if `object` is a non instanciated class; otherwise returns `false`.
 */
def [g_lib = lib('libmint-mint')] isClass(object) {
	return g_lib.call('mint_type_is_class', object)
}

/**
 * Returns `true` if `object` is an instanciated object; otherwise returns `false`.
 */
def [g_lib = lib('libmint-mint')] isObject(object) {
	if defined object {
		return g_lib.call('mint_type_is_object', object)
	}
	return false
}

/**
 * Returns an array containing the base classes of `type`.
 */
def [g_lib = lib('libmint-mint')] super(type) {
	return g_lib.call('mint_type_super', type)
}

/**
 * Returns `true` if `base` is a base class of `type`; otherwise returns `false`.
 */
def [g_lib = lib('libmint-mint')] isBaseOf(base, type) {
	return g_lib.call('mint_type_is_base_of', base, type)
}

/**
 * Returns `true` if `base` is a base class of `type` or the same class; otherwise
 * returns `false`.
 */
def [g_lib = lib('libmint-mint')] isBaseOrSame(base, type) {
	return g_lib.call('mint_type_is_base_or_same', base, type)
}

/**
 * Returns `true` if `object` use the class of `type`; otherwise returns `false`.
 */
def [g_lib = lib('libmint-mint')] isInstanceOf(object, type) {
	return g_lib.call('mint_type_is_instance_of', object, type)
}
