/**
 * @license
 * Copyright (c) 2025 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides classes to manage data exchanges between network devices
 * using messages. The {Network.AsynchronousChannel} class manages asynchronous
 * exchanges and {Network.SynchronousChannel} manage synchronous exchanges.
 */
 
load network.serializers.text
load network.scheduler
load mint.lockguard
load mint.function
load system.thread

package Network {
	/**
	 * This class manages asynchronous exchanges between network devices. Intances
	 * of this class should be synchronized using the {Network.Scheduler} object.
	 */
	class AsynchronousChannel {
		/**
		 * Creates a new channel to manage asynchronous exchanges with the
		 * device described by `endpoint`. The `endpoint` parameter must
		 * implement the {Network.EndPoint} interface. The `Serializer` parameter
		 * must be a class implementing the {@module network.serializers} interface
		 * used to detect messages end and convert exchanged data into objects.
		 * 
		 * If the `endpoint` parameter is `none`, the channel is not created.
		 */
		const def new(self, endpoint, Serializer = Network.TextSerializer) {
			if self.endpoint = endpoint {
				self.endpoint.onState = Callback(self, self.notifyStateChanged)
				self.request = Network.AsynchronousChannel.DataQueue(Serializer)
				self.reply = Network.AsynchronousChannel.DataQueue(Serializer)
				return self
			}
		}

		/**
		 * Attempts to make a connection to the remote device. This method calls the
		 * {Network.EndPoint.connect} method of the underling object.
		 * 
		 * The channel is connected asynchronously when the connection is accepted
		 * by the peer. The connection will be finalized if the channel is watched
		 * (see {@see watch}) and {Network.Scheduler.synchronize} is called or if
		 * {Network.Scheduler.poll} is called with an instance of
		 * {Network.Scheduler.PollDescriptor} created for this object. On connection
		 * success, the {@see onOpen} method will be called.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		const def connect(self) {
			try {
				if not self.endpoint.connect() {
					return false
				}
			} catch e {
				if typeof e === 'Exception.SocketError' {
					raise Exception.SocketError(e.getErrno(), self)
				} else {
					raise e
				}
			}
			if self.endpoint.getState() is Network.EndPoint.State.Connected {
				self.onOpen(self)
			}
			return true
		}

		/**
		 * Attempts to bind the channel to the remote device. Returns `true` if
		 * binding succed; otherwise returns `false`. This method calls the
		 * {Network.EndPoint.bind} method of the underling object.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		const def bind(self) {
			try {
				if not self.endpoint.bind() {
					return false
				}
			} catch e {
				if typeof e === 'Exception.SocketError' {
					raise Exception.SocketError(e.getErrno(), self)
				} else {
					raise e
				}
			}
			return true
		}

		/**
		 * Tells the channel to listen for incoming connections on address
		 * configured by the end point. Returns `true` on success; otherwise
		 * returns `false`. This method calls the {Network.EndPoint.listen}
		 * method of the underling object. The {Network.ServerSerializer} should
		 * be used has serializer class to correctly handle incomming connections.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		const def listen(self) {
			try {
				if not self.endpoint.listen() {
					return false
				}
			} catch e {
				if typeof e === 'Exception.SocketError' {
					raise Exception.SocketError(e.getErrno(), self)
				} else {
					raise e
				}
			}
			return true
		}

		/**
		 * Adds the channel to the {Network.Scheduler} object. This method calls
		 * the {Network.Scheduler.watch} method.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		const def watch(self) {
			return Network.Scheduler.instance().watch(self)
		}

		/**
		 * Removes the channel from the {Network.Scheduler} object. This method
		 * calls the {Network.Scheduler.remove} method.
		 */
		const def unwatch(self) {
			return Network.Scheduler.instance().remove(self)
		}

		/**
		 * Pushes the message object described by `data` to the request queue.
		 * 
		 * The message is not sent directly but will be sent asynchronously when
		 * the underling end point will become writable if the channel is watched
		 * (see {@see watch}) and {Network.Scheduler.synchronize} is called or if
		 * {Network.Scheduler.poll} is called with an instance of
		 * {Network.Scheduler.PollDescriptor} created for this object.
		 * 
		 * The message object will then be converted to {Serializer.DataStream}
		 * using the serializer class and sent to the peer using the
		 * {Network.EndPoint.write} method of the underling end point.
		 */
		const def write(self, data) {
			return self.request.push(data)
		}

		/**
		 * Returns the next message object in the reply queue or `none` if no
		 * more message is available.
		 * 
		 * Messages are added asynchronously when the underling end point become
		 * readable if the channel is watched (see {@see watch}) and
		 * {Network.Scheduler.synchronize} is called or if
		 * {Network.Scheduler.poll} is called with an instance of
		 * {Network.Scheduler.PollDescriptor} created for this object.
		 * 
		 * The message objects are created from a {DataStreamSerializer.} using
		 * the serializer class. The serializer must receive enough data from the
		 * peer to construct a message using the {Network.EndPoint.read} method
		 * of the underling end point.
		 */
		const def read(self) {
			return self.reply.pop()
		}

		/**
		 * Returns the channel's socket as a number. This method calls the
		 * {Network.EndPoint.getSocket} method of the underling object.
		 */
		const def getSocket(const self) {
			return self.endpoint.getSocket()
		}

		/**
		 * Returns the underling end point object.
		 */
		const def getEndpoint(const self) {
			return self.endpoint
		}

		/**
		 * Closes the communication with the peer if the channel was connected
		 * using the {@see connect} method or stops listening if the channel was
		 * openned with {@see listen}. This method calls the {Network.EndPoint.close}
		 * method of the underling object. If the socket was successfully closed,
		 * {@see onClose} is called; otherwise the socket will be closed later.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		const def close(self) {
			try {
				var closed = self.endpoint.close()
			} catch e {
				if typeof e === 'Exception.SocketError' {
					raise Exception.SocketError(e.getErrno(), self)
				} else {
					raise e
				}
			}
			if closed {
				self.onClose(self)
			}
		}

		/**
		 * Returns the current state of the channel as a value of
		 * {Network.EndPoint.State}. This method calls the {Network.EndPoint.getState}
		 * method of the underling object.
		 */
		const def getState(const self) {
			return self.endpoint.getState()
		}

		/**
		 * Returns the events expected by the channel as mask of values from the
		 * {Network.Scheduler.PollEvent} enum.
		 */
		const def getEvents(const self) {
			const PollEvent = Network.Scheduler.PollEvent
			switch self.endpoint.getState() {
			case Network.EndPoint.State.Unknown:
			case Network.EndPoint.State.Disconnected:
			case Network.EndPoint.State.Closed:
			case Network.EndPoint.State.Error:
				return 0

			case Network.EndPoint.State.Connecting:
				return PollEvent.Write | PollEvent.Error

			case Network.EndPoint.State.Connected:
				return PollEvent.Read | PollEvent.Write | PollEvent.Close | PollEvent.Error

			case Network.EndPoint.State.Bound:
				return PollEvent.Read | PollEvent.Close | PollEvent.Error

			case Network.EndPoint.State.Listening:
				return PollEvent.Accept | PollEvent.Error

			case Network.EndPoint.State.Closing:
				return PollEvent.Close | PollEvent.Error
			}
		}

		/**
		 * Returns `true` if the channel performs I/O operations asynchronously
		 * (i.e. read or write data without blocking other channels); otherwise
		 * returns `false`. This method calls the {Network.EndPoint.isNonBlocking}
		 * method of the underling object.
		 */
		const def isNonBlocking(const self) {
			return self.endpoint.isNonBlocking()
		}

		/**
		 * Sets the non blocking mode of the channel to `enabled`. This method
		 * calls the {Network.EndPoint.setNonBlocking} method of the underling
		 * object. Returns `true` if the mode was successfully changed; otherwise
		 * returns `false`.
		 * 
		 * > [!WARNING]
		 * > Disable the non blocking mode on a channel can slow down any network
		 * > I/O operations of the application. Other channels will not be able
		 * > to perform I/O operations until the current operation's
		 * > acknowledgment by the peer.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		const def setNonBlocking(self, enabled) {
			try {
				return self.endpoint.setNonBlocking(enabled)
			} catch e {
				if typeof e === 'Exception.SocketError' {
					raise Exception.SocketError(e.getErrno(), self)
				} else {
					raise e
				}
			}
		}

		/**
		 * Notifies the channel that the underling end point's state is about
		 * to change. The `state` parameter is the new state that will be
		 * applied to the end point. This value is passed to a call to
		 * {@see onState}. The previous state can still be accessed with
		 * {@see getState} until the end of the method.
		 * 
		 * > [!WARNING]
		 * > Calling {@see Network.EndPoint.setState} in this method can result
		 * > in an infinite loop.
		 */
		const def notifyStateChanged(self, %state) {
			self.onState(self, state)
		}

		/**
		 * Notifies the channel that the underling end point is readable. The
		 * channel will then read all available data on the end point and send
		 * it to the serializer object. If one or more message can created with
		 * the data, {@see onMessage} is called.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		const def notifyReadable(self) {
			switch self.endpoint.getState() {
			case is Network.EndPoint.State.Connected:
			case is Network.EndPoint.State.Bound:
				try {
					var received = self.reply.read(self.endpoint)
				} catch e {
					if typeof e === 'Exception.SocketError' {
						raise Exception.SocketError(e.getErrno(), self)
					} else {
						raise e
					}
				}
				if received {
					self.onMessage(self)
				}
			}
		}

		/**
		 * Notifies the channel that the underling end point is writable. The
		 * channel will then send all available data from the serializer object
		 * to the end point. If the underling end point was connecting, the
		 * connection is finalized and {@see onOpen} is called.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		const def notifyWritable(self) {
			switch self.endpoint.getState() {
			case is Network.EndPoint.State.Connecting:
				try {
					var connected = self.endpoint.finalizeConnection()
				} catch e {
					if typeof e === 'Exception.SocketError' {
						raise Exception.SocketError(e.getErrno(), self)
					} else {
						raise e
					}
				}
				if connected {
					self.onOpen(self)
				}
			case is Network.EndPoint.State.Connected:
				try {
					self.request.write(self.endpoint)
				} catch e {
					if typeof e === 'Exception.SocketError' {
						raise Exception.SocketError(e.getErrno(), self)
					} else {
						raise e
					}
				}
			}
		}

		/**
		 * Notifies the listening channel that the underling end point has received
		 * a new connection request. The end point corrsponding to the new connection
		 * is pushed to the reply queue and {@see onMessage} is called.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		const def notifyConnection(self) {
			switch self.endpoint.getState() {
			case is Network.EndPoint.State.Listening:
				try {
					var accepted = self.reply.accept(self.endpoint)
				} catch e {
					if typeof e === 'Exception.SocketError' {
						raise Exception.SocketError(e.getErrno(), self)
					} else {
						raise e
					}
				}
				if accepted {
					self.onMessage(self)
				}
			}
		}

		/**
		 * Notifies the channel that the connection was closed by the peer. The
		 * connection is then closed using {Network.EndPoint.close} and
		 * {@see onClose} is called.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		const def notifyClosed(self) {
			try {
				var closed = self.endpoint.finalizeClose()
			} catch e {
				if typeof e === 'Exception.SocketError' {
					raise Exception.SocketError(e.getErrno(), self)
				} else {
					raise e
				}
			}
			if closed {
				self.onClose(self)
			}
		}

		/**
		 * Notifies the channel that the underling end point has received an error.
		 * The end point state is updated to {Network.EndPoint.State.Error} and
		 * an instance of {Exception.SocketError} is raised.
		 */
		const def notifyError(self) {
			self.endpoint.setState(Network.EndPoint.State.Error)
			raise Exception.SocketError(self)
		}

		/**
		 * This method can be rebinded to handle state change events. The `channel`
		 * parameter is the channel that received the event and the `state` parameter
		 * is the state that will be applied to the underling end point. The previous
		 * state can still be accessed with {@see getState} until the end of the method.
		 * 
		 * > [!WARNING]
		 * > Calling {Network.EndPoint.setState} in this method can result in an
		 * > infinite loop.
		 */
		var def onState(self, channel, %state) {}

		/**
		 * This method can be rebinded to handle message events. The `channel`
		 * parameter is the channel that received the event. The messages can
		 * be accessed using the {@see read} method.
		 * 
		 * > [!NOTE]
		 * > This method can be called for one or more messages and will not be
		 * > called until the underling end point receive more data.
		 * > The {@see read} method should then be called by this method until
		 * > `none` is returned.
		 */
		var def onMessage(self, channel) {}

		/**
		 * This method can be rebinded to handle connection success events. The
		 * `channel` parameter is the channel that received the event. This
		 * method can be used to begin exchanges with the peer.
		 */
		var def onOpen(self, channel) {}

		/**
		 * This method can be rebinded to handle close events. The `channel`
		 * parameter is the channel that received the event. This can be used
		 * to cleanup a context or try to reconnect when the connection was
		 * closed by the peer.
		 */
		var def onClose(self, channel) {}

		/**
		 * This class manage a data queue where data can be pushed as messages
		 * or as byte stream and converted unsing an object implementing the
		 * {@module network.serializers} interface.
		 * 
		 * Any method of this class is thread safe.
		 */
		- class DataQueue {
			/**
			 * Creates a new data queue. The `Serializer` parameter must be a
			 * class implementing the {@module network.serializers} interface
			 * used to detect messages end and convert data from or to objects.
			 */
			const def new(self, Serializer) {
				self.serializer = Serializer()
				self.mutex = System.Mutex()
				return self
			}

			/**
			 * Performs a read operation on `endpoint` and append received data
			 * to the queue.  Returns `true` if at least one message can be
			 * constructed from the data pushed into the queue; otherwise returns
			 * `false`.
			 */
			const def read(self, endpoint) {
				var lock = LockGuard(self.mutex)
				if self.serializer.read(endpoint) {
					return self.serializer.containsMessage()
				}
				return false
			}

			/**
			 * Performs a write operation on `endpoint` using the data available
			 * in the queue. Returns `true` if the data was successfully sent;
			 * otherwise returns `false`. After this call, the sent data should
			 * be removed from the queue.
			 */
			const def write(self, endpoint) {
				var lock = LockGuard(self.mutex)
				return self.serializer.write(endpoint)
			}

			/**
			 * Performs an accept operation on `endpoint` and push the new endpoint
			 * in the queue. Returns `true` if a new connection was successfully
			 * accepted; otherwise returns `false`.
			 */
			const def accept(self, endpoint) {
				var lock = LockGuard(self.mutex)
				return self.serializer.accept(endpoint)
			}

			/**
			 * Returns `true` if no more message can be retrieved from the queue;
			 * otherwise returns `false`.
			 */
			const def isEmpty(const self) {
				var lock = LockGuard(self.mutex)
				return not self.serializer.containsMessage()
			}

			/**
			 * Pushes the message object described by `data` into the queue. The
			 * `data` parameter must a message object that can be converted into
			 * a byte stream by the serializer object to be stored in the queue.
			 */
			const def push(self, data) {
				var lock = LockGuard(self.mutex)
				self.serializer.appendMessage(data)
			}

			/**
			 * Removes the oldest message from the queue and returns it. If no
			 * more message can be generated using the remaining byte stream,
			 * `none` is returned.
			 */
			const def pop(self) {
				var lock = LockGuard(self.mutex)
				if self.serializer.containsMessage() {
					return self.serializer.nextMessage()
				}
			}

			/// Internal serializer object.
			- final serializer = null
			
			/// Internal mutex.
			- final mutex = null
		}

		/// Internal underling end point.
		- final endpoint = null
		
		/// Internal {@see DataQueue} instance for requests waiting to be sent.
		- final request = null
		
		/// Internal {@see DataQueue} instance for replies waiting to be read.
		- final reply = null
	}

	/**
	 * This class manages synchronous exchanges between network devices.
	 */
	class SynchronousChannel {
		/**
		 * Creates a new channel to manage synchronous exchanges with the
		 * device described by `endpoint`. The `endpoint` parameter must
		 * implement the {Network.EndPoint} interface. The `Serializer` parameter
		 * must be a class implementing the {@module network.serializers} interface
		 * used to detect messages end and convert exchanged data into objects.
		 * 
		 * If the `endpoint` parameter is `none`, the channel is not created.
		 */
		const def new(self, endpoint, Serializer = Network.TextSerializer) {
			if self.endpoint = endpoint {
				self.request = Serializer()
				self.reply = Serializer()
				return self
			}
		}

		/**
		 * Attempts to make a connection to the remote device. Returns `true` if
		 * connection succed; otherwise returns `false`. This method calls the
		 * {Network.EndPoint.connect} method of the underling object.
		 * 
		 * If the method returns `false` and the underling end point enters the
		 * {Network.EndPoint.State.Connecting} state, the connection must be
		 * finalized later using the {@see finalizeConnection} method.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		const def connect(self) {
			try {
				if not self.endpoint.connect() {
					return false
				}
			} catch e {
				if typeof e === 'Exception.SocketError' {
					raise Exception.SocketError(e.getErrno(), self)
				} else {
					raise e
				}
			}
			if self.endpoint.getState() is Network.EndPoint.State.Connected {
				self.onOpen(self)
			}
			return true
		}

		/**
		 * Finalize the connection to the peer. Return `true` if the connection
		 * succed; otherwise returns `false`. This method calls the
		 * {Network.EndPoint.finalizeConnection} method of the underling end
		 * point.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		const def finalizeConnection(self) {
			try {
				return self.endpoint.finalizeConnection()
			} catch e {
				if typeof e === 'Exception.SocketError' {
					raise Exception.SocketError(e.getErrno(), self)
				} else {
					raise e
				}
			}
			return false
		}

		/**
		 * Attempts to bind the channel to the remote device. Returns `true` if
		 * binding succed; otherwise returns `false`. This method calls the
		 * {Network.EndPoint.bind} method of the underling object.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		const def bind(self) {
			try {
				if not self.endpoint.bind() {
					return false
				}
			} catch e {
				if typeof e === 'Exception.SocketError' {
					raise Exception.SocketError(e.getErrno(), self)
				} else {
					raise e
				}
			}
			return true
		}

		/**
		 * Tells the channel to listen for incoming connections on address
		 * configured by the end point. Returns `true` on success; otherwise
		 * returns `false`. This method calls the {Network.EndPoint.listen}
		 * method of the underling object. The {Network.ServerSerializer} should
		 * be used has serializer class to correctly handle incomming connections.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		const def listen(self) {
			try {
				if not self.endpoint.listen() {
					return false
				}
			} catch e {
				if typeof e === 'Exception.SocketError' {
					raise Exception.SocketError(e.getErrno(), self)
				} else {
					raise e
				}
			}
			return true
		}

		/**
		 * Writes the pending data to the underling end point. Returns `true`
		 * if the write operation succeed; otherwise returns `false` and the
		 * remaining data should be sent later.
		 * 
		 * The message object will be converted to {Serializer.DataStream} using
		 * the serializer class and sent to the peer using the
		 * {Network.EndPoint.write} method of the underling end point.
		 */
		const def write(self) {
			while not self.request.isEmpty() {
				if not self.request.write(self.endpoint) {
					return false
				}
			}
			return true
		}

		/**
		 * Writes the message object described by `data` to the underling end
		 * point. Returns `true` if the write operation succeed; otherwise
		 * returns `false` and the remaining data should be sent later using
		 * {@see write}.
		 * 
		 * The message object will be converted to {Serializer.DataStream} using
		 * the serializer class and sent to the peer using the
		 * {Network.EndPoint.write} method of the underling end point.
		 */
		const def write(self, data) {
			self.request.appendMessage(data)
			while not self.request.isEmpty() {
				if not self.request.write(self.endpoint) {
					return false
				}
			}
			return true
		}

		/**
		 * Returns the next message object in the reply queue or `none` if no
		 * more message is available.
		 * 
		 * The message objects are created from a {Serializer.DataStream} using
		 * the serializer class. The serializer must receive enough data from
		 * the peer to construct a message using the {Network.EndPoint.read}
		 * method of the underling end point.
		 */
		const def read(self) {
			if self.reply.containsMessage() {
				return self.reply.nextMessage()
			}
			while self.reply.read(self.endpoint) {
				if self.reply.containsMessage() {
					return self.reply.nextMessage()
				}
			}
		}

		/**
		 * Returns the channel's socket as a number. This method calls the
		 * {Network.EndPoint.getSocket} method of the underling object.
		 */
		const def getSocket(const self) {
			return self.endpoint.getSocket()
		}

		/**
		 * Returns the underling end point object.
		 */
		const def getEndpoint(const self) {
			return self.endpoint
		}

		/**
		 * Closes the communication with the peer if the channel was connected
		 * using the {@see connect} method or stops listening if the channel was
		 * openned with {@see listen}. This method calls the {Network.EndPoint.close}
		 * method of the underling object. Returns `true` if the socket was
		 * successfully closed; otherwise returns `false`.
		 * 
		 * If the method returns `false` and the underling end point enters the
		 * {Network.EndPoint.State.Closing} state, the close operation must be
		 * finalized later using the {@see finalizeClose} method.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		const def close(self) {
			try {
				return self.endpoint.close()
			} catch e {
				if typeof e === 'Exception.SocketError' {
					raise Exception.SocketError(e.getErrno(), self)
				} else {
					raise e
				}
			}
			return false
		}

		/**
		 * Finalize the close of the underling end point. Return `true` if the
		 * close succed; otherwise returns `false`. This method calls the
		 * {Network.EndPoint.finalizeClose} method of the underling end point.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		const def finalizeClose(self) {
			try {
				return self.endpoint.finalizeClose()
			} catch e {
				if typeof e === 'Exception.SocketError' {
					raise Exception.SocketError(e.getErrno(), self)
				} else {
					raise e
				}
			}
			return false
		}

		/**
		 * Returns the current state of the channel as a value of
		 * {Network.EndPoint.State}. This method calls the {Network.EndPoint.getState}
		 * method of the underling object.
		 */
		const def getState(const self) {
			return self.endpoint.getState()
		}

		/**
		 * Returns `true` if the channel performs I/O operations asynchronously
		 * (i.e. read or write data without blocking other channels); otherwise
		 * returns `false`. This method calls the {Network.EndPoint.isNonBlocking}
		 * method of the underling object.
		 */
		const def isNonBlocking(const self) {
			return self.endpoint.isNonBlocking()
		}

		/**
		 * Sets the non blocking mode of the channel to `enabled`. This method
		 * calls the {Network.EndPoint.setNonBlocking} method of the underling
		 * object. Returns `true` if the mode was successfully changed; otherwise
		 * returns `false`.
		 * 
		 * > [!WARNING]
		 * > Disable the non blocking mode on a channel can slow down any network
		 * > I/O operations of the application. Other channels will not be able
		 * > to perform I/O operations until the current operation's
		 * > acknowledgment by the peer.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		const def setNonBlocking(self, enabled) {
			try {
				return self.endpoint.setNonBlocking(enabled)
			} catch e {
				if typeof e === 'Exception.SocketError' {
					raise Exception.SocketError(e.getErrno(), self)
				} else {
					raise e
				}
			}
		}

		/// Internal underling end point.
		- final endpoint = null
		
		/// Internal serializer object for writing requests.
		- final request = null
		
		/// Internal serializer object for reading replies.
		- final reply = null
	}
}
