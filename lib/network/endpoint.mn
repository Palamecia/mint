package Network {

	/*!
	* @class Network.EndPoint
	*/
	class EndPoint {
		enum Status {
			unknown
			disconnected
			connecting
			connected
			listening
			closed
			error
		}

		enum IOStatus {
			io_success
			io_would_block
			io_closed
			io_error
		}

		def new(self) {
			self.status = EndPoint.Status.unknown
			return self
		}

		def read(self) {
			return none
		}
		
		def write(self, data) {
			return false
		}

		def connect(self) {
			return false
		}

		def listen(self) {
			return false
		}

		def close(self) {
			return none
		}

		def getSocket(const self) {
			return null
		}

		def getStatus(const self) {
			return self.status
		}

		def setStatus(self, %status) {
			if self.status != status {
				self.onStatusChanged(status)
				self.status = status
			}
		}

		def onStatusChanged(self, %status) {}

		def isNonBlocking(const self) {
			return false
		}

		def setNonBlocking(self, enabled) {
			return false
		}

		def finalizeConnexion(self) {
			return none
		}

		- status = null
	}

}
