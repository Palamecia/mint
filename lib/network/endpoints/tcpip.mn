load network.endpoint
load serializer.datastream

package Network {
	class TcpIp : EndPoint {
		def new(self, address, port) {
			self = EndPoint.new(self)
			self.address = address
			self.port = port
			return self
		}

		def connect(self) {

			socket = TcpIp.g_lib.call('mint_tcp_ip_socket_open')

			if defined socket {

				self.setSocket(socket)
				self.setStatus(EndPoint.Status.connecting)

				if TcpIp.g_lib.call('mint_tcp_ip_socket_connect', self.socket_fd, self.address, self.port) {
					self.setStatus(EndPoint.Status.connected)
					return true
				}
			}

			return false
		}

		def listen(self, backlog = 1024) {

			socket = TcpIp.g_lib.call('mint_tcp_ip_socket_open')

			if defined socket {

				self.setSocket(socket)

				if TcpIp.g_lib.call('mint_tcp_ip_socket_bind', self.socket_fd, self.address, self.port) {
					if TcpIp.g_lib.call('mint_tcp_ip_socket_listen', self.socket_fd, backlog) {
						self.setStatus(EndPoint.Status.listening)
						return true
					}
				}
			}

			return false
		}

		def accept(self) {

			(socket, address, port) := TcpIp.g_lib.call('mint_tcp_ip_socket_accept', self.socket_fd)

			if defined socket {
				client = TcpIp(address, port)
				client.setSocket(socket)
				client.setStatus(EndPoint.Status.connected)
				return client
			}
		}

		def write(self, data) {

			if typeof data != typeof DataStream {
				stream = DataStream()
				stream << data
			} else {
				stream = data
			}

			(status, count) := TcpIp.g_lib.call('mint_tcp_ip_socket_send', self.socket_fd, stream.getBuffer())

			switch status {
			case EndPoint.IOStatus.io_success:
				return (true, count)

			case EndPoint.IOStatus.io_would_block:
				return false

			case EndPoint.IOStatus.io_closed:
				self.setStatus(EndPoint.Status.closed)
				return false

			case EndPoint.IOStatus.io_error:
				self.setStatus(EndPoint.Status.error)
				return false
			}
		}

		def read(self) {

			stream = DataStream()

			switch TcpIp.g_lib.call('mint_tcp_ip_socket_recv', self.socket_fd, stream.getBuffer()) {
			case EndPoint.IOStatus.io_success:
				return stream

			case EndPoint.IOStatus.io_would_block:
				return none

			case EndPoint.IOStatus.io_closed:
				self.setStatus(EndPoint.Status.closed)
				return none

			case EndPoint.IOStatus.io_error:
				self.setStatus(EndPoint.Status.error)
				return none
			}
		}

		def close(self) {
			TcpIp.g_lib.call('mint_tcp_ip_socket_close', self.socket_fd)
			self.socket_fd = none
			self.socket_handle = none
			self.setStatus(EndPoint.Status.closed)
		}

		def getDescriptor(self) {
			return self.socket_fd
		}

		def getHandle(self) {
			return self.socket_handle
		}

		def getAddress(self) {
			return self.address
		}

		def getPort(self) {
			return self.port
		}

		def isNonBlocking(self) {
			return TcpIp.g_lib.call('mint_tcp_ip_socket_is_non_blocking', self.socket_fd)
		}

		def setNonBlocking(self, enabled) {
			return TcpIp.g_lib.call('mint_tcp_ip_socket_set_non_blocking', self.socket_fd, enabled)
		}

		def finalizeConnexion(self) {
			if TcpIp.g_lib.call('mint_tcp_ip_socket_finalize_connexion', self.socket_fd) {
				self.setStatus(EndPoint.Status.connected)
			}
		}

		- def setSocket(self, socket) {
			if defined self.socket_fd {
				self.close()
			}
			self.socket_fd = socket
			/// \todo setup handle
			self.socket_handle = null
		}

		- @g_lib = lib('libmint-network')
		- socket_handle = none
		- socket_fd = none
		- address = ''
		- port = 0
	}
}
