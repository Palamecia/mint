/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {Network.TcpIp} class which implement the
 * {Network.EndPoint} interface for the TCP/IP protocol.
 */

load mint.lang
load network.endpoints.ip
load serializer.datastream

package Network {
	
	/**
	 * This enum describes the options of a TCP endpoint's socket. The effetive
	 * value of the option code can depend on the current system.
	 */
	enum TcpSocketOption {
		/// TCP maximum segment size (number).
		MAXSEG
		/// Disable Nagle algorithm (boolean).
		NODELAY
	}

	/**
	 * This class provides an end point implementation for communication with a
	 * peer device using the TCP/IP protocol.
	 */
	class TcpIp : Network.IpEndPoint {
		/**
		 * Creates a new end point for the IP address descibed by `address` and
		 * the TCP port descibed by `port`.
		 */
		const def new(self, address, port) {
			if self = Network.IpEndPoint.new(self, address) {
				self.port = port
				return self
			}
		}

		/**
		 * Attempts to make a connection to the remote device. Returns `true` if
		 * connection succed or if the connection request was successfully sent
		 * and is waiting for acknowledgment; otherwise returns `false`.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		override const def connect(self) {
			var (socket, errno) = Network.TcpIp.g_lib.call('mint_tcp_ip_socket_open', self.getIpVersion())
			if errno {
			    self.setState(Network.EndPoint.State.Disconnected)
				raise Exception.SocketError(errno, self)
			}
			if defined socket {

				self.setSocket(socket)
				var status, errno = Network.TcpIp.g_lib.call('mint_ip_socket_connect', self.getSocket(), self.getAddress(), self.port, self.getIpVersion())

				switch status {
				case Network.EndPoint.IOStatus.IOSuccess:
					self.setState(Network.EndPoint.State.Connected)
					return true

				case Network.EndPoint.IOStatus.IOWouldBlock:
					self.setState(Network.EndPoint.State.Connecting)
					return true

				case Network.EndPoint.IOStatus.IOClosed:
					self.setState(Network.EndPoint.State.Closed)
					return false

				case Network.EndPoint.IOStatus.IOError:
					self.setState(Network.EndPoint.State.Error)
					raise Exception.SocketError(errno, self)
				}
			}

			return false
		}

		/**
		 * Returns all available data received from the peer as an instance of
		 * {Serializer.DataStream} or `none` if no data is available.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		override const def read(self) {

			var socket = self.getSocket()
			if not defined socket {
				return false
			}

			var stream = Serializer.DataStream()
			var (status, errno) = Network.TcpIp.g_lib.call('mint_tcp_ip_socket_recv', socket, stream.to_std_vector_uint8_t())

			switch status {
			case Network.EndPoint.IOStatus.IOSuccess:
				return stream

			case Network.EndPoint.IOStatus.IOWouldBlock:
				return none

			case Network.EndPoint.IOStatus.IOClosed:
				self.setState(Network.EndPoint.State.Closed)
				return none

			case Network.EndPoint.IOStatus.IOError:
				self.setState(Network.EndPoint.State.Error)
				raise Exception.SocketError(errno, self)
			}
		}

		/**
		 * Sends the data described by the `data` parameter to the peer. The
		 * `data` parameter must be an instance of {Serializer.DataStream}. Returns an
		 * iteraror containing `true` and the amount of sent data in bytes if
		 * the data was successfully sent to the peer; otherwise returns
		 * `false`.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		override const def write(self, data) {

			var socket = self.getSocket()
			if not defined socket {
				return false
			}

			var stream = Serializer.DataStream(data)
			var (status, value) = Network.TcpIp.g_lib.call('mint_tcp_ip_socket_send', socket, stream.to_std_vector_uint8_t())

			switch status {
			case Network.EndPoint.IOStatus.IOSuccess:
				return (true, value)

			case Network.EndPoint.IOStatus.IOWouldBlock:
				return false

			case Network.EndPoint.IOStatus.IOClosed:
				self.setState(Network.EndPoint.State.Closed)
				return false

			case Network.EndPoint.IOStatus.IOError:
				self.setState(Network.EndPoint.State.Error)
				raise Exception.SocketError(value, self)
			}
		}

		/**
		 * Tells the end point to listen for incoming connections. Returns `true`
		 * on success; otherwise returns `false`. The `backlog` parameter provides
		 * the maximum number of waiting connection allowed before new connections
		 * get rejected.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		override const def listen(self, backlog = 1024) {
			var (socket, errno) = Network.TcpIp.g_lib.call('mint_tcp_ip_socket_open', self.getIpVersion())
			if errno {
			    self.setState(Network.EndPoint.State.Disconnected)
				raise Exception.SocketError(errno, self)
			}
			if defined socket {

				self.setSocket(socket)

				if errno = Network.TcpIp.g_lib.call('mint_ip_socket_bind', self.getSocket(), self.getAddress(), self.port, self.getIpVersion()) {
			        self.setState(Network.EndPoint.State.Disconnected)
					raise Exception.SocketError(errno, self)
				}

				if errno = Network.TcpIp.g_lib.call('mint_ip_socket_listen', self.getSocket(), backlog) {
			        self.setState(Network.EndPoint.State.Disconnected)
					raise Exception.SocketError(errno, self)
				}

				self.setState(Network.EndPoint.State.Listening)
				return true
			}

			return false
		}

		/**
		 * Returns a new end point initialized for the next waiting connection
		 * if any; otherwise returns `none`. The waiting connection will then
		 * be accepted and dequeued.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		override const def accept(self) {
			var socket = self.getSocket()
			if not defined socket {
				return none
			}
			var (clientSocket, address, port, errno) = Network.TcpIp.g_lib.call('mint_ip_socket_accept', socket)
			if errno {
				raise Exception.SocketError(errno, self)
			}
			if defined clientSocket {
				var client = Network.TcpIp(address, port)
				client.setSocket(clientSocket)
				client.setState(Network.EndPoint.State.Connected)
				return client
			}
		}

		/**
		 * Returns the value of the endpoint's socket option described by
		 * `option`. The `option` parameter must be a value of the
		 * {Network.TcpSocketOption}, {Network.IpV4SocketOption},
		 * {Network.IpV6SocketOption}, {Network.IpSocketOption} or
		 * {Network.SocketOption} enum. If the option is not supported by
		 * the system, `none` is returned;
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		override const def getSocketOption(self, %option) {
			if defined option and var socket = self.getSocket() {
				switch option {
					case is Network.TcpSocketOption.MAXSEG:
						var (value, errno) = Network.EndPoint.g_lib.call('mint_socket_get_tcp_option_number', socket, option)
						if errno {
							raise Exception.SocketError(errno, self)
						}
						return value
					case is Network.TcpSocketOption.NODELAY:
						var (value, errno) = Network.EndPoint.g_lib.call('mint_socket_get_tcp_option_boolean', socket, option)
						if errno {
							raise Exception.SocketError(errno, self)
						}
						return value
				}
				return Network.IpEndPoint.getSocketOption(self, option, value)
			}
		}

		/**
		 * Sets the value of the endpoint's socket option described by `option`
		 * to `value`. The `option` parameter must be a value of the
		 * {Network.TcpSocketOption}, {Network.IpV4SocketOption},
		 * {Network.IpV6SocketOption}, {Network.IpSocketOption} or
		 * {Network.SocketOption} enum. Returns `true` if the option is supported
		 * by the system; otherwise returns `false`.
		 * 
		 * An instance of {Exception.SocketError} is raised on error.
		 */
		override const def setSocketOption(self, %option, value) {
			if defined option and var socket = self.getSocket() {
				switch (option) {
					case is Network.TcpSocketOption.MAXSEG:
					if var errno = Network.EndPoint.g_lib.call('mint_socket_set_tcp_option_number', socket, option, value) {
						raise Exception.SocketError(errno, self)
					}
					return true
					case is Network.TcpSocketOption.NODELAY:
					if var errno = Network.EndPoint.g_lib.call('mint_socket_set_tcp_option_boolean', socket, option, value) {
						raise Exception.SocketError(errno, self)
					}
					return true
				}
				return Network.IpEndPoint.setSocketOption(self, option, value)
			}
			return false
		}

		/**
		 * Returns the TCP port number used by the end point.
		 */
		const def getPort(const self) {
			return self.port
		}

        /// Global library handle.
		- @g_lib = lib('libmint-network')

        /// Internal TCP port.
		- final port = 0
	}
	
	lib('libmint-network').call('mint_socket_setup_tcp_options', Network.TcpSocketOption)

}
