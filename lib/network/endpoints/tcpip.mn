/**
 * This module provides the {Network.TcpIp} class which implement the
 * {Network.EndPoint} interface for the TCP/IP protocol.
 */

load mint.lang
load network.endpoints.ip
load serializer.datastream

package Network {
	/**
	 * This class provides an end point implementation for communication with a
	 * peer device using the TCP/IP protocol.
	 */
	class TcpIp : Network.IpEndPoint {
		/**
		 * Creates a new end point for the IP address descibed by `address` and
		 * the TCP port descibed by `port`.
		 */
		const def new(self, address, port) {
			if self = Network.IpEndPoint.new(self, address) {
				self.port = port
				return self
			}
		}

		/**
		 * Attempts to make a connection to the remote device. Returns `true` if
		 * connection succed or if the connection request was successfully sent
		 * and is waiting for acknowledgment; otherwise returns `false`.
		 * 
		 * An instance of {SocketError} is raised on error.
		 */
		const def connect(self) {
			var socket, var errno = Network.TcpIp.g_lib.call('mint_tcp_ip_socket_open')
			if errno {
			    self.setState(EndPoint.State.Disconnected)
				raise SocketError(errno, self)
			}
			if defined socket {

				self.setSocket(socket)
				self.setState(EndPoint.State.Connecting)

				if errno = Network.TcpIp.g_lib.call('mint_tcp_ip_socket_connect', self.getSocket(), self.getAddress(), self.port, self.getIpVersion()) {
			        self.setState(EndPoint.State.Disconnected)
					raise SocketError(errno, self)
				}

				self.setState(EndPoint.State.Connected)
				return true
			}

			return false
		}

		/**
		 * Returns all available data received from the peer as an instance of
		 * {DataStream} or `none` if no data is available.
		 * 
		 * An instance of {SocketError} is raised on error.
		 */
		const def read(self) {

			stream = DataStream()
			status, errno = TcpIp.g_lib.call('mint_tcp_ip_socket_recv', self.getSocket(), stream.to_std_vector_uint8_t())

			switch status {
			case EndPoint.IOStatus.IOSuccess:
				return stream

			case EndPoint.IOStatus.IOWouldBlock:
				return none

			case EndPoint.IOStatus.IOClosed:
				self.setState(EndPoint.State.Closed)
				return none

			case EndPoint.IOStatus.IOError:
				self.setState(EndPoint.State.Error)
				raise SocketError(errno, self)
			}
		}

		/**
		 * Sends the data described by the `data` parameter to the peer. The
		 * `data` parameter must be an instance of {DataStream}. Returns `true`
		 * if the data was successfully sent to the peer; otherwise returns
		 * `false`.
		 * 
		 * An instance of {SocketError} is raised on error.
		 */
		const def write(self, data) {

			if typeof data != typeof DataStream {
				stream = DataStream()
				stream << data
			} else {
				stream = data
			}

			status, value = TcpIp.g_lib.call('mint_tcp_ip_socket_send', self.getSocket(), stream.to_std_vector_uint8_t())

			switch status {
			case EndPoint.IOStatus.IOSuccess:
				return (true, value)

			case EndPoint.IOStatus.IOWouldBlock:
				return false

			case EndPoint.IOStatus.IOClosed:
				self.setState(EndPoint.State.Closed)
				return false

			case EndPoint.IOStatus.IOError:
				self.setState(EndPoint.State.Error)
				raise SocketError(value, self)
			}
		}

		/**
		 * Tells the end point to listen for incoming connections. Returns `true`
		 * on success; otherwise returns `false`. The `backlog` parameter provides
		 * the maximum number of waiting connection allowed before new connections
		 * get rejected.
		 * 
		 * An instance of {SocketError} is raised on error.
		 */
		const def listen(self, backlog = 1024) {
			var socket, var errno = Network.TcpIp.g_lib.call('mint_tcp_ip_socket_open')
			if errno {
			    self.setState(EndPoint.State.Disconnected)
				raise SocketError(errno, self)
			}
			if defined socket {

				self.setSocket(socket)

				if errno = Network.TcpIp.g_lib.call('mint_tcp_ip_socket_bind', self.getSocket(), self.getAddress(), self.port, self.getIpVersion()) {
			        self.setState(EndPoint.State.Disconnected)
					raise SocketError(errno, self)
				}

				if errno = Network.TcpIp.g_lib.call('mint_tcp_ip_socket_listen', self.getSocket(), backlog) {
			        self.setState(EndPoint.State.Disconnected)
					raise SocketError(errno, self)
				}

				self.setState(EndPoint.State.Listening)
				return true
			}

			return false
		}

		/**
		 * Returns a new end point initialized for the next waiting connection
		 * if any; otherwise returns `none`. The waiting connection will then
		 * be accepted and dequeued.
		 * 
		 * An instance of {SocketError} is raised on error.
		 */
		const def accept(self) {
			var errno, var socket, var address, var port = Network.TcpIp.g_lib.call('mint_tcp_ip_socket_accept', self.getSocket())
			if errno {
				raise SocketError(errno, self)
			}
			if defined socket {
				var client = TcpIp(address, port)
				client.setSocket(socket)
				client.setState(EndPoint.State.Connected)
				return client
			}
		}

		/**
		 * Returns the TCP port number used by the end point.
		 */
		const def getPort(const self) {
			return self.port
		}

        /// Global library handle.
		- @g_lib = lib('libmint-network')

        /// Internal TCP port.
		- port = 0
	}
}
