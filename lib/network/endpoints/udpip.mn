load mint.lang
load network.endpoint
load exception.system
load serializer.datastream

package Network {
	class UdpIp : EndPoint {
		def new(self, address, port) {
			self = EndPoint.new(self)
			self.address = address
			self.port = port
			return self
		}

		def open(self) {
			if isDefined(socket = UdpIp.g_lib.call('mint_udp_ip_socket_open')) {

				self.setSocket(socket)
				self.setStatus(EndPoint.Status.connected)
				return true
			}

			return false
		}

		def connect(self) {
			if isDefined(socket = UdpIp.g_lib.call('mint_udp_ip_socket_open')) {

				self.setSocket(socket)
				self.setStatus(EndPoint.Status.connecting)

				if UdpIp.g_lib.call('mint_udp_ip_socket_connect', self.socket, self.address, self.port) {
					self.setStatus(EndPoint.Status.connected)
					return true
				}
			}

			return false
		}

		def listen(self, backlog = 1024) {

			socket = UdpIp.g_lib.call('mint_udp_ip_socket_open')

			if defined socket {

				self.setSocket(socket)

				if UdpIp.g_lib.call('mint_udp_ip_socket_bind', self.socket, self.address, self.port) {
					self.setStatus(EndPoint.Status.listening)
					return true
				}
			}

			return false
		}

		def write(self, data) {

			if typeof data != typeof DataStream {
				stream = DataStream()
				stream << data
			} else {
				stream = data
			}

			status, value = UdpIp.g_lib.call('mint_udp_ip_socket_send', self.socket, stream.to_std_vector_uint8_t())

			switch status {
			case EndPoint.IOStatus.io_success:
				return (true, value)

			case EndPoint.IOStatus.io_would_block:
				return false

			case EndPoint.IOStatus.io_closed:
				self.setStatus(EndPoint.Status.closed)
				return false

			case EndPoint.IOStatus.io_error:
				self.setStatus(EndPoint.Status.error)
				raise SystemError(value, self)
			}
		}

		def read(self) {

			stream = DataStream()
			status, errno = UdpIp.g_lib.call('mint_udp_ip_socket_recv', self.socket, stream.to_std_vector_uint8_t())

			switch status {
			case EndPoint.IOStatus.io_success:
				return stream

			case EndPoint.IOStatus.io_would_block:
				return none

			case EndPoint.IOStatus.io_closed:
				self.setStatus(EndPoint.Status.closed)
				return none

			case EndPoint.IOStatus.io_error:
				self.setStatus(EndPoint.Status.error)
				raise SystemError(errno, self)
			}
		}

		def close(self) {
			if self.socket {
				UdpIp.g_lib.call('mint_udp_ip_socket_close', self.socket)
				self.setStatus(EndPoint.Status.closed)
				self.socket = none
			}
		}

		def getSocket(const self) {
			return self.socket
		}

		def getAddress(const self) {
			return self.address
		}

		def getPort(const self) {
			return self.port
		}

		def isNonBlocking(const self) {
			return UdpIp.g_lib.call('mint_udp_ip_socket_is_non_blocking', self.socket)
		}

		def setNonBlocking(self, enabled) {
			return UdpIp.g_lib.call('mint_udp_ip_socket_set_non_blocking', self.socket, enabled)
		}

		def finalizeConnexion(self) {
			if UdpIp.g_lib.call('mint_udp_ip_socket_finalize_connexion', self.socket) {
				self.setStatus(EndPoint.Status.connected)
			}
		}

		- def setSocket(self, socket) {
			self.close()
			self.socket = socket
		}

		- @g_lib = lib('libmint-network')
		- socket = none
		- address = ''
		- port = 0
	}
}
