/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 */

load network.channel
load network.protocols.http.message
load network.protocols.http.serializer

package Network {
	package Http {

		class Client {
			def new(self, endpoint, Channel = Network.AsynchronousChannel) {
				self.channel = Channel(endpoint, Network.Http.Serializer)
				self.channel.onState = def [self] (_, channel, %state) {
					self.onState(self, state)
				}
				self.channel.onMessage = def [self] (_, channel) {
					self.onMessage(self)
				}
				self.channel.onOpen = def [self] (_, channel) {
					self.onOpen(self)
				}
				self.channel.onClose = def [self] (_, channel) {
					self.onClose(self)
				}
				return self
			}

			def connect(self) {
				return self.channel.connect()
			}

			def watch(self) {
				return Network.Scheduler.instance().watch(self)
			}

			def unwatch(self) {
				return Network.Scheduler.instance().remove(self)
			}

			def write(self, data) {
				switch typeof data {
				case 'Network.Http.Message':
					return self.channel.write(data)
				default:
					var message = Network.Http.Message()
					message.setMethode(self.methode, self.target)
					for name, value in self.attributes {
						message.setAttribute(name, value)
					}
					message.setBody(data)
					return self.channel.write(message)
				}
			}

			def read(self) {
				return self.channel.read()
			}

			def getSocket(const self) {
				return self.channel.getSocket()
			}

			def close(self) {
				return self.channel.close()
			}

			def getState(const self) {
				return self.channel.getState()
			}

			def getEvents(const self) {
				return self.channel.getEvents()
			}

			def isNonBlocking(const self) {
				return self.channel.isNonBlocking()
			}

			def setNonBlocking(self, enabled) {
				return self.channel.setNonBlocking(enabled)
			}

			def getDefaultMethode(const self) {
				return self.methode
			}

			def setDefaultMethode(self, methode) {
				self.methode = methode
			}

			def getDefaultTarget(const self) {
				return self.target
			}

			def setDefaultTarget(self, target) {
				self.target = target
			}

			def getDefaultAttribute(const self, name) {
				return self.attributes[name]
			}

			def setDefaultAttribute(self, name, value) {
				self.attributes[name] = value
			}

			def notifyReadable(self) {
				self.channel.notifyReadable()
			}

			def notifyWritable(self) {
				self.channel.notifyWritable()
			}

			def notifyConnection(self) {
				self.channel.notifyConnection()
			}

			def notifyClosed(self) {
				self.channel.notifyClosed()
			}

			def notifyError(self) {
				self.channel.notifyError()
			}

			var def onState(self, channel, %state) {}
			var def onMessage(self, channel) {}
			var def onOpen(self, channel) {}
			var def onClose(self, channel) {}

			- channel = null
			- methode = 'POST'
			- target = '/'
			- attributes = {}
		}

	}
}
