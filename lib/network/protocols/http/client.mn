/**
 * @license
 * Copyright (c) 2025 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {Network.Http.Client} class which implement the
 * client side of the HTTP protocol.
 */

load network.channel
load network.protocols.http.message
load network.protocols.http.serializer

package Network {
	package Http {
		/**
		 * This class provides an implementation of the client side of the HTTP
		 * protocol. It can be used with the {Network.Scheduler} class where a
		 * channel is expected.
		 */
		class Client {
			/**
			 * Creates a new client context for the given `endpoint` server. The
			 * `endpoint` parameter must implement the {Network.EndPoint}
			 * interface.
			 * 
			 * The `Channel` parameter can provide a class that will be used to
			 * create the underling channel.
			 */
			const def new(self, endpoint, Channel = Network.AsynchronousChannel) {
				self.channel = Channel(endpoint, Network.Http.Serializer)
				self.channel.onState = def [self] (_, channel, %state) {
					self.onState(self, state)
				}
				self.channel.onMessage = def [self] (_, channel) {
					self.onMessage(self)
				}
				self.channel.onOpen = def [self] (_, channel) {
					self.onOpen(self)
				}
				self.channel.onClose = def [self] (_, channel) {
					self.onClose(self)
				}
				return self
			}

			/**
			 * Attempts to make a connection to the remote device. This method calls the
			 * {Network.AsynchronousChannel.connect} method of the underling channel.
			 * 
			 * An instance of {Exception.SocketError} is raised on error.
			 */
			const def connect(self) {
				try {
					return self.channel.connect()
				} catch e {
					if typeof e === 'Exception.SocketError' {
						raise Exception.SocketError(e.getErrno(), self)
					} else {
						raise e
					}
				}
			}

			/**
			 * Adds the channel to the {Network.Scheduler} object. This method calls
			 * the {Network.Scheduler.watch} method.
			 * 
			 * An instance of {Exception.SocketError} is raised on error.
			 */
			const def watch(self) {
				try {
					return Network.Scheduler.instance().watch(self)
				} catch e {
					if typeof e === 'Exception.SocketError' {
						raise Exception.SocketError(e.getErrno(), self)
					} else {
						raise e
					}
				}
			}

			/**
			 * Removes the channel from the {Network.Scheduler} object. This method
			 * calls the {Network.Scheduler.remove} method.
			 */
			const def unwatch(self) {
				return Network.Scheduler.instance().remove(self)
			}

			/**
			 * Pushes the message object described by `data` to the request queue.
			 * This method calls the {Network.AsynchronousChannel.write} method
			 * of the underling channel.
			 * 
			 * The `data` parameter can be an instance of {Network.Http.Message};
			 * otherwise an instance will be created using the default method
			 * ({@see setDefaultMethod}), target ({@see setDefaultTarget}) and
			 * attributes ({@see setDefaultAttributes}) of the context.
			 */
			const def write(self, data) {
				switch typeof data {
				case 'Network.Http.Message':
					return self.channel.write(data)
				default:
					var message = Network.Http.Message()
					message.setMethod(self.method, self.target)
					for let (name, value) in self.attributes {
						message.setAttribute(name, value)
					}
					message.setBody(data)
					return self.channel.write(message)
				}
			}

			/**
			 * Returns the next message object in the reply queue or `none` if no
			 * more message is available. This method calls the
			 * {Network.AsynchronousChannel.read} method of the underling channel.
			 */
			const def read(self) {
				return self.channel.read()
			}

			/**
			 * Returns the context's socket as a number. This method calls the
			 * {Network.AsynchronousChannel.getSocket} method of the underling
			 * channel.
			 */
			const def getSocket(const self) {
				return self.channel.getSocket()
			}

			/**
			 * Returns the underling end point object. This method calls the
			 * {Network.AsynchronousChannel.getEndpoint} method of the underling
			 * channel.
			 */
			const def getEndpoint(const self) {
				return self.channel.getEndpoint()
			}

			/**
			 * Closes the communication with the peer if the context was connected
			 * using the {@see connect}. This method calls the
			 * {Network.AsynchronousChannel.close} method of the underling channel.
			 * If the socket was successfully closed, {@see onClose} is called;
			 * otherwise the socket will be closed later.
			 * 
			 * An instance of {Exception.SocketError} is raised on error.
			 */
			const def close(self) {
				try {
					return self.channel.close()
				} catch e {
					if typeof e === 'Exception.SocketError' {
						raise Exception.SocketError(e.getErrno(), self)
					} else {
						raise e
					}
				}
			}

			/**
			 * Returns the current state of the context as a value of
			 * {Network.EndPoint.State}. This method calls the
			 * {Network.AsynchronousChannel.getState} method of the underling
			 * channel.
			 */
			const def getState(const self) {
				return self.channel.getState()
			}

			/**
			 * Returns the events expected by the context as mask of values from the
			 * {Network.Scheduler.PollEvent} enum. This method calls the
			 * {Network.AsynchronousChannel.getEvents} method of the underling
			 * channel.
			 */
			const def getEvents(const self) {
				return self.channel.getEvents()
			}

			/**
			 * Returns `true` if the channel performs I/O operations asynchronously
			 * (i.e. read or write data without blocking other channels); otherwise
			 * returns `false`. This method calls the
			 * {Network.AsynchronousChannel.isNonBlocking} method of the underling
			 * channel.
			 */
			const def isNonBlocking(const self) {
				return self.channel.isNonBlocking()
			}

			/**
			 * Sets the non blocking mode of the channel to `enabled`. This method
			 * calls the {Network.AsynchronousChannel.setNonBlocking} method of
			 * the underling channel. Returns `true` if the mode was successfully
			 * changed; otherwise returns `false`.
			 * 
			 * > [!WARNING]
			 * > Disable the non blocking mode on a context can slow down any network
			 * > I/O operations of the application. Other channels will not be able
			 * > to perform I/O operations until the current operation's
			 * > acknowledgment by the peer.
			 * 
			 * An instance of {Exception.SocketError} is raised on error.
			 */
			const def setNonBlocking(self, enabled) {
				try {
					return self.channel.setNonBlocking(enabled)
				} catch e {
					if typeof e === 'Exception.SocketError' {
						raise Exception.SocketError(e.getErrno(), self)
					} else {
						raise e
					}
				}
			}

			/**
			 * Returns the HTTP method used by default created messages of the
			 * contexte.
			 */
			const def getDefaultMethod(const self) {
				return self.method
			}

			/**
			 * Sets the method used by default created messages to `method`. The
			 * method will de passed to the {Network.Http.Message.setMethod} of
			 * the default created messages.
			 */
			const def setDefaultMethod(self, method) {
				self.method = method
			}

			/**
			 * Returns the target URI used by default created messages of the
			 * contexte.
			 */
			const def getDefaultTarget(const self) {
				return self.target
			}

			/**
			 * Sets the target URI used by default created messages to `target`.
			 * The URI will be passed to the {Network.Http.Message.setMethod} of
			 * the default created messages.
			 */
			const def setDefaultTarget(self, target) {
				self.target = target
			}

			/**
			 * Returns the attributes  used by default created messages of the
			 * contexte as a hash.
			 */
			const def getDefaultAttributes(const self) {
				return self.attributes
			}

			/**
			 * Returns the value for the attribute `name` used by default
			 * created messages of the contexte.
			 */
			const def getDefaultAttribute(const self, name) {
				return self.attributes[name]
			}

			/**
			 * Sets the attributes used by default created messages to `attributes`.
			 * The attributes will be passed to the {Network.Http.Message.setAttribute}
			 * of the default created messages.
			 */
			const def setDefaultAttributes(self, attributes) {
				self.attributes = attributes.toHash()
			}

			/**
			 * Sets the attribute `name` used by default created messages to `value`.
			 * The attributes will be passed to the {Network.Http.Message.setAttribute}
			 * of the default created messages.
			 */
			const def setDefaultAttribute(self, name, value) {
				self.attributes[name] = value
			}

			/**
			 * Removes the attribute `name` used by default created messages.
			 * The remaining attributes will be passed to the {Network.Http.Message.setAttribute}
			 * of the default created messages.
			 */
			const def removeDefaultAttribute(self, name) {
				self.attributes.remove(name)
			}

			/**
			 * Notifies the context that the underling channel is readable. This
			 * method calls the {Network.AsynchronousChannel.notifyReadable}
			 * method of the underling channel.
			 * 
			 * An instance of {Exception.SocketError} is raised on error.
			 */
			const def notifyReadable(self) {
				try {
					self.channel.notifyReadable()
				} catch e {
					if typeof e === 'Exception.SocketError' {
						raise Exception.SocketError(e.getErrno(), self)
					} else {
						raise e
					}
				}
			}

			/**
			 * Notifies the channel that the underling end point is writable. This
			 * method calls the {Network.AsynchronousChannel.notifyWritable}
			 * method of the underling channel.
			 * 
			 * An instance of {Exception.SocketError} is raised on error.
			 */
			const def notifyWritable(self) {
				try {
					self.channel.notifyWritable()
				} catch e {
					if typeof e === 'Exception.SocketError' {
						raise Exception.SocketError(e.getErrno(), self)
					} else {
						raise e
					}
				}
			}

			/**
			 * Notifies the channel that the connection was closed by the peer. This
			 * method calls the {Network.AsynchronousChannel.notifyClosed} method
			 * of the underling channel.
			 * 
			 * 
			 * An instance of {Exception.SocketError} is raised on error.
			 */
			const def notifyClosed(self) {
				try {
					self.channel.notifyClosed()
				} catch e {
					if typeof e === 'Exception.SocketError' {
						raise Exception.SocketError(e.getErrno(), self)
					} else {
						raise e
					}
				}
			}

			/**
			 * Notifies the channel that the underling end point has received an error.
			 * This method calls the {Network.AsynchronousChannel.notifyClosed} method
			 * of the underling channel and an instance of {Exception.SocketError}
			 * is raised.
			 */
			const def notifyError(self) {
				try {
					self.channel.notifyError()
				} catch e {
					if typeof e === 'Exception.SocketError' {
						raise Exception.SocketError(e.getErrno(), self)
					} else {
						raise e
					}
				}
			}

			/**
			 * This method can be rebinded to handle state change events. The `client`
			 * parameter is the context that received the event and the `state` parameter
			 * is the state that will be applied to the underling channel. The previous
			 * state can still be accessed with {@see getState} until the end of the method.
			 * 
			 * > [!WARNING]
			 * > Calling {Network.EndPoint.setState} in this method can result in an
			 * > infinite loop.
			 */
			var def onState(self, client, %state) {}

			/**
			 * This method can be rebinded to handle message events. The `client`
			 * parameter is the context that received the event. The messages can
			 * be accessed using the {@see read} method.
			 * 
			 * > [!NOTE]
			 * > This method can be called for one or more messages and will not be
			 * > called until the underling end point receive more data.
			 * > The {@see read} method should then be called by this method until
			 * > `none` is returned.
			 */
			var def onMessage(self, client) {}

			/**
			 * This method can be rebinded to handle connection success events. The
			 * `client` parameter is the context that received the event. This
			 * method can be used to begin exchanges with the peer.
			 */
			var def onOpen(self, client) {}

			/**
			 * This method can be rebinded to handle close events. The `client`
			 * parameter is the context that received the event. This can be used
			 * to cleanup a context or try to reconnect when the connection was
			 * closed by the peer.
			 */
			var def onClose(self, client) {}

			/// Internal channel.
			- final channel = null
			
			/// Internal default method.
			- final method = 'POST'

			/// Internal default target.
			- final target = '/'

			/// Internal default attributes.
			- final attributes = {}
		}
	}
}
