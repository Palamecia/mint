load mint.function
load network.channel
load network.protocols.http.message
load network.protocols.http.serializer

package Network {
	package Http {

		class Client {
			def new(self, endpoint) {
				self.channel = Network.Channel(endpoint, Network.Http.Serializer)
				self.channel.onDataReceived = Callback(self, self.handleMessage)
				self.channel.onError = Callback(self, self.handleError)
				self.channel.onClose = Callback(self, self.handleClose)
				return self
			}

			def connect(self) {
				return self.channel.connect()
			}

			def watch(self) {
				return Network.Scheduler.instance().watch(self)
			}

			def unwatch(self) {
				return Network.Scheduler.instance().remove(self)
			}

			def write(self, data) {
				switch typeof data {
				case 'Network.Http.Message':
					return self.channel.write(data)
				default:
					message = Network.Http.Message()
					message.setMethode(self.methode, self.target)
					for name, value in self.attributes {
						message.setAttribute(name, value)
					}
					message.setBody(data)
					return self.channel.write(message)
				}
			}

			def read(self) {
				return self.channel.read()
			}

			def getDescriptor(self) {
				return self.channel.getDescriptor()
			}

			def getHandle(self) {
				return self.channel.getHandle()
			}

			def close(self) {
				return self.channel.close()
			}

			def getStatus(self) {
				return self.channel.getStatus()
			}

			def getEvents(self) {
				return self.channel.getEvents()
			}

			def isNonBlocking(self) {
				return self.channel.isNonBlocking()
			}

			def setNonBlocking(self, enabled) {
				return self.channel.setNonBlocking(enabled)
			}

			def getDefaultMethode(self) {
				return self.methode
			}

			def setDefaultMethode(self, methode) {
				self.methode = methode
			}

			def getDefaultTarget(self) {
				return self.target
			}

			def setDefaultTarget(self, target) {
				self.target = target
			}

			def getDefaultAttribute(self, name) {
				return self.attributes[name]
			}

			def setDefaultAttribute(self, name, value) {
				self.attributes[name] = value
			}

			def notifyReadable(self) {
				self.channel.notifyReadable()
			}

			def notifyWritable(self) {
				self.channel.notifyWritable()
			}

			def notifyConnexion(self) {
				self.channel.notifyConnexion()
			}

			def notifyClosed(self) {
				self.channel.notifyClosed()
			}

			def notifyError(self) {
				self.channel.notifyError()
			}

			# def handleMessage(self, channel) {

			}

			# def handleError(self, channel) {

			}

			# def handleClose(self, channel) {

			}

			- channel = null
			- methode = 'POST'
			- target = '/'
			- attributes = {}
		}

	}
}
