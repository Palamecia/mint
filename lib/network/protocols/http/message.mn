/**
 * @license
 * Copyright (c) 2025 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {Network.Http.Message} class which implement the
 * structure of the messages used by {Network.Http.Serializer}.
 */

load serializer.stringstream
load serializer.datastream
load codec.mimetypes
load mint.string
load mint.regex
load mint.hash

package Network {
	package Http {
		/**
		 * This hash provides the mapping between an HTTP status code and its message.
		 */
		@const Status = {
		    100: "Continue",
		    101: "Switching Protocols",
		    103: "Early Hints",
		    200: "OK",
		    201: "Created",
		    202: "Accepted",
		    203: "Non-Authoritative Information",
		    204: "No Content",
		    205: "Reset Content",
		    206: "Partial Content",
		    300: "Multiple Choices",
		    301: "Moved Permanently",
		    302: "Found",
		    303: "See Other",
		    304: "Not Modified",
		    307: "Temporary Redirect",
		    308: "Permanent Redirect",
		    400: "Bad Request",
		    401: "Unauthorized",
		    402: "Payment Required",
		    403: "Forbidden",
		    404: "Not Found",
		    405: "Method Not Allowed",
		    406: "Not Acceptable",
		    407: "Proxy Authentication Required",
		    408: "Request Timeout",
		    409: "Conflict",
		    410: "Gone",
		    411: "Length Required",
		    412: "Precondition Failed",
		    413: "Payload Too Large",
		    414: "URI Too Long",
		    415: "Unsupported Media Type",
		    416: "Range Not Satisfiable",
		    417: "Expectation Failed",
		    418: "I'm a teapot",
		    422: "Unprocessable Entity",
		    425: "Too Early",
		    426: "Upgrade Required",
		    428: "Precondition Required",
		    429: "Too Many Requests",
		    431: "Request Header Fields Too Large",
		    451: "Unavailable For Legal Reasons",
		    500: "Internal Server Error",
		    501: "Not Implemented",
		    502: "Bad Gateway",
		    503: "Service Unavailable",
		    504: "Gateway Timeout",
		    505: "HTTP Version Not Supported",
		    506: "Variant Also Negotiates",
		    507: "Insufficient Storage",
		    508: "Loop Detected",
		    510: "Not Extended",
		    511: "Network Authentication Required"
		}
		
		/**
		 * This class provides a structure for the messages used by
		 * {Network.Http.Serializer} and the {Network.Http} protocol. It
		 * provides helpers for reading and writing messages informations and
		 * for messages encoding de decoding.
		 */
		class Message {
			/**
			 * Creates a new empty message.
			 */
			const def new(self) {
				return self
			}

			/**
			 * Creates a new message described by `identifier`.
			 * 
			 * If `identifier` is an instance of {Network.Http.Message}, this
			 * instance is returned.
			 * 
			 * If `identifier` is a number, it is used as a status code to create
			 * a response message. The `complement` parameter can then provides a
			 * status message; otherwise the message will be guessed from the code.
			 * 
			 * If `identifier` is a number, it is used as an HTTP method to create
			 * a request message.  The `complement` parameter can then provides a
			 * target URI.
			 * 
			 * Otherwise, the creation fails.
			 */
			const def new(self, identifier, complement = none) {
				switch typeof identifier{
				case 'number':
					self.setStatus(identifier, complement)
					return self
				case 'string':
					self.setMethod(identifier, complement)
					return self
				case 'Network.Http.Message':
					return identifier
				}
			}

			/**
			 * Returns the status code of the message as a number.
			 */
			const def getStatusCode(const self) {
				return self.code
			}

			/**
			 * Returns the status message of the message as a string.
			 */
			const def getStatusText(const self) {
				return self.message				
			}

			/**
			 * Sets the status code of the message to `code`. If the `message`
			 * parameter is given, the value of the parameter will be used as
			 * the status message; otherwise the message will be guessed from
			 * the status code.
			 */
			const def setStatus(self, code, message = none) {
				if not defined message and code in Network.Http.Status {
					message = Network.Http.Status[code]
				}
				self.message = message
				self.code = code
			}

			/**
			 * Returns the target of the message as a string.
			 */
			const def getTarget(const self) {
				return self.target
			}

			/**
			 * Returns the method of the message as a string.
			 */
			const def getMethod(const self) {
				return self.method
			}

			/**
			 * Sets the method of the message to `method` on the givent `target`.
			 * 
			 * The `method` paremeter should be one of `'GET'`, `'HEAD'`,
			 * `'POST'`, `'PUT'`, `'DELETE'`, `'CONNECT'`, `'OPTIONS'`,
			 * `'TRACE'` or `'PATCH'`.
			 */
			const def setMethod(self, method, target) {
				self.method = method
				self.target = target
			}

			/**
			 * Returns the value of the attribute `name` of the header.
			 */
			const def getAttribute(const self, name) {
				return self.headers.get(name)
			}

			/**
			 * Sets the attribute `name` of the header to `value`.
			 */
			const def setAttribute(self, name, value) {
				self.headers[name] = value
			}

			/**
			 * Returns the body of the message as a string.
			 */
			const def getBody(const self) {
				return self.body
			}

			/**
			 * Sets the body of the message to `body`. The `Content-Length` header
			 * will be automaticaly updated using the length of the body. If the
			 * `contentType` parameter is given, the value of the parameter will
			 * be used to setup the `Content-Type` header; otherwise the value
			 * will be guessed from the content of `body`.
			 */
			const def setBody(self, body, contentType = none) {
				var buffer = Serializer.DataStream(body)
				if typeof body === 'string' {
					self.headers['Content-Length'] = body.utf8ByteCount()
				} else {
					self.headers['Content-Length'] = buffer.size()
				}
				if defined contentType {
					self.headers['Content-Type'] = contentType
				} else {
					self.headers['Content-Type'] = Codec.MimeTypes.fromData(body)
				}
				self.body = buffer.getString(0)
			}

			/**
			 * Returns the content of the message as a string.
			 */
			const def toString(const self) {
				return self.body
			}

			/**
			 * Returns the content of the message as an instance of
			 * {Serializer.DataStream}.
			 */
			const def encode(self) {

				if not defined self.method {
					if not defined self.code {
						self.code = 200
					}
					if not defined self.message and self.code in Network.Http.Status {
						self.message = Network.Http.Status[self.code]
					}
				}

				var buffer = ''

				if self.method { // Request mode
					buffer << '%s %s %s\r\n' % (self.method, self.target, self.version)
				} else { // Response mode
					buffer << '%s %d %s\r\n' % (self.version, self.code, self.message)
				}

				if 'Content-Length' not in self.headers {
					buffer << 'Content-Length: %d\r\n' % self.body.utf8ByteCount()
				}

				for key, value in self.headers {
					buffer << '%s: %s\r\n' % (key, value)
				}

				buffer << '\r\n' << self.body
				return Serializer.DataStream.fromUtf8Bytes(buffer, buffer.utf8ByteCount())
			}

			/**
			 * Creates an instance of {Network.Http.Message} from an instance of
			 * {Serializer.DataStream} given by `stream`. The `length` parameter
			 * is the number of bytes to be used to create the message.
			 */
			@const def decode(stream, length) {
				if length {

					var self = Network.Http.Message()
					var buffer = Serializer.StringStream(stream.getString(0, length))
					var token = buffer.readWord()

					if token.startsWith('HTTP/') {
						self.version = token
						self.code = number(buffer.readWord())
						self.message = buffer.readLine().trim()
					} else {
						self.method = token
						self.target = buffer.readWord()
						self.version = buffer.readLine().trim()
					}

					while let header = RegexMatch(/(.+):\s*(.+)?\r?/.match(buffer.readLine())) {
						self.headers[header.capturedText(1).trim()] = header.capturedText(2).trim()
					}

					self.body = buffer.read()
					return self
				}
			}

			/// Internal protocol version.
			- final version = 'HTTP/1.0'
			
			/// Internal header data.
			- final headers = {}
			
			/// Internal message body.
			- final body = none

			/// Internal method (request only).
			- final method = none

			/// Internal target (request only).
			- final target = none

			// Internal message (response only).
			- final message = none

			// Internal status (response only).
			- final code = none
		}
	}
}
