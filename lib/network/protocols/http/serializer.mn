load mint.type
load network.protocols.http.message

package Network {
	package Http {

		class Serializer {
			def new(self) {
				self.stream = DataStream()
				return self
			}

			def appendMessage(self, message) {
				if defined message {
					self.stream.write(message.encode())
				}
			}

			def nextMessage(self) {
				message = Network.Http.Message()
				length = self.nextMessageLength()
				if message.decode(self.stream, length) {
					self.stream.remove(length)
					return message
				}
			}

			def containsMessage(const self) {
				length = self.nextMessageLength()
				return defined length and length <= self.stream.size()
			}

			def write(self, data) {
				self.stream.write(data)
			}

			def read(self) {
				if not self.stream.isEmpty() {
					return self.stream
				}
			}

			def remove(self, count) {
				self.stream.remove(count)
			}
			
			- const def nextMessageLength(self) {
				str = self.stream.getString(0)
				index = str.indexOf('Content-Length:')
				if defined index {
					begin = str.indexOf('\r\n\r\n', index)
					if defined begin {
						return begin + 4 + str[(index + 16)...begin].toNumber()
					}
				}
			}

			- stream = null
		}

	}
}
