load mint.function
load system.directory
load network.channel
load network.serializers.server
load network.protocols.http.message
load network.protocols.http.serializer

package Network {
	package Http {

		class Server {
			def new(self, endpoint) {
				self.channel = Network.Channel(endpoint, Network.ServerSerializer)
				self.channel.onMessage = Callback(self, 'onConnection')
				self.channel.onError = Callback(self, 'onError')
				self.channel.onClose = Callback(self, 'onClose')
				self.rootDirectory = System.Directory.current()
				return self
			}

			def listen(self) {
				return self.channel.listen()
			}

			def watch(self) {
				return Network.Scheduler.instance().watch(self)
			}

			def unwatch(self) {
				return Network.Scheduler.instance().remove(self)
			}

			def write(self, data) {
				return self.channel.write(data)
			}

			def read(self) {
				return self.channel.read()
			}

			def getSocket(const self) {
				return self.channel.getSocket()
			}

			def getHandle(const self) {
				return self.channel.getHandle()
			}

			def getEndpoint(const self) {
				return self.channel.getEndpoint()
			}

			def close(self) {
				return self.channel.close()
			}

			def getState(const self) {
				return self.channel.getState()
			}

			def getEvents(const self) {
				return self.channel.getEvents()
			}

			def isNonBlocking(const self) {
				return self.channel.isNonBlocking()
			}

			def setNonBlocking(self, enabled) {
				return self.channel.setNonBlocking(enabled)
			}

			def getRootDirectory(const self) {
				return self.rootDirectory
			}

			def setRootDirectory(self, directory) {
				self.rootDirectory = System.Directory(directory)
			}

			def notifyReadable(self) {
				self.channel.notifyReadable()
			}

			def notifyWritable(self) {
				self.channel.notifyWritable()
			}

			def notifyConnexion(self) {
				self.channel.notifyConnexion()
			}

			def notifyClosed(self) {
				self.channel.notifyClosed()
			}

			def notifyError(self) {
				self.channel.notifyError()
			}

			# def onConnection(self, channel) {
				client = Network.Channel(channel.read(), Network.Http.Serializer)
				client.onClose = Callback(self, 'onDisconnection')
				client.onMessage = Callback(self, 'onMessage')
				client.watch()

				self.onGetRequest(channel, Network.Http.Message('GET', '/'))
			}

			# def onDisconnection(self, channel) {
				channel.unwatch()
			}

			# def onMessage(self, channel) {
				if message = channel.read() {
					switch message.getMethode() {
					case 'GET':
						self.onGetRequest(channel, message)
						break
					case 'HEAD':
						self.onHeadRequest(channel, message)
						break
					case 'POST':
						self.onPostRequest(channel, message)
						break
					case 'PUT':
						self.onPutRequest(channel, message)
						break
					case 'DELETE':
						self.onDeleteRequest(channel, message)
						break
					case 'CONNECT':
						self.onConnectRequest(channel, message)
						break
					case 'OPTIONS':
						self.onOptionsRequest(channel, message)
						break
					case 'TRACE':
						self.onTraceRequest(channel, message)
						break
					case 'PATCH':
						self.onPatchRequest(channel, message)
						break
					default:
						self.onBadRequest(channel, message)
						break
					}
				}
			}

			# def onGetRequest(self, channel, message) {
				file = self.rootDirectory.getFile(message.getTarget())
				if file.isDirectory() {
					file = (self.rootDirectory / message.getTarget()).getFile('index.html')
				}
				
				response = Network.Http.Message()
				if file.exists() {
					if file.open('r') {
						response.setBody(file.read())
					} else {
						response.setStatus(403)
					}
				} else {
					response.setStatus(404)
				}
				channel.write(response)
			}

			# def onHeadRequest(self, channel, message) {

			}

			# def onPostRequest(self, channel, message) {

			}

			# def onPutRequest(self, channel, message) {
				file = self.rootDirectory.getFile(message.getTarget())
				directory = file.getDirectory()
				response = Network.Http.Message()
				if directory.exists() {
					if file.exists() {
						if file.open('w') {
							file.write(message.getBody())
							if file.size() {
								response.setStatus(200)
							} else {
								response.setStatus(204)
							}
							response.setAttribute('Content-Location', message.getTarget())
						} else {
							response.setStatus(403)
						}
					} else {
						if file.open('w') {
							file.write(message.getBody())
							response.setStatus(201)
							response.setAttribute('Content-Location', message.getTarget())
						} else {
							response.setStatus(403)
						}
					}
				} else {
					response.setStatus(404)
				}
				channel.write(response)
			}

			# def onDeleteRequest(self, channel, message) {

			}

			# def onConnectRequest(self, channel, message) {

			}

			# def onOptionsRequest(self, channel, message) {

			}

			# def onTraceRequest(self, channel, message) {

			}

			# def onPatchRequest(self, channel, message) {

			}

			# def onBadRequest(self, channel, message) {
				response = Network.Http.Message()
				response.setStatus(400)
				channel.write(response)
			}

			# def onError(self, channel) {

			}

			# def onClose(self, channel) {

			}

			- channel = null
			- rootDirectory = null
		}
	}
}
