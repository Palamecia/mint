/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 */

load system.directory
load network.channel
load network.serializers.server
load network.protocols.http.message
load network.protocols.http.serializer

package Network {
	package Http {

		class Server {
			const def new(self, endpoint, RequestHandler = Network.Http.RequestHandler, Channel = Network.AsynchronousChannel) {
				self.channel = Channel(endpoint, Network.ServerSerializer)
				self.channel.onState = def [self] (_, channel, %state) {
					self.onState(self, state)
				}
				self.channel.onMessage = def [self, RequestHandler, Channel] (_, channel) {
					var client = RequestHandler(channel.read(), Channel)
					client.onClose = def [self] (_, channel) {
						self.onDisconnection(channel)
						channel.unwatch()
					}
					for var name, var value in self.getDefaultAttributes() {
						client.setDefaultAttribute(name, value)
					}
					client.setRootDirectory(self.getRootDirectory())
					client.watch()
					self.onConnection(client)
				}
				self.channel.onOpen = def [self] (_, channel) {
					self.onOpen(self)
				}
				self.channel.onClose = def [self] (_, channel) {
					self.onClose(self)
				}
				self.rootDirectory = System.Directory.current()
				return self
			}

			const def listen(self) {
				return self.channel.listen()
			}

			const def watch(self) {
				return Network.Scheduler.instance().watch(self)
			}

			const def unwatch(self) {
				return Network.Scheduler.instance().remove(self)
			}

			const def read(self) {
				return self.channel.read()
			}

			const def getSocket(const self) {
				return self.channel.getSocket()
			}

			const def getHandle(const self) {
				return self.channel.getHandle()
			}

			const def getEndpoint(const self) {
				return self.channel.getEndpoint()
			}

			const def close(self) {
				return self.channel.close()
			}

			const def getState(const self) {
				return self.channel.getState()
			}

			const def getEvents(const self) {
				return self.channel.getEvents()
			}

			const def isNonBlocking(const self) {
				return self.channel.isNonBlocking()
			}

			const def setNonBlocking(self, enabled) {
				return self.channel.setNonBlocking(enabled)
			}

			const def getRootDirectory(const self) {
				return self.rootDirectory
			}

			const def setRootDirectory(self, directory) {
				self.rootDirectory = System.Directory(directory)
			}

			const def getDefaultAttributes(const self) {
				return self.attributes
			}

			const def getDefaultAttribute(const self, name) {
				return self.attributes.get(name)
			}

			const def setDefaultAttribute(self, name, value) {
				self.attributes[name] = value
			}

			const def notifyReadable(self) {
				self.channel.notifyReadable()
			}

			const def notifyWritable(self) {
				self.channel.notifyWritable()
			}

			const def notifyConnection(self) {
				self.channel.notifyConnection()
			}

			const def notifyClosed(self) {
				self.channel.notifyClosed()
			}

			const def notifyError(self) {
				self.channel.notifyError()
			}

			var def onConnection(self, channel) {
				channel.onGetRequest(channel, Network.Http.Message('GET', '/'))
			}

			var def onDisconnection(self, channel) {
				
			}

			var def onState(self, channel, %state) {}
			var def onOpen(self, channel) {}
			var def onClose(self, channel) {}

			- final channel = null
			- final attributes = {}
			- final rootDirectory = none
		}

		/**
		 * This class provides a base implementation to handle {Network.Http.Server}'s
		 * clients requets.
		 */
		class RequestHandler {
			const def new(self, endpoint, Channel = Network.AsynchronousChannel) {
				self.channel = Channel(endpoint, Network.Http.Serializer)
				self.channel.onState = def [self] (_, channel, %state) {
					self.onState(self, state)
				}
				self.channel.onMessage = def [self] (_, channel) {
					self.onMessage(self)
				}
				self.channel.onOpen = def [self] (_, channel) {
					self.onOpen(self)
				}
				self.channel.onClose = def [self] (_, channel) {
					self.onClose(self)
				}
				return self
			}

			const def watch(self) {
				return Network.Scheduler.instance().watch(self)
			}

			const def unwatch(self) {
				return Network.Scheduler.instance().remove(self)
			}

			const def write(self, data) {
				switch typeof data {
				case 'Network.Http.Message':
					return self.channel.write(data)
				default:
					var message = Network.Http.Message()
					for name, value in self.attributes {
						message.setAttribute(name, value)
					}
					message.setBody(data)
					return self.channel.write(message)
				}
			}

			const def read(self) {
				return self.channel.read()
			}

			const def getSocket(const self) {
				return self.channel.getSocket()
			}

			const def close(self) {
				return self.channel.close()
			}

			const def getState(const self) {
				return self.channel.getState()
			}

			const def getEvents(const self) {
				return self.channel.getEvents()
			}

			const def isNonBlocking(const self) {
				return self.channel.isNonBlocking()
			}

			const def setNonBlocking(self, enabled) {
				return self.channel.setNonBlocking(enabled)
			}

			const def getRootDirectory(const self) {
				return self.rootDirectory
			}

			const def setRootDirectory(self, directory) {
				self.rootDirectory = System.Directory(directory)
			}

			const def getDefaultAttribute(const self, name) {
				return self.attributes.get(name)
			}

			const def setDefaultAttribute(self, name, value) {
				self.attributes[name] = value
			}

			const def notifyReadable(self) {
				self.channel.notifyReadable()
			}

			const def notifyWritable(self) {
				self.channel.notifyWritable()
			}

			const def notifyConnection(self) {
				self.channel.notifyConnection()
			}

			const def notifyClosed(self) {
				self.channel.notifyClosed()
			}

			const def notifyError(self) {
				self.channel.notifyError()
			}

			var def onMessage(self, channel) {
				if var message = channel.read() {
					switch message.getMethode() {
					case 'GET':
						self.onGetRequest(channel, message)
						break
					case 'HEAD':
						self.onHeadRequest(channel, message)
						break
					case 'POST':
						self.onPostRequest(channel, message)
						break
					case 'PUT':
						self.onPutRequest(channel, message)
						break
					case 'DELETE':
						self.onDeleteRequest(channel, message)
						break
					case 'CONNECT':
						self.onConnectRequest(channel, message)
						break
					case 'OPTIONS':
						self.onOptionsRequest(channel, message)
						break
					case 'TRACE':
						self.onTraceRequest(channel, message)
						break
					case 'PATCH':
						self.onPatchRequest(channel, message)
						break
					default:
						self.onBadRequest(channel, message)
						break
					}
				}
			}

			var def onGetRequest(self, channel, message) {
				var file = self.rootDirectory.getFile(message.getTarget())
				if file.isDirectory() {
					file = (self.rootDirectory / message.getTarget()).getFile('index.html')
				}
				var response = Network.Http.Message()
				if file.exists() {
					if file.open('r') {
						response.setBody(file.read())
					} else {
						response.setStatus(403)
					}
				} else {
					response.setStatus(404)
				}
				channel.write(response)
			}

			var def onHeadRequest(self, channel, message) {

			}

			var def onPostRequest(self, channel, message) {

			}

			var def onPutRequest(self, channel, message) {
				var file = self.rootDirectory.getFile(message.getTarget())
				var directory = file.getDirectory()
				var response = Network.Http.Message()
				if directory.exists() {
					if file.exists() {
						if file.open('w') {
							file.write(message.getBody())
							if file.size() {
								response.setStatus(200)
							} else {
								response.setStatus(204)
							}
							response.setAttribute('Content-Location', message.getTarget())
						} else {
							response.setStatus(403)
						}
					} else {
						if file.open('w') {
							file.write(message.getBody())
							response.setStatus(201)
							response.setAttribute('Content-Location', message.getTarget())
						} else {
							response.setStatus(403)
						}
					}
				} else {
					response.setStatus(404)
				}
				channel.write(response)
			}

			var def onDeleteRequest(self, channel, message) {

			}

			var def onConnectRequest(self, channel, message) {

			}

			var def onOptionsRequest(self, channel, message) {

			}

			var def onTraceRequest(self, channel, message) {

			}

			var def onPatchRequest(self, channel, message) {

			}

			var def onBadRequest(self, channel, message) {
				var response = Network.Http.Message()
				response.setStatus(400)
				channel.write(response)
			}

			var def onState(self, channel, %state) {}
			var def onOpen(self, channel) {}
			var def onClose(self, channel) {}

			- final channel = null
			- final attributes = {}
			- final rootDirectory = none
		}
	}
}
