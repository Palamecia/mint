/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 */

load serializer.stringstream
load serializer.datastream
load serializer.jsonstream
load mint.string
load mint.regex
load mint.hash

package Network {
	package JsonRpc {

		class Message {
			const def new(self) {
				return self
			}

			const def new(self, body, attributes = {}) {
				switch typeof body {
				case 'hash':
					self.headers = attributes
					self.body = body
					return self
				case 'Serializer.JsonStream':
					self.headers = attributes
					self.body = body.read()
					return self
				case 'Network.JsonRpc.Message':
					return body
				}
			}

			@const def fromString(body, attributes = {}) {
				if defined body {
					return Network.JsonRpc.Message(Serializer.JsonStream(Serializer.StringStream(body)).read(), attributes)
				}
			}

			const def in(const self, const key) {
				return self.body.in(key)
			}

			const def in(const self) {
				for item in self.body {
					yield item
				}
			}

			const def [](const self, const key) {
				return self.body[key]
			}

			const def []=(self, const key, value) {
				return self.body[key] = value
			}

			const def getBody(const self) {
				return self.body
			}

			const def setBody(self, body) {
				self.body = body
			}

			def getAttribute(const self, name) {
				return self.headers.get(name)
			}

			def setAttribute(self, name, value) {
				self.headers[name] = value
			}

			/**
			 * Returns the content of the message as a string.
			 */
			const def toString(const self) {
				var str = ''
				var stream = Serializer.JsonStream(Serializer.StringStream(str))
				stream.setIndented(false)
				stream.write(self.body)
				return str
			}

			const def encode(self) {
				var buffer = ''
				var body = self.toString()
				buffer << 'Content-Length: %d\r\n' % body.utf8ByteCount()
				for let var (key, value) in self.headers {
					if key == 'Content-Length' {
						continue
					}
					buffer << '%s: %s\r\n' % (key, value)
				}
				buffer << '\r\n' << body
				return Serializer.DataStream.fromUtf8Bytes(buffer, buffer.utf8ByteCount())
			}

			@const def decode(stream, length) {
				if length {
					var self = Network.JsonRpc.Message()
					var buffer = Serializer.StringStream(stream.getString(0, length))
					while header = RegexMatch(/(.+):\s*(.+)?\r?/.match(buffer.readLine())) {
						self.headers[header.capturedText(1).trim()] = header.capturedText(2).trim()
					}
					self.body = Serializer.JsonStream(buffer.read()).read()
					return self
				}
			}

			- final headers = {}
			- final body = {}
		}
	}
}
