/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {Network.Scheduler} class which manages synchronization
 * between the network devices.
 */

load system.thread
load mint.lockguard

package Network {
	/**
	 * This class manages synchronization between the network devices.
	 */
	class Scheduler {
		/**
		 * This enum describe the events that can be watched on a specific channel.
		 */
		enum PollEvent {
			/// This event is set when the endpoint has some waiting data to read.
			Read   = 0x0001
			/// This event is set when the data can be sent to the endpoint.
			Write  = 0x0002
			/// This event is set when a new connection is detected.
			Accept = 0x0004
			/// This event is set when an error is detected.
			Error  = 0x0008
			/// This event is set when the connection is closed by the peer.
			Close  = 0x0010
		}

		/**
		 * This class describe the polling state of a specific channel.
		 */
		class PollDescriptor {
			/**
			 * Creates a new context for the channel given by `channel`. The
			 * `channel` object must provide a `getSocket` method returning the
			 * socket as a number.
			 */
			const def new(self, channel) {
				var socket = channel.getSocket()
				if defined socket {
					self.handle = self.g_lib.call('mint_scheduler_pollfd_new', socket)
					self.handle.delete = def [g_lib = Network.Scheduler.PollDescriptor.g_lib] (self) {
						g_lib.call('mint_scheduler_pollfd_delete', self)
					}
					return self
				}
			}

			/**
			 * Returns the handle of the channel used by {Network.Scheduler}.
			 */
			const def getHandle(const self) {
				return self.handle
			}

			/**
			 * Returns the events activated on the channel as a mask of value from
			 * the {Network.Scheduler.PollEvent} enum.
			 * 
			 * Only events passed to {@see setRequestedEvents} can be activated.
			 */
			const def getEvents(const self) {
				return self.g_lib.call('mint_scheduler_get_revents', self.handle)
			}

			/**
			 * Returns the events requested on the channel as a mask of value from
			 * the {Network.Scheduler.PollEvent} enum.
			 */
			const def getRequestedEvents(const self) {
				return self.g_lib.call('mint_scheduler_get_events', self.handle)
			}

			/**
			 * Sets requested events to `events` on the channel. The `events`
			 * parameter must be a mask of values from the {Network.Scheduler.PollEvent}
			 * enum.
			 */
			const def setRequestedEvents(self, events) {
				self.g_lib.call('mint_scheduler_set_events', self.handle, events)
			}

			/**
			 * Waits until the activation of a requested event of the channel or
			 * until `timeout` milliseconds if no event become activated during
			 * this period.
			 * 
			 * Returns `true` if an event was activated; otherwise returns `false`.
			 * 
			 * After a call to this method, the value returned by {@see getEvents}
			 * is updated.
			 */
			const def poll(self, timeout = 500) {
				return Network.Scheduler.poll([self], timeout)
			}

			/// Global library handle.
			- @g_lib = lib('libmint-network')

			/// Internal channel handle.
			- final handle = null
		}

		/// Internal constructor.
		~const def new(self) {
			self.thread = System.Thread(self, self.synchronizationLoop)
			self.mutex = System.Mutex()
			return self
		}

		/**
		 * Returns the global instance of {Network.Scheduler}.
		 */
		@const def instance() {
			return Network.Scheduler.g_instance
		}

		/**
		 * Waits until the activation of a requested event of a channel from
		 * `fdset` or until `timeout` milliseconds if no event become activated
		 * during this period. The `fdset` parameter must be an array of
		 * {Network.Scheduler.PollDescriptor}.
		 * 
		 * Returns `true` if an event was activated; otherwise returns `false`.
		 * 
		 * After a call to this method, the values returned by
		 * {Network.Scheduler.PollDescriptor.getEvents} are updated.
		 */
		@const def poll(fdset, timeout) {
			var handleSet = [for let fd in fdset {
				fd.getHandle()
			}]
			return Network.Scheduler.g_lib.call('mint_scheduler_poll', handleSet, timeout)
		}

		/**
		 * Starts the synchronization loop in a separate thread. This loop calls
		 * {@see synchronize} forever until {@see stopSynchronizationLoop} is
		 * called. The `timeout` parameter is forwarded to the called method.
		 */
		const def startSynchronizationLoop(self, timeout = 500) {
			self.loopRunning = true
			self.thread.start(timeout)
		}

		/**
		 * Stops the synchronization loop thread.
		 */
		const def stopSynchronizationLoop(self) {
			self.loopRunning = false
			self.thread.join()
		}

		/**
		 * Adds a `channel` to the scheduler. The `channel` object must provides the
		 * `getSocket` method. The same interface than {Network.AsynchronousChannel}
		 * is also expected to automaticaly update the object on events. Returns
		 * `true` if the channel is successfully watched; otherwise returns `false`.
		 */
		const def watch(self, channel) {
			var lock = LockGuard(self.mutex)
			if channel in self.channels {
				return true
			}
			if not channel.setNonBlocking(true) {
				return false
			}
			self.channels[channel] = Network.Scheduler.PollDescriptor(channel)
			return true
		}

		/**
		 * Removes the `channel` from the scheduler. Returns `true` if `channel`
		 * is watched by the scheduler; otherwise returns `false`.
		 */
		const def remove(self, channel) {
			var lock = LockGuard(self.mutex)
			if channel in self.channels {
				self.channels.remove(channel)
				return true
			}
			return false
		}

		/**
		 * Runs the synchronization loop. This loop calls {@see synchronize}
		 * forever until {@see stopSynchronizationLoop} is called. The `timeout`
		 * parameter is forwarded to the called method.
		 */
		# const def synchronizationLoop(self, timeout) {
			while self.loopRunning {
				self.synchronize(timeout)
			}
		}

		/**
		 * Waits until the activation of a requested event of a watched channel
		 * or until `timeout` milliseconds if no event become activated during
		 * this period. The watched events on a channel are selected using the
		 * {Network.AsynchronousChannel.getEvents} method. Any activated event
		 * on a channel will then be notified to the channel using the
		 * corresponding method:
		 * 
		 * | Event | AsynchronousChannel method |
		 * | ----- | -------------------------- |
		 * | {Network.Scheduler.PollEvent.Read} | {Network.AsynchronousChannel.notifyReadable} |
		 * | {Network.Scheduler.PollEvent.Write} | {Network.AsynchronousChannel.notifyWritable} |
		 * | {Network.Scheduler.PollEvent.Accept} | {Network.AsynchronousChannel.notifyConnection} |
		 * | {Network.Scheduler.PollEvent.Error} | {Network.AsynchronousChannel.notifyError} |
		 * | {Network.Scheduler.PollEvent.Close} | {Network.AsynchronousChannel.notifyClosed} |
		 * 
		 * Returns `true` if an event was activated; otherwise returns `false`.
		 * 
		 * After a call to this method, the values returned by
		 * {Network.Scheduler.PollDescriptor.getEvents} are updated.
		 */
		const def synchronize(self, timeout = 500) {

			var lock = LockGuard(self.mutex)
			var channelset = []
			var fdset = []

			for let (channel, fd) in self.channels {
				if not defined fd {
					if fd = Network.Scheduler.PollDescriptor(channel) {
						self.channels[channel] = fd
					} else {
						continue
					}
				}
				fd.setRequestedEvents(channel.getEvents())
				channelset << [channel, fd]
				fdset << fd
			}

			lock = none

			if not Network.Scheduler.poll(fdset, timeout) {
				return false
			}

			for let (channel, fd) in channelset {
				let const revents = fd.getEvents()
				if revents & Network.Scheduler.PollEvent.Read and defined channel.notifyReadable {
					channel.notifyReadable()
				}
				if revents & Network.Scheduler.PollEvent.Write and defined channel.notifyWritable {
					channel.notifyWritable()
				}
				if revents & Network.Scheduler.PollEvent.Accept and defined channel.notifyConnection {
					channel.notifyConnection()
				}
				if revents & Network.Scheduler.PollEvent.Error and defined channel.notifyError {
					channel.notifyError()
				}
				if revents & Network.Scheduler.PollEvent.Close {
					self.channels[channel] = none
					if defined channel.notifyClosed {
						channel.notifyClosed()
					}
				}
			}

			return true
		}

		/**
		 * Runs the synchronization loop synchronously. This loop calls
		 * {@see synchronize} forever until no more channel is watched. The
		 * `timeout` parameter is forwarded to the called method.
		 */
		const def run(self, timeout = 500) {
			while not self.channels.isEmpty() {
				self.synchronize(timeout)
			}
		}

		/// Global library handle.
		- @g_lib = lib('libmint-network')

		/// Global object instance.
		- @g_instance

		/// Internal synchronization loop state.
		- final loopRunning = false

		/// Internal synchronization thead handle.
		- final thread = null
		
		/// Internal channel access mutex.
		- final mutex = null

		/// Internal channels context.
		- final channels = {}
	}

	Network.Scheduler.g_instance = Network.Scheduler()

}
