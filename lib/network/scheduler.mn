load system.thread
load system.mutex
load mint.lockguard

package Network {

	class Scheduler {
		enum PollEvent {
			poll_in   = 0x0001
			poll_pri  = 0x0002
			poll_out  = 0x0004
			poll_err  = 0x0008
			poll_hup  = 0x0010
			poll_nval = 0x0020
		}

		class PollDescriptor {
			def new(self, endpoint, events) {
				self.handle = self.g_lib.call('mint_scheduler_pollfd_new', endpoint.getDescriptor(), endpoint.getHandle(), events)
				self.handle.delete = def (self) {
					lib('libmint-network').call('mint_scheduler_pollfd_delete', self)
				}
				return self
			}

			def getHandle(self) {
				return self.handle
			}

			def getEvents(self) {
				return self.g_lib.call('mint_scheduler_get_revents', self.handle)
			}

			def poll(self, timeout = 500) {
				return Scheduler.poll([self], timeout)
			}

			- @g_lib = lib('libmint-network')
			- handle
		}

		~def new(self) {
			self.thread = System.Thread(self, self.synchronizationLoop)
			self.mutex = System.Mutex()
			return self
		}

		@def instance() {
			return Scheduler.g_instance
		}

		@def poll(fdset, timeout) {

			handle_set = []

			for fd in fdset {
				handle_set << fd.getHandle()
			}

			return Scheduler.g_lib.call('mint_scheduler_poll', handle_set, timeout)
		}

		def startSynchronizationLoop(self) {
			self.loop_running = true
			self.thread.start()
		}

		def stopSynchronizationLoop(self) {
			self.loop_running = false
			self.thread.join()
		}

		def watch(self, channel) {
			lock = LockGuard(self.mutex)
			if channel in self.channels {
				return false
			}
			self.channels[channel]
			channel.setNonBlocking(true)
			return true
		}

		def remove(self, channel) {
			lock = LockGuard(self.mutex)
			if channel in self.channels {
				self.channels.remove(channel)
				return true
			}
			return false
		}

		#def synchronizationLoop(self) {
			while self.loop_running {
				self.synchronize()
			}
		}

		def synchronize(self, timeout = 500) {

			fdset = []
			channelset = []

			for channel in self.channels {
				fdset << Scheduler.PollDescriptor(channel, channel.getEvents())
				channelset << channel
			}

			Scheduler.poll(fdset, timeout)

			for i in 0...fdset.size() {
				revents = fdset[i].getEvents()
				channel = channelset[i]
				if revents & Scheduler.PollEvent.poll_in and defined channel.notifyReadable {
					channel.notifyReadable()
				}
				if revents & Scheduler.PollEvent.poll_pri {

				}
				if revents & Scheduler.PollEvent.poll_out and defined channel.notifyWritable {
					channel.notifyWritable()
				}
				if revents & Scheduler.PollEvent.poll_err and defined channel.notifyError {
					channel.notifyError()
				}
				if revents & Scheduler.PollEvent.poll_hup and defined channel.notifyClosed {
					channel.notifyClosed()
				}
				if revents & Scheduler.PollEvent.poll_nval {

				}
			}
		}

		- @g_instance
		- @g_lib = lib('libmint-network')
		- loop_running = false
		- thread = null
		- mutex = null
		- channels = {}
	}

	Scheduler.g_instance = Scheduler()

}
