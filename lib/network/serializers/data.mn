/**
 * This module provides the {Network.DataSerializer} class which implement the
 * serializer interface for fixed length messages.
 */

load serializer.datastream

package Network {
	/**
	 * This class provides a serializer for fixed length messages. The message
	 * length is passed to the constructor. This class can not be passed to an
	 * instance of {Network.Channel} as is but must be used with a decorator.
	 * 
	 * **Example**:
	 * ```mint
	 * channel = Network.Channel(endpoint, def { return Network.DataSerializer(1024) })
	 * ```
	 */
	class DataSerializer {
		/**
		 * Creates a new serializer for messages of fixed length `length`.
		 */
		const def new(self, length) {
			self.stream = DataStream()
			self.length = length
			return self
		}

		/**
		 * Appends the message object provided by `message` to the serializer's
		 * buffer. The `message` parameter must convert to a byte sequence with
		 * a length equal to the fixed length configured for this serializer.
		 */
		const def appendMessage(self, message) {
			if defined message {
				self.stream.write(message)
			}
		}

		/**
		 * Returns the next message in the serializer's buffer as an array of
		 * {uint8} with a length equal to the fixed length configured for this
		 * serializer or `none` if the buffer contains less than this configured
		 * amount of bytes. The data used to create the message is then removed
		 * from the buffer.
		 */
		const def nextMessage(self) {
			return self.stream.readUInt8(self.length)
		}

		/**
		 * Returns `true` if the serializer's buffer contains at least the
		 * configured amount of bytes; otherwise returns `false`.
		 */
		const def containsMessage(const self) {
			return self.stream.containsUInt8(self.length)
		}

		/**
		 * Appends the data provided by `data` to the serializer's buffer. The
		 * `data` parameter must be an instance of {DataStream}.
		 */
		const def write(self, data) {
			self.stream.write(data)
		}

		/**
		 * Returns the serializer's buffer as an instance of {DataStream} or
		 * `none` if the buffer is empty.
		 */
		const def read(self) {
			if not self.stream.isEmpty() {
				return self.stream
			}
		}

		/**
		 * Removes the `count` first bytes from the begining of the serializer's
		 * buffer.
		 */
		const def remove(self, count) {
			self.stream.remove(count)
		}

		/// Internal buffer.
		- stream = null

		/// Internal fixed length.
		- length = 0
	}
}
