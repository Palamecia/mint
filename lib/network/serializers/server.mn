/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {Network.ServerSerializer} class which implement the
 * serializer interface to accept incomming connections.
 */

load exception.network
load container.queue

package Network {
	/**
	 * This class provides a serializer for incomming connections. It should be
	 * used with instances of {Network.AsynchronousChannel} opened with
	 * {Network.AsynchronousChannel.listen}.
	 * 
	 * On new connection, an end point is created and pushed to a queue. This end
	 * point can be retrieved later by calling {Network.AsynchronousChannel.read}.
	 */
	class ServerSerializer {
		/**
		 * Creates a new serializer.
		 */
		const def new(self) {
			self.connectionQueue = Container.Queue()
			return self
		}

		/**
		 * Pushes the communication end point described by `endpoint` to the
		 * serializer's queue.
		 */
		const def appendMessage(self, endpoint) {
			if defined endpoint {
				self.connectionQueue.push(endpoint)
			}
		}

		/**
		 * Returns the next pending end point in the serializer's queue or `none`
		 * if the queue is empty. The end point is then removed from the queue.
		 */
		const def nextMessage(self) {
			return self.connectionQueue.pop()
		}

		/**
		 * Returns `true` if the serializer's queue contains at least one
		 * pending end point; otherwise returns `false`.
		 */
		const def containsMessage(const self) {
			return not self.connectionQueue.isEmpty()
		}

		/**
		 * Attempts to read data from the end point. This method raises an
		 * instance of {Exception.InvalidNetworkOperation}.
		 */
		const def read(self, endpoint) {
			raise Exception.InvalidNetworkOperation('the socket can not be read', self)
		}

		/**
		 * Attempts to write data to the end point. This method raises an
		 * instance of {Exception.InvalidNetworkOperation}.
		 */
		const def write(self, endpoint) {
			raise Exception.InvalidNetworkOperation('the socket can not be write', self)
		}

		/**
		 * Attempts to accept a connection on the end point. Returns `true` if
		 * a new connection was successfully accepted; otherwise returns `false`.
		 */
		const def accept(self, endpoint) {
			if var client = endpoint.accept() {
				self.connectionQueue.push(client)
				return true
			}
			return false
		}

		/**
		 * Returns `true` if the serializer's buffer is empty; otherwise
		 * returns `false`.
		 */
		const def isEmpty(const self) {
			return self.connectionQueue.isEmpty()
		}

		/// Internal pending end point queue.
		- final connectionQueue = null
	}
}
