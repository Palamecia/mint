/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {Network.TextSerializer} class which implement the
 * serializer interface for plain text messages on a stream based end point such
 * as {Network.TcpIp}.
 */

load serializer.datastream
load exception.network
load mint.type

package Network {
	/**
	 * This class provides a serializer for plain text messages. The message
	 * end is detected by finding a byte with a value of `0`.
	 */
	class TextSerializer {
		/**
		 * Creates a new serializer.
		 */
		const def new(self) {
			self.stream = Serializer.DataStream()
			return self
		}

		/**
		 * Appends the message object provided by `message` to the serializer's
		 * buffer. The `message` parameter must be a string or castable to string.
		 */
		const def appendMessage(self, message) {
			if defined message {
				self.stream.write(message.toString())
			}
		}

		/**
		 * Returns the next message object in the serializer's buffer as a string
		 * or `none` if no message object can be constructed from the data in the
		 * buffer. The data used to create the message is then removed from the
		 * buffer.
		 */
		const def nextMessage(self) {
			return self.stream.readString()
		}

		/**
		 * Returns `true` if a message can be constructed from the data in the
		 * serializer's buffer (i.e. at least one byte with a value of `0` was
		 * found); otherwise returns `false`.
		 */
		const def containsMessage(const self) {
			return self.stream.containsString()
		}

		/**
		 * Attempts to read data from the end point. Returns `true` if data was
		 * receive; otherwise returns `false`.
		 */
		const def read(self, endpoint) {
			if var buffer = endpoint.read() {
				self.stream.write(buffer)
				return true
			}
			return false
		}

		/**
		 * Attempts to write data to the end point. Returns `true` if the data
		 * was successfully sent; otherwise returns `false`. After this call,
		 * the sent data is removed from the buffer.
		 */
		const def write(self, endpoint) {
			if not self.stream.isEmpty() {
				var (success, count) = endpoint.write(self.stream)
				if success {
					self.stream.remove(count)
					return true
				}
			}
			return false
		}

		/**
		 * Attempts to accept a connection on the end point. This method raises
		 * an instance of {Exception.InvalidNetworkOperation}.
		 */
		const def accept(self, endpoint) {
			raise Exception.InvalidNetworkOperation('the socket can not accept', self)
		}

		/**
		 * Returns `true` if the serializer's buffer is empty; otherwise
		 * returns `false`.
		 */
		const def isEmpty(const self) {
			return self.stream.isEmpty()
		}

		/// Internal buffer.
		- final stream = null
	}
}
