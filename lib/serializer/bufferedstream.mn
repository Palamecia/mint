load mint.lang

class BufferedStream {
	def new(self, object) {
		self.object = object
		return self
	}
	
	def getCodec(self) {
		if defined self.object.getCodec {
			return self.object.getCodec()
		}
		return self.codec
	}

	def setCodec(self, codec) {
		if defined self.object.setCodec {
			self.object.setCodec(codec)
		} elif defined self.object.readDataStream or defined self.object.readUInt8 {
			self.codec = codec
		}
	}

	def readChar(self) {
		if self.fetchBuffer() {
			return self.buffer[self.pos++]
		}
	}

	def readWord(self) {
		while self.fetchBuffer() and self.buffer[self.pos] =~ /\s/ {
			self.pos++
		}
		return self.readUntil(/\s/)
	}

	def readLine(self) {
		if self.fetchBuffer() and self.buffer[self.pos] == '\n' {
			self.pos++
		}
		return self.readUntil('\n')
	}

	def readLines(self) {
		lines = []
		while line = self.readLine() {
			lines << line
		}
		return lines
	}

	def read(self) {
		while self.fetchBuffer() {
			str = self.buffer[self.pos...self.buffer.size()]
			self.pos = self.buffer.size()
			return str
		}
	}

	def write(self, data) {
		self.object.write(data)
	}

	def <<(self, data) {
		self.write(data)
	}

	def isEmpty(self) {
		return not self.fetchBuffer()
	}

	- def fetchBuffer(self) {
		if not self.buffer or self.pos == self.buffer.size() {
			if defined self.codec {
				if typeof self.object == 'DataStream' {
					self.buffer = self.codec.decode(self.object)
				} elif defined self.object.readDataStream {
					self.buffer = self.codec.decode(self.object.readDataStream())
				} elif defined self.readUInt8 {
					object = self.object
					self.buffer = self.codec.decodeChar(def [object] {
						return object.readUInt8()
					})
				}
			} else {
				if defined self.object.read {
					self.buffer = self.object.read()
				} elif defined self.object.readString {
					self.buffer = self.object.readString()
				}
			}
			if not defined self.buffer {
				self.buffer = null
			}
			self.pos = 0
		}
		return self.buffer and self.pos < self.buffer.size()
	}

	- def readUntil(self, delim) {
		if self.fetchBuffer() {
			if is_defined(index = self.buffer.indexOf(delim, self.pos)) {
				str = self.buffer[self.pos...index]
				self.pos = index
			} else {
				str = self.buffer[self.pos...self.buffer.size()]
				self.pos = self.buffer.size()
				while not defined index and self.fetchBuffer() {
					if is_defined(index = self.buffer.indexOf(delim, self.pos)) {
						str << self.buffer[self.pos...index]
						self.pos = index
					} else {
						str << self.buffer[self.pos...self.buffer.size()]
						self.pos = self.buffer.size()
					}
				}
			}
			return str
		}
	}

	- object = null
	- codec = none
	- buffer = null
	- pos = 0
}
