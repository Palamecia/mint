/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {Serializer.BufferedStream} class which add reading
 * conveniant methods to an object which only provides `read` and `write`.
 */

load mint.lang

package Serializer {

/**
 * This class creates a conveniant interface for reading and writing data on an
 * object which only provides `read` and `write`. Data from the underling object
 * are stored in a buffer to get retrieved later.
 */
class BufferedStream {
	/**
	 * Creates a new stream for reading and writing data using `object`.
	 */
	const def new(self, object) {
		if self.object = object {
			return self
		}
	}
	
	/**
	 * Returns the codec that is current assigned to the stream. If the underling
	 * object support codecs, the codec of the object is used; otherwise a codec
	 * is added at this level.
	 */
	const def getCodec(const self) {
		if defined self.object.getCodec {
			return self.object.getCodec()
		}
		return self.codec
	}

	/**
	 * Sets the codec for this stream to `codec`. The codec is used for decoding
	 * any data that is read from the assigned device, and for encoding any data
	 * that is written.
	 * 
	 * If the underling class object support codecs, the codec is directly added
	 * to the pbject; otherwise the codec is managed by this class.
	 */
	const def setCodec(self, codec) {
		if defined self.object.setCodec {
			self.object.setCodec(codec)
		} elif defined self.object.readDataStream or defined self.object.readUInt8 {
			self.codec = codec
		}
	}

	/**
	 * Reads the next character from the stream, and returns it as a string.
	 * Data is read until a valid character is read or if the end of stream
	 * is detected.
	 */
	const def readChar(self) {
		if self.fetchBuffer() {
			return self.buffer[self.pos++]
		}
	}

	/**
	 * Reads a word from the stream, and returns it as a string. Words are
	 * separated by whitespace (i.e., all characters for which {isSpace}
	 * returns `true`).
	 * 
	 * Leading whitespace are skipped.
	 */
	const def readWord(self) {
		while self.fetchBuffer() and self.buffer[self.pos] =~ /\s/ {
			self.pos++
		}
		return self.readUntil(/\s/)
	}

	/**
	 * Reads the next line from the stream, and returns it as a string.
	 * Data is read until a `'\n'` character is read or if the end of
	 * stream is detected.
	 */
	const def readLine(self) {
		if self.fetchBuffer() and self.buffer[self.pos] == '\n' {
			self.pos++
		}
		return self.readUntil('\n')
	}

	/**
	 * Returns an iterator on each remaining lines of the stream.
	 */
	const def readLines(self) {
		while let line = self.readLine() {
			yield line
		}
	}

	/**
	 * Reads all remaining data from the stream, and returns it as a string.
	 */
	const def read(self) {
		while self.fetchBuffer() {
			let str = self.buffer[self.pos...self.buffer.size()]
			self.pos = self.buffer.size()
			return str
		}
	}

	/**
	 * Writes the content of `data` to the stream. The content of data is
	 * converted to string using the codec set by
	 * {Serializer.BufferedStream.setCodec} or to an UTF-8 string by default.
	 * 
	 * The `write` method of the underling object is used to write the data.
	 */
	const def write(self, data) {
		self.object.write(data)
	}

	/**
	 * Reads a word from the stream and stores it in `data`, then returns a
	 * reference to the stream. Words are separated by whitespace (i.e., all
	 * characters for which {isSpace} returns `true`).
	 * 
	 * Leading whitespace are skipped.
	 */
	const def >>(self, data) {
		data := self.readWord()
		return self
	}

	/**
	 * Writes the string `data` to the stream, and returns a reference to the
	 * stream. The string is first encoded using the assigned codec (the default
	 * is UTF-8) before it is written to the stream.
	 */
	const def <<(self, data) {
		self.write(data)
		return self
	}

	/**
	 * Returns `true` if the stream has no more data to read; otherwise returns
	 * `false`.
	 */
	const def isEmpty(const self) {
		return not self.fetchBuffer()
	}

	/**
	 * Reads more data from the underling object and add it to the buffer. Returns
	 * `true` if more data was found; otherwise returns `false`.
	 * 
	 * If the stream uses a codec initialiszed with {@see setCodec}, the object
	 * must provide a `readDataStream` or `readUInt8` to read data unless it is
	 * already an instance of {Serializer.DataStream}.
	 * 
	 * If no codec is provided to the stream, the object must provide a `read`
	 * or `readString` method.
	 */
	- final const def fetchBuffer(self) {
		if not self.buffer or self.pos == self.buffer.size() {
			if defined self.codec {
				if typeof self.object == 'Serializer.DataStream' {
					self.buffer = self.codec.decode(self.object)
				} elif defined self.object.readDataStream {
					self.buffer = self.codec.decode(self.object.readDataStream())
				} elif defined self.readUInt8 {
					object = self.object
					self.buffer = self.codec.decodeChar(def [object] {
						return object.readUInt8()
					})
				}
			} else {
				if defined self.object.read {
					self.buffer = self.object.read()
				} elif defined self.object.readString {
					self.buffer = self.object.readString()
				}
			}
			if not defined self.buffer {
				self.buffer = null
			}
			self.pos = 0
		}
		return self.buffer and self.pos < self.buffer.size()
	}

	/**
	 * Reads data from the buffer until `delim` is found, and returns it as a
	 * string. The read index of the stream is then moved to the first character
	 * identified by `delim`.
	 */
	- final const def readUntil(self, delim) {
		if self.fetchBuffer() {
			if isDefined(index = self.buffer.indexOf(delim, self.pos)) {
				var str = self.buffer[self.pos...index]
				self.pos = index
			} else {
				var str = self.buffer[self.pos...self.buffer.size()]
				self.pos = self.buffer.size()
				while not defined index and self.fetchBuffer() {
					if isDefined(index = self.buffer.indexOf(delim, self.pos)) {
						str << self.buffer[self.pos...index]
						self.pos = index
					} else {
						str << self.buffer[self.pos...self.buffer.size()]
						self.pos = self.buffer.size()
					}
				}
			}
			return str
		}
	}

	/// Internal underling object.
	- final object = null

	/// Internal stream codec.
	- final codec = none

	/// Internal read buffer.
	- final buffer = null

	/// Internal read index.
	- final pos = 0
}

}
