load mint.inttypes

class DataStream {
	def new(self) {
		self.buffer = DataStream.g_lib.call('mint_datastream_create_buffer')
		self.buffer.delete = def (self) {
			lib('libmint-serializer').call('mint_datastream_delete_buffer', self)
		}
		return self
	}

	def containsInt8(self) {
		return DataStream.g_lib.call('mint_datastream_contains_int8', self.buffer)
	}

	def containsInt16(self) {
		return DataStream.g_lib.call('mint_datastream_contains_int16', self.buffer)
	}

	def containsInt32(self) {
		return DataStream.g_lib.call('mint_datastream_contains_int32', self.buffer)
	}

	def containsInt64(self) {
		return DataStream.g_lib.call('mint_datastream_contains_int64', self.buffer)
	}

	def containsUInt8(self) {
		return DataStream.g_lib.call('mint_datastream_contains_uint8', self.buffer)
	}

	def containsUInt16(self) {
		return DataStream.g_lib.call('mint_datastream_contains_uint16', self.buffer)
	}

	def containsUInt32(self) {
		return DataStream.g_lib.call('mint_datastream_contains_uint32', self.buffer)
	}

	def containsUInt64(self) {
		return DataStream.g_lib.call('mint_datastream_contains_uint64', self.buffer)
	}

	def containsNumber(self) {
		return DataStream.g_lib.call('mint_datastream_contains_number', self.buffer)
	}

	def containsBoolean(self) {
		return DataStream.g_lib.call('mint_datastream_contains_boolean', self.buffer)
	}

	def containsString(self) {
		return DataStream.g_lib.call('mint_datastream_contains_string', self.buffer)
	}

	def getInt8(self) {
		if self.containsInt8() {
			data = int8()
			DataStream.g_lib.call('mint_datastream_get', self.buffer, data)
			return data
		}
	}

	def getInt16(self) {
		if self.containsInt16() {
			data = int16()
			DataStream.g_lib.call('mint_datastream_get', self.buffer, data)
			return data
		}
	}

	def getInt32(self) {
		if self.containsInt32() {
			data = int32()
			DataStream.g_lib.call('mint_datastream_get', self.buffer, data)
			return data
		}
	}

	def getInt64(self) {
		if self.containsInt64() {
			data = int64()
			DataStream.g_lib.call('mint_datastream_get', self.buffer, data)
			return data
		}
	}

	def getUInt8(self) {
		if self.containsUInt8() {
			data = uint8()
			DataStream.g_lib.call('mint_datastream_get', self.buffer, data)
			return data
		}
	}

	def getUInt16(self) {
		if self.containsUInt16() {
			data = uint16()
			DataStream.g_lib.call('mint_datastream_get', self.buffer, data)
			return data
		}
	}

	def getUInt32(self) {
		if self.containsUInt32() {
			data = uint32()
			DataStream.g_lib.call('mint_datastream_get', self.buffer, data)
			return data
		}
	}

	def getUInt64(self) {
		if self.containsUInt64() {
			data = uint64()
			DataStream.g_lib.call('mint_datastream_get', self.buffer, data)
			return data
		}
	}

	def getNumber(self) {
		if self.containsNumber() {
			data = number()
			DataStream.g_lib.call('mint_datastream_get', self.buffer, data)
			return data
		}
	}

	def getBoolean(self) {
		if self.containsBoolean() {
			data = boolean()
			DataStream.g_lib.call('mint_datastream_get', self.buffer, data)
			return data
		}
	}

	def getString(self) {
		if self.containsString() {
			data = string()
			DataStream.g_lib.call('mint_datastream_get', self.buffer, data)
			return data
		}
	}

	def readInt8(self) {
		if self.containsInt8() {
			data = int8()
			DataStream.g_lib.call('mint_datastream_read', self.buffer, data)
			return data
		}
	}

	def readInt16(self) {
		if self.containsInt16() {
			data = int16()
			DataStream.g_lib.call('mint_datastream_read', self.buffer, data)
			return data
		}
	}

	def readInt32(self) {
		if self.containsInt32() {
			data = int32()
			DataStream.g_lib.call('mint_datastream_read', self.buffer, data)
			return data
		}
	}

	def readInt64(self) {
		if self.containsInt64() {
			data = int64()
			DataStream.g_lib.call('mint_datastream_read', self.buffer, data)
			return data
		}
	}

	def readUInt8(self) {
		if self.containsUInt8() {
			data = uint8()
			DataStream.g_lib.call('mint_datastream_read', self.buffer, data)
			return data
		}
	}

	def readUInt16(self) {
		if self.containsUInt16() {
			data = uint16()
			DataStream.g_lib.call('mint_datastream_read', self.buffer, data)
			return data
		}
	}

	def readUInt32(self) {
		if self.containsUInt32() {
			data = uint32()
			DataStream.g_lib.call('mint_datastream_read', self.buffer, data)
			return data
		}
	}

	def readUInt64(self) {
		if self.containsUInt64() {
			data = uint64()
			DataStream.g_lib.call('mint_datastream_read', self.buffer, data)
			return data
		}
	}

	def readNumber(self) {
		if self.containsNumber() {
			data = number()
			DataStream.g_lib.call('mint_datastream_read', self.buffer, data)
			return data
		}
	}

	def readBoolean(self) {
		if self.containsBoolean() {
			data = boolean()
			DataStream.g_lib.call('mint_datastream_read', self.buffer, data)
			return data
		}
	}

	def readString(self) {
		if self.containsString() {
			data = string()
			DataStream.g_lib.call('mint_datastream_read', self.buffer, data)
			return data
		}
	}

	def write(self, data) {
		DataStream.g_lib.call('mint_datastream_write', self.buffer, data)
	}

	def erase(self, count) {
		DataStream.g_lib.call('mint_datastream_erase', self.buffer, count)
	}

	def size(self) {
		return DataStream.g_lib.call('mint_datastream_size', self.buffer)
	}

	def isEmpty(self) {
		return DataStream.g_lib.call('mint_datastream_empty', self.buffer)
	}

	def getBuffer(self) {
		return self.buffer
	}

	def <<(self, data) {
		self.write(data)
		return self
	}

	def >>(self, data) {
		switch typeof data {
		case 'int8':
			data := self.readInt8()
			break
		case 'int16':
			data := self.readInt16()
			break
		case 'int32':
			data := self.readInt32()
			break
		case 'int64':
			data := self.readInt64()
			break
		case 'uint8':
			data := self.readUInt8()
			break
		case 'uint16':
			data := self.readUInt16()
			break
		case 'uint32':
			data := self.readUInt32()
			break
		case 'uint64':
			data := self.readUInt64()
			break
		case 'boolean':
			data := self.readBoolean()
			break
		case 'number':
			data := self.readNumber()
			break
		case 'string':
			data := self.readString()
			break
		default:
			/// @todo handle other cases
			break
		}

		return self
	}

	- @g_lib = lib('libmint-serializer')
	- buffer = null
}
