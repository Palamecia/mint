load mint.lang
load mint.type

class StringStream {
	def new(self, str) {
		switch typeof str {
		case 'string':
			self.str = str
			break
		default:
			self.str = string(str)
			break
		}
		return self
	}

	def readChar(self) {
		if self.pos < self.str.size() {
			return self.str[self.pos++]
		}
	}

	def readWord(self) {
		while self.pos < self.str.size() and self.str[self.pos] =~ /\s/ {
			self.pos++
		}
		return self.readUntil(/\s/)
	}

	def readLine(self) {
		while self.pos < self.str.size() and self.str[self.pos] == '\n' {
			self.pos++
		}
		return self.readUntil('\n')
	}

	def readLines(self) {
		lines = []
		while not self.isEmpty() {
			lines << self.readLine()
		}
		return lines
	}

	def read(self) {
		if self.pos < self.str.size() {
			str = self.str[self.pos...self.str.size()]
			self.pos = self.str.size()
			return str
		}
	}

	def write(self, data) {
		self.str << data
	}

	/**
	 * Returns the whole edited string.
	 */
	def toString(self) {
		return self.str
	}

	/**
	 * Returns `true` if the current edited string has no more data to read;
	 * otherwise returns `false`.
	 */
	def isEmpty(self) {
		return self.pos == self.str.size()
	}

	- def readUntil(self, delim) {
		if self.pos < self.str.size() {
			if is_defined(index = self.str.indexOf(delim, self.pos)) {
				str = self.str[self.pos...index]
				self.pos = index
			} else {
				str = self.str[self.pos...self.str.size()]
				self.pos = self.str.size()
			}
			return str
		}
	}

	- str = null
	- pos = 0
}