/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {StringStream} class which allow to use a string
 * object as a stream.
 */

load mint.lang
load mint.type

/**
 * This class provides an interface to use an instance of string as a stream.
 */
class StringStream {
	/**
	 * Creates a new stream on the `str` object. If the object is an instance
	 * of string, it will be directly used to be updated on write operations;
	 * otherwise the object is cast to string using the `toString` method. The
	 * writed data can then only be retrived by read operations.
	 */
	const def new(self, str) {
		switch typeof str {
		case 'string':
			self.str = str
			break
		default:
			self.str = str.toString()
			break
		}
		return self
	}

	/**
	 * Returns the next character of the string without moving the read index.
	 */
	const def getChar(self) {
		if self.pos < self.str.size() {
			return self.str[self.pos]
		}
	}

	/**
	 * Returns the next character of the string and move the read index to the
	 * next element.
	 */
	const def readChar(self) {
		if self.pos < self.str.size() {
			return self.str[self.pos++]
		}
	}

	/**
	 * Returns the next word of the string and move the read index to the
	 * next element. Words are separated by whitespace (i.e., all characters
	 * for which {isSpace} returns `true`).
	 * 
	 * Leading whitespace are skipped.
	 */
	const def readWord(self) {
		while self.pos < self.str.size() and self.str[self.pos] =~ /\s/ {
			self.pos++
		}
		return self.readUntil(/\s/)
	}

	/**
	 * Returns the next line from the string and move the read index to the
	 * next element. Data is read until a `'\n'` character is read or if the
	 * end of stream is detected.
	 */
	const def readLine(self) {
		var line = self.readUntil('\n')
		if self.pos < self.str.size() {
			self.pos++ // skip the '\n' character
		}
		return line
	}

	/**
	 * Returns an iterator on each remaining lines of the string.
	 */
	const def readLines(self) {
		while not self.isEmpty() {
			yield self.readLine()
		}
	}

	/**
	 * Returns all remaining data from the string.
	 */
	const def read(self) {
		if self.pos < self.str.size() {
			var str = self.str[self.pos...self.str.size()]
			self.pos = self.str.size()
			return str
		}
	}

	/**
	 * Reads data from the string until `delim` is found, and returns it. The
	 * read index of the stream is then moved to the first character
	 * identified by `delim`.
	 */
	const def readUntil(self, delim) {
		if self.pos < self.str.size() {
			if isDefined(index = self.str.indexOf(delim, self.pos)) {
				var str = self.str[self.pos...index]
				self.pos = index
			} else {
				var str = self.str[self.pos...self.str.size()]
				self.pos = self.str.size()
			}
			return str
		}
	}

	/**
	 * Appends `data` to the end of the string.
	 */
	const def write(self, data) {
		self.str << data
	}

	/**
	 * Reads a word from the stream and stores it in `data`, then returns a
	 * reference to the stream. Words are separated by whitespace (i.e., all
	 * characters for which {isSpace} returns `true`).
	 * 
	 * Leading whitespace are skipped.
	 */
	const def >>(self, data) {
		data := self.readWord()
		return self
	}

	/**
	 * Writes the string `data` to the stream, and returns a reference to the
	 * stream.
	 */
	const def <<(self, data) {
		self.write(data)
		return self
	}

	/**
	 * Returns the whole edited string.
	 */
	const def toString(const self) {
		return self.str
	}

	/**
	 * Returns `true` if the current edited string has no more data to read;
	 * otherwise returns `false`.
	 */
	const def isEmpty(const self) {
		return self.pos == self.str.size()
	}

	/// Internal string object.
	- str = null

	/// Internal read index.
	- pos = 0
}
