/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {TextStream} class which implement a stream
 * interface for reading and writing text on any kind of object.
 */

load mint.lang

/**
 * This class provides an interface to use any object as a stream for reading
 * and writing text.
 */
class TextStream {
	/**
	 * Creates a new stream on the `stream` object.
	 * 
	 * If the object provides all the methods of a stream object (`readChar`,
	 * `readWord`, `readLine`, `readLines`, `read` and `write`), that methods
	 * are directly used by the class.
	 * 
	 * If the object provides at least `read` and `write` methods, the object
	 * is used through an instance of {BufferedStream}. The `read` method can
	 * also be replaced by a `readString` and a `readDataStream` or `readUInt8`
	 * method.
	 * 
	 * If the object does not provides any of that methods, it is used through
	 * an instance of {StringStream}.
	 */
	const def new(self, stream) {
		self.stream = self.createInternalStream(stream)
		return self
	}

	/**
	 * Returns the codec that is current assigned to the stream. It correspond
	 * to the codec of the underling stream or `none` if the underling stream
	 * does not support codec.
	 */
	const def getCodec(const self) {
		if defined self.stream.getCodec {
			return self.stream.getCodec()
		}
	}

	/**
	 * Forwards the `codec` to the underling object if supported.
	 */
	const def setCodec(self, codec) {
		if defined self.stream.setCodec {
			self.stream.setCodec(codec)
		}
	}

	/**
	 * Reads the next character from the stream, and returns it as a string.
	 * Data is read until a valid character is read or if the end of stream
	 * is detected.
	 */
	const def readChar(self) {
		if isDefined(var c = self.stream.readChar()) {
			return c.toString()
		}
	}

	/**
	 * Reads a word from the stream, and returns it as a string. Words are
	 * separated by whitespace (i.e., all characters for which {isSpace}
	 * returns `true`).
	 * 
	 * Leading whitespace are skipped.
	 */
	const def readWord(self) {
		if isDefined(var word = self.stream.readWord()) {
			return word.toString()
		}
	}

	/**
	 * Reads the next line from the stream, and returns it as a string.
	 * Data is read until a `'\n'` character is read or if the end of
	 * stream is detected.
	 */
	const def readLine(self) {
		if isDefined(var line = self.stream.readLine()) {
			return line.toString()
		}
	}

	/**
	 * Returns an iterator on each remaining lines of the stream.
	 */
	const def readLines(self) {
		for var line in self.stream.readLines() {
			yield line.toString()
		}
	}

	/**
	 * Reads all remaining data from the stream, and returns it as a string.
	 */
	const def read(self) {
		if isDefined(var content = self.stream.read()) {
			return content.toString()
		}
	}

	/**
	 * Writes the content of `data` to the stream.
	 * 
	 * The `write` method of the underling object is used to write the data.
	 */
	const def write(self, data) {
		self.stream.write(data.toString())
	}

	/**
	 * Reads a word from the stream and stores it in `data`, then returns a
	 * reference to the stream. Words are separated by whitespace (i.e., all
	 * characters for which {isSpace} returns `true`).
	 * 
	 * Leading whitespace are skipped.
	 */
	const def >>(self, data) {
		data := self.readWord()
		return self
	}

	/**
	 * Writes the string `data` to the stream, and returns a reference to the
	 * stream. The string is first encoded using the assigned codec (the default
	 * is UTF-8) before it is written to the stream.
	 */
	const def <<(self, data) {
		self.write(data)
		return self
	}

	/**
	 * Returns `true` if the stream has no more data to read; otherwise returns
	 * `false`.
	 */
	const def isEmpty(const self) {
		if defined self.stream.isEmpty {
			return self.stream.isEmpty()
		}
		if defined self.stream.isOver {
			return self.stream.isOver()
		}
		if defined self.stream.atEnd {
			return self.stream.atEnd()
		}
		return false
	}

	/**
	 * Returns a stream object for stream-like manipulations on the `stream`
	 * object.
	 */
	- const def createInternalStream(self, stream) {

		if defined stream.read and defined stream.write {

			if defined stream.readChar and defined stream.readWord and defined stream.readLine and defined stream.readLines {
				return stream
			}

			load serializer.bufferedstream
			return BufferedStream(stream)
		}

		if defined stream.readString and (defined stream.readDataStream or defined stream.readUInt8) and defined stream.write {
			load serializer.bufferedstream
			return BufferedStream(stream)
		}

		load serializer.stringstream
		return StringStream(stream)
	}

	/// Internal underling stream.
	- stream = null
}
