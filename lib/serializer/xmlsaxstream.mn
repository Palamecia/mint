/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {Serializer.XmlSaxStream} class which allow to read
 * and write XML documents with a SAX algorithm.
 */

load serializer.xmlstream
load exception.exception
load codec.iconv

package Serializer {

/**
 * This class class provides a way to read and write XML documents using a SAX
 * algorithm.
 */
class XmlSaxStream : Serializer.XmlStream {
	/**
	 * Creates a new stream for reading and writing data using `stream`.
	 */
	const def new(self, stream) {
		if self = Serializer.XmlStream.new(self, stream) {
			return self
		}
	}

	/**
	 * Returns the handle used to handle XML content.
	 */
	const def getHandle(const self) {
		return self.handle
	}

	/**
	 * Sets the handle used to handle XML content.
	 */
	const def setHandle(self, handle) {
		self.handle = handle
	}

	/**
	 * Reads the content of the stream. Returns `true` if all encountred events
	 * have been correctly handled by the handler; otherwise returns `false`.
	 * If the content of the stream is not a valid XML, an instance of
	 * {Serializer.DocumentStream.InvalidDocument} is raised.
	 */
	override const def read(self) {
		if defined self.handle {
			while let token = Serializer.XmlStream.read(self) {
				switch token {
				case Serializer.XmlStream.TokenType.ProcessingInstruction:
					if not self.handle.onProcessingInstruction(self.getProcessingInstructionTarget(), self.getProcessingInstructionData()) {
						return false
					}
					break
				case Serializer.XmlStream.TokenType.StartDocument:
					if not self.handle.onStartDocument() {
						return false
					}
					break
				case Serializer.XmlStream.TokenType.EndDocument:
					if not self.handle.onEndDocument() {
						return false
					}
					break
				case Serializer.XmlStream.TokenType.StartElement:
					if not self.handle.onStartElement(self.getNamespaceUri(), self.getName(), self.getQualifiedName(), self.getAttributes()) {
						return false
					}
					break
				case Serializer.XmlStream.TokenType.EndElement:
					if not self.handle.onEndElement(self.getNamespaceUri(), self.getName(), self.getQualifiedName()) {
						return false
					}
					break
				case Serializer.XmlStream.TokenType.Characters:
					if not self.handle.onCharacters(self.getText()) {
						return false
					}
					break
				case Serializer.XmlStream.TokenType.Comment:
					if not self.handle.onComment(self.getText()) {
						return false
					}
					break
				case Serializer.XmlStream.TokenType.CDATA:
					if not self.handle.onCData(self.getText()) {
						return false
					}
					break
				case Serializer.XmlStream.TokenType.DTD:
					if not self.handle.onDtd(self.getText()) {
						return false
					}
					break
				}
			}
			return true
		}
	}

	/// Internal read handle.
	- final handle = none
}

/**
 * This class provides an interface to handle {Serializer.XmlSaxStream} events.
 */
class XmlSaxHandle {
	/**
	 * The reader calls this function when it starts parsing the document. The
	 * reader calls this function just once.
	 * 
	 * If this function returns `false` the reader stops parsing and report an
	 * unfinished parsing.
	 */
	def onStartDocument(self) {
		return true
	}

	/**
	 * The reader calls this function after it has finished parsing. It is
	 * called just once, and is the last handler function called. It is
	 * called after the reader has read all input.
	 * 
	 * If this function returns `false` the reader stops parsing and report an
	 * unfinished parsing.
	 */
	def onEndDocument(self) {
		return true
	}

	/**
	 * The reader calls this function when it has parsed a start element tag.
	 * The tag name is given through the `localName` parameter and each attributes
	 * of the tag is inserted in an hash (name to value) and passed through the
	 * `attributes` parameter.
	 * 
	 * There is a corresponding {@see onEndElement} call when the corresponding
	 * end element tag is read. The {@see onStartElement} and {@see onEndElement}
	 * calls are always nested correctly. Empty element tags (e.g. `<.../>`)
	 * cause a {@see onStartElement} call to be immediately followed by an
	 * {@see onEndElement} call.
	 * 
	 * If this function returns `false` the reader stops parsing and report an
	 * unfinished parsing.
	 */
	def onStartElement(self, namespaceUri, localName, qualifiedName, attributes) {
		return true
	}

	/**
	 * The reader calls this function when it has parsed an end element tag with
	 * the name `localName`.
	 * 
	 * If this function returns `false` the reader stops parsing and report an
	 * unfinished parsing.
	 */
	def onEndElement(self, namespaceUri, localName, qualifiedName) {
		return true	
	}

	/**
	 * The reader calls this function when it has parsed a processing instruction.
	 * The target name is given through the `name` parameter and each attributes
	 * of the data is inserted in an hash (name to value) and passed through the
	 * `attributes` parameter.
	 * 
	 * If this function returns `false` the reader stops parsing and report an
	 * unfinished parsing.
	 */
	def onProcessingInstruction(self, name, attributes) {
		return true
	}

	/**
	 * The reader calls this function when it has parsed a chunk of normal character
	 * data. The character data is given through the `content` parameter.
	 * 
	 * If this function returns `false` the reader stops parsing and report an
	 * unfinished parsing.
	 */
	def onCharacters(self, content) {
		return true
	}

	/**
	 * The reader calls this function when it has parsed a comment. The comment
	 * content is given through the `content` parameter.
	 * 
	 * If this function returns `false` the reader stops parsing and report an
	 * unfinished parsing.
	 */
	def onComment(self, content) {
		return true
	}

	/**
	 * The reader calls this function when it has parsed a chunk of character data
	 * inside a CDATA section. The character data is given through the `content`
	 * parameter. The default implementation calls {@see onCharacters}.
	 * 
	 * If this function returns `false` the reader stops parsing and report an
	 * unfinished parsing.
	 */
	def onCData(self, content) {
		return self.onCharacters(content)
	}

	/**
	 * The reader calls this function when it has parsed a chunk of character data
	 * inside a DTD section. The character data is given through the `content`
	 * parameter.
	 * 
	 * If this function returns `false` the reader stops parsing and report an
	 * unfinished parsing.
	 */
	def onDtd(self, content) {
		return true
	}
}

}
