load system.timezone
load system.locale
load mint.type

package System {

class Date {
	def new(self) {
		self.timezone = System.TimeZone.current()
		self.timepoint = System.Date.g_lib.call('mint_date_current_timepoint')
		self.timepoint.delete = def [g_lib = System.Date.g_lib] (self) {
			g_lib.call('mint_date_delete', self)
		}
		return self
	}

	def new(self, desc) {
		switch typeof desc {
		case 'number':
			self.timezone = System.TimeZone.current()
			self.timepoint = System.Date.g_lib.call('mint_date_seconds_to_timepoint', desc)
			self.timepoint.delete = def [g_lib = System.Date.g_lib] (self) {
				g_lib.call('mint_date_delete', self)
			}
			return self

		case 'string':
			timepoint, timezone = System.Date.g_lib.call('mint_parse_iso_date', desc)
			if self.timepoint = timepoint {
				self.timezone = System.TimeZone(timezone)
				self.timepoint.delete = def [g_lib = System.Date.g_lib] (self) {
					g_lib.call('mint_date_delete', self)
				}
				return self
			}
			break

		case 'System.Date':
			return desc

		default:
			self.timezone = System.TimeZone.current()
			self.timepoint = System.Date.g_lib.call('mint_date_milliseconds_to_timepoint', number(desc))
			self.timepoint.delete = def [g_lib = System.Date.g_lib] (self) {
				g_lib.call('mint_date_delete', self)
			}
			return self
		}
	}

	def new(self, year, month, day, h = 0, min = 0, sec = 0, ms = 0, timezone = none) {
		if defined timezone {
			self.timezone = System.TimeZone(timezone)
		} else {
			self.timezone = System.TimeZone.current()
		}
		if defined self.timezone {
			self.timepoint = System.Date.g_lib.call('mint_date_milliseconds_to_timepoint', self.timezone.millisecondsSinceEpoch(year, month, day, h, min, sec, ms))
			self.timepoint.delete = def [g_lib = System.Date.g_lib] (self) {
				g_lib.call('mint_date_delete', self)
			}
			return self
		}
	}

	@def current() {
		return System.Date()
	}

	def getYear(self) {
		year, month, day = self.timezone.timeFromMilliseconds(self)
		return year
	}

	def setYear(self, year) {
		_, month, day, h, min, sec, ms = self.timezone.timeFromMilliseconds(self)
		System.Date.g_lib.call('mint_date_set_milliseconds', self.timepoint, self.timezone.millisecondsSinceEpoch(year, month, day, h, min, sec, ms))
	}

	def getMonth(self) {
		year, month, day = self.timezone.timeFromMilliseconds(self)
		return month
	}

	def setMonth(self, month) {
		year, _, day, h, min, sec, ms = self.timezone.timeFromMilliseconds(self)
		System.Date.g_lib.call('mint_date_set_milliseconds', self.timepoint, self.timezone.millisecondsSinceEpoch(year, month, day, h, min, sec, ms))
	}

	def getYearDay(self) {
		return self.timezone.yearDayFromMilliseconds(self)
	}

	def getWeekDay(self) {
		return self.timezone.weekDayFromMilliseconds(self)
	}

	def getDay(self) {
		year, month, day = self.timezone.timeFromMilliseconds(self)
		return day
	}

	def setDay(self, day) {
		year, month, _, h, min, sec, ms = self.timezone.timeFromMilliseconds(self)
		System.Date.g_lib.call('mint_date_set_milliseconds', self.timepoint, self.timezone.millisecondsSinceEpoch(year, month, day, h, min, sec, ms))
	}

	def getHours(self) {
		year, month, day, h = self.timezone.timeFromMilliseconds(self)
		return h
	}

	def setHours(self, hours) {
		year, month, day, _, min, sec, ms = self.timezone.timeFromMilliseconds(self)
		System.Date.g_lib.call('mint_date_set_milliseconds', self.timepoint, self.timezone.millisecondsSinceEpoch(year, month, day, hours, min, sec, ms))
	}

	def getMinutes(self) {
		year, month, day, h, min = self.timezone.timeFromMilliseconds(self)
		return min
	}

	def setMinutes(self, minutes) {
		year, month, day, h, _, sec, ms = self.timezone.timeFromMilliseconds(self)
		System.Date.g_lib.call('mint_date_set_milliseconds', self.timepoint, self.timezone.millisecondsSinceEpoch(year, month, day, h, minutes, sec, ms))
	}

	def getSeconds(self) {
		year, month, day, h, min, sec = self.timezone.timeFromMilliseconds(self)
		return sec
	}

	def setSeconds(self, seconds) {
		year, month, day, h, min, _, ms = self.timezone.timeFromMilliseconds(self)
		System.Date.g_lib.call('mint_date_set_milliseconds', self.timepoint, self.timezone.millisecondsSinceEpoch(year, month, day, h, min, seconds, ms))
	}

	def getMilliseconds(self) {
		year, month, day, h, min, sec, ms = self.timezone.timeFromMilliseconds(self)
		return ms
	}

	def setMilliseconds(self, milliseconds) {
		year, month, day, h, min, sec = self.timezone.timeFromMilliseconds(self)
		System.Date.g_lib.call('mint_date_set_milliseconds', self.timepoint, self.timezone.millisecondsSinceEpoch(year, month, day, h, min, sec, milliseconds))
	}

	def getTimeZone(self) {
		return self.timezone
	}

	def setTimeZone(self, timezone) {
		self.timezone = timezone
	}

	def toNumber(self) {
		return System.Date.g_lib.call('mint_date_timepoint_to_milliseconds', self.timepoint)
	}

	def toString(self, format = none) {
		switch typeof format {
		case 'none':
			format = System.Locale.current().dateFormat()
			break
		case 'string':
			break
		case 'System.Locale':
			format = format.dateFormat()
			break
		default:
			format = string(format)
		}
		/// @todo return formated string
	}

	def toSeconds(self) {
		return System.Date.g_lib.call('mint_date_timepoint_to_seconds', self.timepoint)
	}

	def toMilliseconds(self) {
		return System.Date.g_lib.call('mint_date_timepoint_to_milliseconds', self.timepoint)
	}

	def ==(self, other) {
		if date = System.Date(other) {
			return System.Date.g_lib.call('mint_date_equals', self.timepoint, date.timepoint)
		}
		return false
	}

	def !=(self, other) {
		if date = System.Date(other) {
			return not System.Date.g_lib.call('mint_date_equals', self.timepoint, date.timepoint)
		}
		return true
	}

	/**
	 * Returns the pointer to the internal `std::chrono::milliseconds` instance.
	 */
	~ const def to_std_chrono_milliseconds(self) {
		return self.timepoint
	}

	- @g_lib = lib('libmint-system')
	- timepoint = null
	- timezone = null
}

}
