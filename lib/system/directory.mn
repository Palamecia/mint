/**
 * @license
 * Copyright (c) 2025 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {System.Directory} class which allow interactions
 * with the filesystem for one specific directory or for navigation over the
 * filesystem.
 */

load system.filesystem
load system.file

package System {

	/**
	 * This class is used to manipulate path names, access information regarding
	 * paths and files, and manipulate the underling file system.
	 * 
	 * The "/" character is used as a universal directory separator in the same
	 * way that "/" is used as a path separator in URLs. If you always use "/"
	 * as a directory separator, this class will translate your paths to conform
	 * to the underling operating system.
	 */
	class Directory {

		/**
		 * Creates a new instance pointing to the directory specified by the
		 * given `path`.
		 * 
		 * If `path` is already an instance of {System.Directory}, this instance
		 * is returned.
		 * 
		 * If `path` provides a `toDirectory` method, this method is used to
		 * create the returned value; otherwise the variable is used as a string
		 * to get the target directory path.
		 */
		const def new(self, path = '.') {
			if typeof path == 'System.Directory' {
				return path
			}
			if defined path.toDirectory {
				return path.toDirectory()
			}
			self.path = System.Directory.g_lib.call('mint_directory_to_native_path', path)
			return self
		}

		/**
		 * Returns an instance of {System.Directory} that point to the
		 * sub-directory identified by `path`.
		 */
		const def /(self, path) {
			return System.Directory(self.path + System.FileSystem.Separator + path)
		}

		/**
		 * Returns the root directory.
		 */
		@const def root() {
			return System.Directory(System.Directory.g_lib.call('mint_directory_root'))
		}

		/**
		 * Returns the user's home directory.
		 */
		@const def home() {
			return System.Directory(System.Directory.g_lib.call('mint_directory_home'))
		}

		/**
		 * Returns the application's current directory.
		 */
		@const def current() {
			return System.Directory(System.Directory.g_lib.call('mint_directory_current'))
		}

		/**
		 * Sets the application's current working directory to `path`.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		@const def setCurrent(path) {
			var dir = System.Directory(path)
			if var errno = System.Directory.g_lib.call('mint_directory_set_current', dir.getAbsolutePath()) {
				raise Exception.SystemError(errno, dir)
			}
		}

		/**
		 * Returns the name of the directory, excluding the path.
		 */
		const def getName(const self) {
			if isDefined(var index = self.path.lastIndexOf(System.FileSystem.SeparatorPattern)) {
				return self.path[(index + 1)...self.path.size()]
			}
			return self.path
		}

		/**
		 * Returns the directory path.
		 */
		const def getPath(const self) {
			return self.path
		}

		/**
		 * Returns the directory path as an absolute path.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def getAbsolutePath(const self) {
			let (path, errno) = System.Directory.g_lib.call('mint_directory_absolute_path', self.path)
			if errno {
				raise Exception.SystemError(errno, self)
			}
			return path
		}

		/**
		 * Returns the directory path as a canonical path.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def getCanonicalPath(const self) {
			let (path, errno) = System.Directory.g_lib.call('mint_directory_canonical_path', self.path)
			if errno {
				raise Exception.SystemError(errno, self)
			}
			return path
		}

		/**
		 * Returns the file identified by `fileName` under the directory as an
		 * instance of {System.File}.
		 */
		const def getFile(const self, fileName) {
			return System.File(self.getFilePath(fileName))
		}

		/**
		 * Returns the path of the file identified by `fileName` under the
		 * directory.
		 */
		const def getFilePath(const self, fileName) {
			return self.path + System.FileSystem.Separator + fileName
		}

		/**
		 * Returns the path of the file identified by `fileName` under the
		 * directory as an absolute path.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def getAbsoluteFilePath(const self, fileName) {
			let (path, errno) = System.Directory.g_lib.call('mint_directory_absolute_path', self.path + System.FileSystem.Separator + fileName)
			if errno {
				raise Exception.SystemError(errno, self)
			}
			return path
		}

		/**
		 * Returns the path of the file identified by `fileName` under the
		 * directory as a canonical path.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def getCanonicalFilePath(const self, fileName) {
			let (path, errno) = System.Directory.g_lib.call('mint_directory_canonical_path', self.path + System.FileSystem.Separator + fileName)
			if errno {
				raise Exception.SystemError(errno, self)
			}
			return path
		}

		/**
		 * Returns the path of the file identified by `fileName` as a path
		 * relative to the directory.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def getRelativeFilePath(const self, fileName) {
			let (path, errno) = System.Directory.g_lib.call('mint_directory_relative_path', self.path, fileName)
			if errno {
				raise Exception.SystemError(errno, self)
			}
			return path
		}

		/**
		 * Changes directory to `dir_name`.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def cd(self, dir_name) {
			if self.path.isEmpty() or self.path[-1] =~ System.FileSystem.SeparatorPattern {
				var newPath = self.path + dir_name
			} else {
				var newPath = self.path + System.FileSystem.Separator + dir_name
			}
			let (newPathExists, errno) = System.Directory.g_lib.call('mint_file_exists', newPath)
			if errno {
				raise Exception.SystemError(errno, self)
			}
			if not newPathExists {
				raise Exception.SystemError(Exception.SystemError.Errno.ENOTDIR, self)
			}
			let newPathIsDirectory, errno = System.Directory.g_lib.call('mint_file_is_directory', newPath)
			if errno {
				raise Exception.SystemError(errno, self)
			}
			if not newPathIsDirectory {
				raise Exception.SystemError(Exception.SystemError.Errno.ENOTDIR, self)
			}
			self.path = newPath
		}

		/**
		 * Changes directory by moving one directory up from the current
		 * directory.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def cdUp(self) {
			if self.isRoot() {
				raise Exception.SystemError(Exception.SystemError.Errno.ENOTDIR, self)
			}
			if self.path.isEmpty() {
				self.path = System.Directory.current()
			}
			var path = self.path
			var index = path.lastIndexOf(System.FileSystem.SeparatorPattern)
			if not defined index {
				path = self.getAbsolutePath()
				index = path.lastIndexOf(System.FileSystem.SeparatorPattern)
			}
			if path[-1] =~ System.FileSystem.SeparatorPattern {
				index = path.lastIndexOf(System.FileSystem.SeparatorPattern, index)
			}
			if defined index {
				if index {
					self.path = path[0...index]
				} else {
					self.path = path[0]
				}
			} else {
				raise Exception.SystemError(Exception.SystemError.Errno.ENOTDIR, self)
			}
		}

		/**
		 * Returns an iterator on each file and directory name contained in this
		 * directory. If `filter` is given and is a valid regex, the returned
		 * iterator is pre-filtered to provide only name that match the pattern.
		 * 
		 * The results of this method can be used with the {System.Directory.getFile}
		 * method to get extra informations.
		 * 
		 * **Example**:
		 * ```mn
		 * dir = System.Directory(path)
		 * 
		 * for entry in dir.list() {
		 *     file = dir.getFile(entry)
		 *     if file.isDirectory() {
		 *         // handle directories
		 *     } else {
		 *         // handle files
		 *     }
		 * }
		 * ```
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def list(const self, filter = none) {
			var (entries, errno) = System.Directory.g_lib.call('mint_directory_list', self.path)
			if errno {
				raise Exception.SystemError(errno, self)
			}
			if defined filter {
				for var entry in entries {
					if entry =~ filter {
						yield entry
					}
				}
			} else {
				for var entry in entries {
					yield entry
				}
			}
		}

		/**
		 * Returns `true` if the directory exists; otherwise returns `false`.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def exists(const self) {
			let (result, errno) = System.Directory.g_lib.call('mint_file_exists', self.path)
			if errno {
				raise Exception.SystemError(errno, self)
			}
			return result
		}

		/**
		 * Returns `true` if the file or directory called `fileName` exists;
		 * otherwise returns `false`.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def contains(const self, fileName) {
			let (result, errno) = System.Directory.g_lib.call('mint_file_exists', self.getFilePath(fileName))
			if errno {
				raise Exception.SystemError(errno, self)
			}
			return result
		}

		/**
		 * Removes the file or directory `fileName`. If `fileName` identify
		 * a directory, all its content is removed recursively.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def remove(self, fileName) {
			if var errno = System.Directory.g_lib.call('mint_file_remove', self.path.getAbsoluteFilePath(fileName)) {
				raise Exception.SystemError(errno, self)
			}
		}

		/**
		 * Renames a file or directory from `oldFileName` to `newFileName`.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def rename(self, oldFileName, newFileName) {
			if var errno = System.Directory.g_lib.call('mint_file_rename', self.path.getAbsoluteFilePath(oldFileName), self.path.getAbsoluteFilePath(newFileName)) {
				raise Exception.SystemError(errno, self)
			}
		}

		/**
		 * Removes the directory specified by `path`. The directory must be empty
		 * to succeed.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def rmdir(self, path) {
			if var errno = System.Directory.g_lib.call('mint_directory_rmdir', self.getAbsoluteFilePath(path)) {
				raise Exception.SystemError(errno, self)
			}
		}

		/**
		 * Removes the directory path `path`. The function will remove all parent
		 * directories in `path`, provided that they are empty. This is the opposite
		 * of {System.Directory.mkpath}.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def rmpath(self, path) {
			if var errno = System.Directory.g_lib.call('mint_directory_rmpath', self.getAbsoluteFilePath(path)) {
				raise Exception.SystemError(errno, self)
			}
		}

		/**
		 * Creates a sub-directory called `path` with default permissions.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def mkdir(self, path) {
			if var errno = System.Directory.g_lib.call('mint_directory_mkdir', self.getAbsoluteFilePath(path)) {
				raise Exception.SystemError(errno, self)
			}
		}

		/**
		 * Creates the directory path `path` under this directory. The function
		 * will create all parent directories necessary to create the directory.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def mkpath(self, path) {
			if var errno = System.Directory.g_lib.call('mint_directory_mkpath', self.getAbsoluteFilePath(path)) {
				raise Exception.SystemError(errno, self)
			}
		}

		/**
		 * Converts the directory path to an absolute path. If it is already
		 * absolute nothing happens.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def makeAbsolute(self) {
			self.path = self.getAbsolutePath()
		}

		/**
		 * Converts the directory path to a canonical path. If it is already
		 * canonical nothing happens.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def makeCanonical(self) {
			self.path = self.getCanonicalPath()
		}

		/**
		 * Returns `true` if the directory's path is absolute; otherwise returns
		 * `false`.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def isAbsolute(const self) {
			return self.path == self.getAbsolutePath()
		}

		/**
		 * Returns `true` if the directory's path is canonical; otherwise returns
		 * `false`.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def isCanonical(const self) {
			return self.path == self.getCanonicalPath()
		}

		/**
		 * Returns `true` if the directory path is relative; otherwise returns
		 * `false`. (Under Unix a path is relative if it does not start with a
		 * "/").
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def isRelative(const self) {
			return self.path != self.getAbsolutePath()
		}

		/**
		 * Returns `true` if the directory is readable and we can open files by
		 * name; otherwise returns `false`.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def isReadable(const self) {
			let (result, errno) = System.Directory.g_lib.call('mint_file_is_readable', self.path)
			if errno {
				raise Exception.SystemError(errno, self)
			}
			return result
		}

		/**
		 * Returns `true` if the directory is the root directory; otherwise returns
		 * `false`.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def isRoot(const self) {
			let (result, errno) = System.Directory.g_lib.call('mint_file_is_root', self.path)
			if errno {
				raise Exception.SystemError(errno, self)
			}
			return result
		}

		/**
		 * Returns `true` if the path identified by `path` is a sub path of `self`;
		 * otherwise returns `false`.
		 * 
		 * An instance of {Exception.SystemError} is raised on error.
		 */
		const def isSubPath(const self, path) {
			let (result, errno) = System.Directory.g_lib.call('mint_directory_is_subpath', self.path, path)
			if errno {
				raise Exception.SystemError(errno, self)
			}
			return result
		}

    	/// Global library handle.
		- @g_lib = lib('libmint-system')

		/// Internal directory path.
		- final path = ''
	}

	/// Shortcut alias for {System.Directory}.
	@const Dir = System.Directory
}
