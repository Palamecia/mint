load system.file

package System {

	/*!
	* @class Directory
	*/
	class Directory {

		@const separator

		/*!
		* @brief Directory constructor
		* @param path directory's path
		* @return directory object
		*/
		def new(self, path) {
			if typeof path == 'System.Directory' {
				return path
			}
			if defined path.toDirectory {
				return path.toDirectory()
			}
			self.path = Directory.g_lib.call('mint_directory_to_native_path', path)
			return self
		}

		def /(self, path) {
			return Directory(self.path + Directory.separator + path)
		}

		@def home() {
			return Directory(Directory.g_lib.call('mint_directory_home'))
		}

		@def current() {
			return Directory(Directory.g_lib.call('mint_directory_current'))
		}

		def getPath(self) {
			return self.path
		}

		def absolutePath(self) {
			return Directory.g_lib.call('mint_directory_absolute_path', self.path)
		}

		def getFile(self, file_name) {
			return File(self.filePath(file_name))
		}

		def filePath(self, file_name) {
			return self.path + Directory.separator + file_name
		}

		def absoluteFilePath(self, file_name) {
			return Directory.g_lib.call('mint_directory_absolute_path', self.path) + Directory.separator + file_name
		}

		def relativeFilePath(self, file_name) {
			return Directory.g_lib.call('mint_directory_relative_path', self.path, file_name)
		}

		def cd(self, dir_name) {
			if self.path.isEmpty() or self.path[-1] == Directory.separator {
				new_path = self.path + dir_name
			} else {
				new_path = self.path + Directory.separator + dir_name
			}
			if Directory.g_lib.call('mint_file_exists', new_path) and Directory.g_lib.call('mint_file_is_directory', new_path) {
				self.path = new_path
				return true
			}
			return false
		}

		def cdUp(self) {
			if not self.isRoot() {
				if self.path.isEmpty() {
					self.path = Directory.current()
				}
				path = self.path
				index = path.lastIndexOf(Directory.separator)
				if not defined index {
					path = self.absolutePath()
					index = path.lastIndexOf(Directory.separator)
				}
				if path[-1] == Directory.separator {
					index = path.lastIndexOf(Directory.separator, index)
				}
				if defined index {
					if index {
						self.path = path[0...index]
					} else {
						self.path = path[0]
					}
					return true
				}
			}
			return false
		}

		def list(self, filter = none) {
			entries = Directory.g_lib.call('mint_directory_list', self.path)
			if defined filter {
				for entry in entries {
					if entry =~ filter {
						yield entry
					}
				}
			} else {
				for entry in entries {
					yield entry
				}
			}
		}

		def exists(self) {
			return Directory.g_lib.call('mint_file_exists', self.path)
		}

		def contains(self, file_name) {
			return Directory.g_lib.call('mint_file_exists', self.filePath(file_name))
		}

		def remove(self, file_name) {
			return Directory.g_lib.call('mint_file_remove', self.path.absoluteFilePath(file_name))
		}

		def rename(self, old_file_name, new_file_name) {
			return Directory.g_lib.call('mint_file_rename', self.path.absoluteFilePath(old_file_name), self.path.absoluteFilePath(new_file_name))
		}

		def rmdir(self, path) {
			return Directory.g_lib.call('mint_directory_rmdir', self.absoluteFilePath(path))
		}

		def rmpath(self, path) {
			return Directory.g_lib.call('mint_directory_rmpath', self.absoluteFilePath(path))
		}

		def mkdir(self, path) {
			return Directory.g_lib.call('mint_directory_mkdir', self.absoluteFilePath(path))
		}

		def mkpath(self, path) {
			return Directory.g_lib.call('mint_directory_mkpath', self.absoluteFilePath(path))
		}

		def makeAbsolute(self) {
			self.path = self.absolutePath()
		}

		def isAbsolute(self) {
			self.path == self.absolutePath()
		}

		def isRelative(self) {
			self.path != self.absolutePath()
		}

		def isReadable(self) {
			return Directory.g_lib.call('mint_file_is_readable', self.path)
		}

		def isRoot(self) {
			return Directory.g_lib.call('mint_file_is_root', self.path)
		}

		- path = ''
		- @g_lib = lib('libmint-system')
	}

	Directory.separator = lib('libmint-system').call('mint_directory_native_separator')

	@const Dir = Directory
}
