/*!
 * @class File
 */
class File {

    /*!
     * @brief file constructor
     * @param path path to file to open
     * @param mode file open mode
     * @return file object or null if error occured
     */
	def new(self, path, mode = 'r') {
	    self.path = path
		if self.obj = File.g_lib.call('mint_file_fopen', self.path, mode) {
            return self
        }
        return null
    }

    /*!
     * @brief file destructor
     */
    def delete(self) {
	    if self.obj {
		    File.g_lib.call('mint_file_fclose', self.obj)
        }
    }

    /*!
	 * @return
	 */
	def getPath(self) {
	    return self.path
	}

    /*!
	 * @brief
	 */
	def open(self, mode = 'r') {
	    if self.obj is null {
		    if self.obj = File.g_lib.call('mint_file_fopen', self.path, mode) {
			    return self
			}
			return null
		}
	}

    /*!
     * @brief
     */
    def close(self) {
	    if self.obj {
		    File.g_lib.call('mint_file_fclose', self.obj)
			self.obj = null
        }
    }

    /*!
	 * @return
	 */
	def isOpen(self) {
	    return self.obj != null
	}

    /*!
     * @brief read a character from a file
     */
    def readChar(self) {
	    if self.obj {
		    return File.g_lib.call('mint_file_fgetc', self.obj)
        }
    }

    /*!
     * @brief read a line from a file
     */
    def readLine(self) {
	    if self.obj {
		    return File.g_lib.call('mint_file_readline', self.obj)
        }
    }

    /*!
     * @brief read all the content of a file
     */
    def read(self) {
        content = ''
        while line = self.readLine() {
            content += line + '\n'
        }
        return content
    }

    - @g_lib = lib('libmint-system')
	- path = ''
	- obj = null
}

/*!
 * @brief
 * @param path 
 * @param mode 
 */
def open(path, mode = 'r') {
    return File(path, mode)
}
