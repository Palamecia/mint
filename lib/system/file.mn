/**
 * This module provides the {System.File} class which allow interactions with the
 * filesystem for one specific file.
 */

load mint.lang
load mint.function
load system.date
load system.directory
load exception.system

package System {

	/**
	 * This class provides informations about a file in the file system like path,
	 * size, rights, ...
	 * It also provides an interface to read or write data from/to the file.
	 */
	class File {

		/**
		 * This enum is used by the {System.File.permission} function to report the 
		 * permissions and ownership of a file. The values may be OR-ed together to
		 * test multiple permissions and ownership values.
		 */
		enum Permission {
			/// The file is readable by the owner of the file.
			ReadOwner	= 0x4000
			/// The file is writable by the owner of the file.
			WriteOwner	= 0x2000
			/// The file is executable by the owner of the file.
			ExecOwner	= 0x1000
			/// The file is readable by the user.
			ReadUser	= 0x0400
			/// The file is writable by the user.
			WriteUser	= 0x0200
			/// The file is executable by the user.
			ExecUser	= 0x0100
			/// The file is readable by the group.
			ReadGroup	= 0x0040
			/// The file is writable by the group.
			WriteGroup	= 0x0020
			/// The file is executable by the group.
			ExecGroup	= 0x0010
			/// The file is readable by anyone.
			ReadOther	= 0x0004
			/// The file is writable by anyone.
			WriteOther	= 0x0002
			/// The file is executable by anyone.
			ExecOther	= 0x0001
		}

		/**
		 * Creates a new instance pointing to the file specified by the given `path`.
		 */
		const def new(self, path) {
			self.path = File.g_lib.call('mint_directory_to_native_path', path)
			return self
		}

		/**
		 * Destroy the instance and close the file descriptor if it is open.
		 */
		const def delete(self) {
			if self.isOpen() {
				self.close()
			}
		}

		/**
		 * Returns the base name of the file without the path.
		 */
		const def baseName(const self) {
			var start = self.path.lastIndexOf(Directory.separatorPattern)
			if not defined start {
				start = 0
			} else {
				start++
			}
			var stop = self.path.indexOf('.', start)
			if not defined stop {
				stop = self.path.size()
			}
			return self.path[start...stop]
		}

		/**
		 * Returns the base name of the file without the path including each parts
		 * after a `.` (dot) character before the last suffix.
		 */
		const def completeBaseName(const self) {
			var start = self.path.lastIndexOf(Directory.separatorPattern)
			if not defined start {
				start = 0
			} else {
				start++
			}
			var stop = self.path.lastIndexOf('.')
			if not defined stop or stop < start {
				stop = self.path.size()
			}
			return self.path[start...stop]
		}

		/**
		 * Returns the suffix (extension) of the file.
		 */
		const def suffix(const self) {
			var start = self.path.lastIndexOf(Directory.separatorPattern)
			var stop = self.path.size()
			if not defined start {
				start = self.path.lastIndexOf('.')
				if not defined start {
					return ''
				}
				return self.path[start...stop]
			}
			var pos = self.path.lastIndexOf('.')
			if not defined pos or pos < start {
				return ''
			}
			pos++
			return self.path[pos...stop]
		}

		/**
		 * Returns the suffix (extension) of the file including each parts
		 * after a `.` (dot) character after the base name.
		 */
		const def completeSuffix(const self) {
			var start = self.path.lastIndexOf(Directory.separatorPattern)
			var stop = self.path.size()
			if defined start {
				start = self.path.indexOf('.', start)
				if not defined start {
					return ''
				}
				start++
				return self.path[start...stop]
			}
			start = self.path.indexOf('.')
			if not defined start {
				return ''
			}
			start++
			return self.path[start...stop]
		}

		/**
		 * Returns the name of the file, excluding the path.
		 */
		const def getName(const self) {
			if isDefined(var index = self.path.lastIndexOf(Directory.separatorPattern)) {
				return self.path[(index + 1)...self.path.size()]
			}
			return self.path
		}

		/**
		 * Returns the file name, including the path (which may be absolute or relative).
		 */
		const def getPath(const self) {
			return self.path
		}

		/**
		 * Returns an absolute path including the file name.
		 */
		const def absolutePath(const self) {
			return File.g_lib.call('mint_directory_absolute_path', self.path)
		}

		/**
		 * Returns the absolute path to the file or directory a symbolic link
		 * points to, or the object's path if it is not a symbolic link.
		 */
		const def symlinkTarget(const self) {
			return File.g_lib.call('mint_file_symlink_target', self.path)
		}

		/**
		 * Returns the path of the object's parent directory as a {System.Directory}
		 * object.
		 */
		const def getDirectory(const self) {
			if self.isDirectory() {
				return Directory(self.path)
			}
			if isDefined(index = self.path.lastIndexOf(Directory.separatorPattern)) {
				return Directory(self.path[0...index])
			}
			return Directory.current()
		}

		/**
		 * Returns the date when the file was created / born.
		 */
		const def birthTime(const self) {
			return System.Date(File.g_lib.call('mint_file_birth_time', self.path))
		}

		/**
		 * Returns the date when the file was last read (accessed).
		 */
		const def lastRead(const self) {
			return System.Date(File.g_lib.call('mint_file_last_read', self.path))
		}

		/**
		 * Returns the date when the file was last modified.
		 */
		const def lastModified(const self) {
			return System.Date(File.g_lib.call('mint_file_last_modified', self.path))
		}

		/**
		 * Returns `true` if the file exists; otherwise returns `false`.
		 */
		const def exists(const self) {
			return File.g_lib.call('mint_file_exists', self.path)
		}

		/**
		 * Returns the file size in bytes. If the file does not exist or cannot
		 * be fetched, `0` is returned.
		 */
		const def size(const self) {
			return File.g_lib.call('mint_file_size', self.path)
		}

		/**
		 * Converts the file's path to an absolute path if it is not already in that form.
		 */
		const def makeAbsolute(self) {
			self.path = self.absolutePath()
		}

		/**
		 * Returns `true` if the file path is absolute, otherwise returns `false` (i.e. the path is relative).
		 */
		const def isAbsolute(const self) {
			self.path == self.absolutePath()
		}

		/**
		 * Returns `true` if the file path is relative, otherwise returns `false` (i.e. the path is absolute).
		 */
		const def isRelative(const self) {
			self.path != self.absolutePath()
		}

		/**
		 * Returns `true` if this object points to a regular file or to a symbolic
		 * link to a regular file. Returns `false` if the object points to something
		 * which isn't a file, such as a directory.
		 */
		const def isFile(const self) {
			return File.g_lib.call('mint_file_is_file', self.path)
		}

		/**
		 * Returns `true` if this object points to a directory or to a symbolic
		 * link to a directory; otherwise returns `false`.
		 */
		const def isDirectory(const self) {
			return File.g_lib.call('mint_file_is_directory', self.path)
		}

		/**
		 * Returns `true` if this object points to a symbolic link; otherwise returns `false`.
		 */
		const def isSymlink(const self) {
			return File.g_lib.call('mint_file_is_symlink', self.path)
		}

		/**
		 * Returns `true` if this object points to a bundle or to a symbolic link
		 * to a bundle on macOS and iOS; otherwise returns `false`.
		 */
		const def isBundle(const self) {
			return File.g_lib.call('mint_file_is_bundle', self.path)
		}

		/**
		 * Returns `true` if the object points to a directory or to a symbolic link
		 * to a directory which is the root directory; otherwise returns `false`.
		 */
		const def isRoot(const self) {
			return File.g_lib.call('mint_file_is_root', self.path)
		}

		/**
		 * Returns `true` if the user can read the file; otherwise returns `false`.
		 */
		const def isReadable(const self) {
			return File.g_lib.call('mint_file_is_readable', self.path)
		}

		/**
		 * Returns `true` if the user can write to the file; otherwise returns `false`.
		 */
		const def isWritable(const self) {
			return File.g_lib.call('mint_file_is_writable', self.path)
		}

		/**
		 * Returns `true` if the file is executable; otherwise returns `false`.
		 */
		const def isExecutable(const self) {
			return File.g_lib.call('mint_file_is_executable', self.path)
		}

		/**
		 * Returns `true` if this is a hidden file; otherwise returns `false`.
		 */
		const def isHidden(const self) {
			return File.g_lib.call('mint_file_is_hidden', self.path)
		}

		/**
		 * Returns the owner of the file. On systems where files do not have owners,
		 * or if an error occurs, an empty string is returned.
		 */
		const def getOwner(const self) {
			return File.g_lib.call('mint_file_owner', self.path)
		}

		/**
		 * Returns the id of the owner of the file.
		 */
		const def getOwnerId(const self) {
			return File.g_lib.call('mint_file_owner_id', self.path)
		}

		/**
		 * Returns the group of the file. On systems where files do not have groups,
		 * or if an error occurs, an empty string is returned.
		 */
		const def getGroup(const self) {
			return File.g_lib.call('mint_file_group', self.path)
		}

		/**
		 * Returns the id of the group the file belongs to.
		 */
		const def getGroupId(const self) {
			return File.g_lib.call('mint_file_group_id', self.path)
		}

		/**
		 * Tests for file permissions. The permissions argument can be several
		 * flags of type {System.File.Permission} OR-ed together to check for
		 * permission combinations.
		 */
		const def permission(const self, permissions) {
			return File.g_lib.call('mint_file_permission', self.path, permissions)
		}

		// TODO : getters and setters on permissions

		/**
		 * Creates a link named `target` that points to the file currently specified
		 * by this object.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def link(self, target) {
			if var errno = File.g_lib.call('mint_file_link', self.path, target) {
				raise SystemError(errno, self)
			}
		}

		/**
		 * Creates a copy named `target` of the the file currently specified by
		 * this object.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def copy(self, target) {
			if var errno = File.g_lib.call('mint_file_copy', self.path, target) {
				raise SystemError(errno, self)
			}
		}

		/**
		 * Renames the file currently specified by this object to `name`.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def rename(self, name) {
			if var errno = File.g_lib.call('mint_file_rename', self.path, name) {
				raise SystemError(errno, self)
			}
		}

		/**
		 * Removes the file currently specified by this object.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def remove(self) {
			if var errno = File.g_lib.call('mint_file_remove', self.path) {
				raise SystemError(errno, self)
			}
		}

		/**
		 * Opens the file using `mode`, returning `true` if successful; otherwise `false`.
		 * 
		 * The `mode` parameter can be one of the following strings :
		 * | String | Meaning |
		 * |--------|---------|
		 * | 'r' | Open file for input operations. The file must exist. |
		 * | 'r+' | Open a file for update (both for input and output). The file must exist. |
		 * | 'w' | Create an empty file for output operations. If a file with the same name already exists, its contents are discarded and the file is treated as a new empty file. |
		 * | 'w+' | Create an empty file and open it for update (both for input and output). If a file with the same name already exists its contents are discarded and the file is treated as a new empty file. |
		 * | 'a' | Open file for output at the end of a file. Output operations always write data at the end of the file, expanding it. The file is created if it does not exist. |
		 * | 'a+' | Open a file for update (both for input and output) with all output operations writing data at the end of the file. The file is created if it does not exist. |
		 * 
		 * The `'b'` character can be added at the second position of any string to open the file in binary mode.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def open(self, mode = 'r') {
			if self.d_ptr is null {
				var file, var errno = File.g_lib.call('mint_file_fopen', self.absolutePath(), mode)
				if errno {
					raise SystemError(errno, self)
				}
				if self.d_ptr = file {
					return true
				}
			}
			return false
		}

		/**
		 * Flushes buffered modifications and closes the file.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def close(self) {
			if self.isOpen() {
				if var errno = File.g_lib.call('mint_file_fclose', self.d_ptr) {
					raise SystemError(errno, self)
				}
			} else {
				raise SystemError(SystemError.Errno.EBADF, self)
			}
		}

		/**
		 * Returns `true` if the file is open; otherwise returns `false`.
		 */
		const def isOpen(const self) {
			return self.d_ptr != null
		}

		/**
		 * Returns `true` if the end of the file has been reached; otherwise returns `false`.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def atEnd(const self) {
			if not self.isOpen() {
				raise SystemError(SystemError.Errno.EBADF, self)
			}
			return File.g_lib.call('mint_file_at_end', self.d_ptr)
		}

		/**
		 * Returns the position that data is written to or read from.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def tell(const self) {
			if not self.isOpen() {
				raise SystemError(SystemError.Errno.EBADF, self)
			}
			var pos, var errno = File.g_lib.call('mint_file_ftell', self.d_ptr)
			if errno {
				raise SystemError(errno, self)
			}
			return pos
		}

		/**
		 * Sets the position that data is written to or read from to `pos`.
		 * 
		 * If `pos` is in the range `0...self.size()`, the position is moved
		 * relatively from the begin of the file.
		 * 
		 * If `pos` is in the range `-1..-self.size()`, the position is moved
		 * relatively from the end of the file.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def seek(self, pos) {
			if not self.isOpen() {
				raise SystemError(SystemError.Errno.EBADF, self)
			}
			if var errno = File.g_lib.call('mint_file_fseek', self.d_ptr, pos) {
				raise SystemError(errno, self)
			}
		}

		/**
		 * Returns the file descriptor openned by this object or `none` if the
		 * file is not oppened.
		 */
		const def getDescriptor(const self) {
			if self.isOpen() {
				return File.g_lib.call('mint_file_fileno', self.d_ptr)
			}
		}

		/**
		 * Returns the codec that is current assigned to the file. If the file
		 * use the default codec (UTF-8), `null` is returned.
		 */
		const def getCodec(const self) {
			return self.codec
		}

		/**
		 * Sets the codec for this file to `codec`. The codec is used for decoding
		 * any data that is read from the file, and for encoding any data that
		 * is written. By default, UTF-8 is used. This default behaviour can be
		 * re enabled by setting a `null` codec.
		 */
		const def setCodec(self, codec) {
			self.codec = codec
		}

		/**
		 * Reads the next byte from the file, and returns it as a {uint8}.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def readUInt8(self) {
			if not self.isOpen() {
				raise SystemError(SystemError.Errno.EBADF, self)
			}
			var stream = DataStream()
			if System.File.g_lib.call('mint_file_read_byte', self.d_ptr, stream.to_std_vector_uint8_t()) {
				return stream.getUInt8()
			}
		}

		/**
		 * Reads all remaining data from the file, and returns it as a
		 * {DataStream}.
		 * 
		 * > **Note**: The purpose of this methode is to read raw data,
		 * to read text use {System.File.read}.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def readDataStream(self) {
			if not self.isOpen() {
				raise SystemError(SystemError.Errno.EBADF, self)
			}
			var stream = DataStream()
			if File.g_lib.call('mint_file_read_binary', self.d_ptr, stream.to_std_vector_uint8_t()) {
				return stream
			}
		}

		/**
		 * Reads the next character from the file, and returns it as a string.
		 * Data is read until a valid character is read or if the end of file
		 * is detected.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def readChar(self) {
			if not self.isOpen() {
				raise SystemError(SystemError.Errno.EBADF, self)
			}
			if self.codec {
				return self.codec.decodeChar(Callback(self, self.readUInt8))
			} else {
				return File.g_lib.call('mint_file_fgetc', self.d_ptr)
			}
		}

		/**
		 * Reads a word from the file, and returns it as a string. Words are
		 * separated by whitespace (i.e., all characters for which {isSpace}
		 * returns `true`).
		 * 
		 * Leading whitespace are skipped.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def readWord(self) {
			if not self.isOpen() {
				raise SystemError(SystemError.Errno.EBADF, self)
			}
			if self.codec {
				return self.codec.decodeWord(Callback(self, self.readUInt8))
			} else {
				return File.g_lib.call('mint_file_fgetw', self.d_ptr)
			}
		}

		/**
		 * Reads the next line from the file, and returns it as a string.
		 * Data is read until a `'\n'` character is read or if the end of
		 * file is detected.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def readLine(self) {
			if not self.isOpen() {
				raise SystemError(SystemError.Errno.EBADF, self)
			}
			if self.codec {
				return self.codec.decodeLine(Callback(self, self.readUInt8))
			} else {
				return File.g_lib.call('mint_file_readline', self.d_ptr)
			}
		}

		/**
		 * Returns an iterator on each remaining lines of the file.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def readLines(self) {
			if not self.isOpen() {
				raise SystemError(SystemError.Errno.EBADF, self)
			}
			if self.codec {
				for var line in self.codec.decodeLines(Callback(self, self.readUInt8)) {
					yield line
				}
			} else {
				while let var line = File.g_lib.call('mint_file_readline', self.d_ptr) {
					yield line
				}
			}
		}

		/**
		 * Reads all remaining data from the file, and returns it as a string.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def read(self) {
			if not self.isOpen() {
				raise SystemError(SystemError.Errno.EBADF, self)
			}
			if self.codec {
				if var stream = self.readDataStream() {
					return self.codec.decode(stream)
				}
			} else {
				return File.g_lib.call('mint_file_read', self.d_ptr)
			}
		}

		/**
		 * Writes the content of `data` to the file. Returns the number of bytes
		 * that were actually written. The content of data is converted to string
		 * using the codec set by {System.File.setCodec} or to an UTF-8 string by
		 * default.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def write(self, data) {
			if not self.isOpen() {
				raise SystemError(SystemError.Errno.EBADF, self)
			}
			if self.codec {
				var stream = self.codec.encode(data)
				var written, var errno = System.File.g_lib.call('mint_file_fwrite_binary', self.d_ptr, stream.to_std_vector_uint8_t())
			} else {
				var written, var errno = System.File.g_lib.call('mint_file_fwrite', self.d_ptr, data)
			}
			if errno {
				raise SystemError(errno, self)
			}
			return written
		}

		/**
		 * Flushes any buffered data to the file.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def flush(self) {
			if not self.isOpen() {
				raise SystemError(SystemError.Errno.EBADF, self)
			}
			if errno = File.g_lib.call('mint_file_fflush', self.d_ptr) {
				raise SystemError(errno, self)
			}
		}

		/**
		 * Reads a word from the stream and stores it in `data`, then returns a
		 * reference to the stream. Words are separated by whitespace (i.e., all
		 * characters for which {isSpace} returns `true`).
		 * 
		 * Leading whitespace are skipped.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def >>(self, data) {
			data := self.readWord()
			return self
		}

		/**
		 * Writes the string `data` to the stream, and returns a reference to the
		 * {System.File}. The string is first encoded using the assigned codec
		 * (the default is UTF-8) before it is written to the stream.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def <<(self, data) {
			self.write(data)
			return self
		}

		/// Global library handle.
		- @g_lib = lib('libmint-system')

		/// Internal file codec.
		- codec = null

		/// Internal file path.
		- path = ''
		
		/// Object data.
		- d_ptr = null
	}

	/**
	 * Creates a new {System.File} to represent the file with the specified `path`.
	 * The file is then opened with the given `mode`. Returns the file on success;
	 * otherwise returns `null`.
	 */
	const def open(path, mode = 'r') {
		var file = System.File(path)
		try {
			if file.open(mode) {
				return file
			}
		}
		return null
	}
}
