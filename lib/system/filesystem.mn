/**
 * @license
 * Copyright (c) 2025 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides tools to manage the file system informations.
 */

package System {

    /**
     * This enum represent a standrad path type that can be used to query a standard
     * path to the file system.
     */
    enum StandardPath {
        /// The system root location like `'/'` or `'C:'`
        Root
        /// An home location like `'~'` or `'C:/Users/<user>'`
        Home
        /// A desktop location like `'~/Desktop'` or `'C:/Users/<user>/Desktop'`
        Desktop
        /// A document location like `'~/Documents'` or `'C:/Users/<user>/Documents'`
        Documents
        /// A music location like `'~/Musics'` or `'C:/Users/<user>/Musics'`
        Musics
        /// A document location like `'~/Movies'` or `'C:/Users/<user>/Movies'`
        Movies
        /// A picture location like `'~/Pictures'` or `'C:/Users/<user>/Pictures'`
        Pictures
        /// A download location like `'~/Downloads'` or `'C:/Users/<user>/Downloads'`
        Download
        /// An application location like `'/usr/bin'` or `'C:/Program Files'`
        Applications
        /// A temporary location like `'/tmp'` or `'C:/Users/<user>/AppData/Local/Temp'`
        Temporary
        /// A font location like `'/usr/share/fonts'` or `'C:/Windows/Fonts'`
        Fonts
        /// A cache location like `'~/.cache'` or `'C:/Users/<user>/AppData/Local/Cache'`
        Cache
        /// A global cache location like `'/var/cache'` or `'C:/ProgramData/???'`
        GlobalCache
        /// A data location like `'~/???'` or `'C:/Users/<user>/AppData/Roaming'`
        Data
        /// A local data location like `'~/.local/share'` or `'C:/Users/<user>/AppData/Local'`
        LocalData
        /// A global data location like `'/usr/share'` or `'C:/ProgramData'`
        GlobalData
        /// A configuration location like `'~/.config'` or `'C:/Users/<user>/AppData/Local/???'`
        Config
        /// A global configuration location like `'/???'` or `'C:/ProgramData/???'`
        GlobalConfig
    }

    /**
     * This class provides an interface to interact with the file system and
     * access standard locations.
     */
    class FileSystem {
        
		/// Native path separator: "/" under Unix and "\" under Windows.
		@const Separator

		/// Pattern used to search for a separator in a path.
		@const SeparatorPattern

        /// Internal constructor.
        ~ const new

        /**
         * Returns an array of each path that matches the givent `type`. The `type`
         * parameter must be a value from {System.StandardPath}.
         */
        const def getStandardPaths(const self, %type) {
            return System.FileSystem.g_lib.call('mint_fs_get_paths', type)
        }

        /**
         * Returns the most significant path that matches the givent `type`. The
         * `type` parameter must be a value from {System.StandardPath}.
         */
        const def getStandardPath(const self, %type) {
            return System.FileSystem.g_lib.call('mint_fs_get_path', type)
        }

        /**
         * Returns the most significant `path` with a root that matches the givent
         * `type`. The `type` parameter must be a value from {System.StandardPath}.
         */
        const def getStandardPath(const self, %type, path) {
            return System.FileSystem.g_lib.call('mint_fs_get_path', type, path)
        }

        /**
         * Returns an array of each existing `path` under a root that matches the
         * givent `type`. The `type` parameter must be a value from
         * {System.StandardPath}.
         */
        const def findStandardPaths(const self, %type, path) {
            return System.FileSystem.g_lib.call('mint_fs_find_paths', type, path)
        }

        /**
         * Returns the most significant existing `path` under a root that matches
         * the givent `type`. The `type` parameter must be a value from
         * {System.StandardPath}.
         */
        const def findStandardPath(const self, %type, path) {
            return System.FileSystem.g_lib.call('mint_fs_find_path', type, path)
        }

        /// Global library handle.
        - @g_lib = lib('libmint-system')
    }

	System.FileSystem.Separator = lib('libmint-system').call('mint_directory_native_separator')
	System.FileSystem.SeparatorPattern = /[\\\/]/

    /// Global file system instance
    @const FS = System.FileSystem()
}
