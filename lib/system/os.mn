/**
 * @license
 * Copyright (c) 2025 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides tools to manage the operating system informations.
 */

load exception.system

package System {

    /**
     * This enum describe each supported operating system types.
     */
    enum OSType {
        /// Linux family operating system type.
        Linux
        /// Windows family operating system type.
        Windows
        /// Mac OS family operating system type.
        MacOs
    }

    /**
     * This class provides an interface to manage the operating system informations.
     */
    class OperatingSystem {
        /// Internal constructor.
        ~ const new

        /**
         * Returns the operating system type as a value of {System.OSType}.
         */
        const def getType(const self) {
            return System.OperatingSystem.g_lib.call('mint_os_get_type')
        }

        /**
         * Returns the operating system current name.
         */
        const def getName(const self) {
            return System.OperatingSystem.g_lib.call('mint_os_get_name')
        }

        /**
         * Returns the operating system current version.
         */
        const def getVersion(const self) {
            return System.OperatingSystem.g_lib.call('mint_os_get_version')
        }

        /**
         * Returns the value of the environment variable `name` if exists;
         * otherwise returns `defaultValue`.
         */
        const def getEnvironment(const self, name, defaultValue = none) {
            return System.OperatingSystem.g_lib.call('mint_os_get_environment', name, defaultValue)
        }

        /**
         * Sets the value of the environment variable `name` to `value`.
         * 
         * An instance of {Exception.SystemError} is raised on error.
         */
        const def setEnvironment(const self, name, value) {
            if var errno = System.OperatingSystem.g_lib.call('mint_os_set_environment', name, value) {
                raise Exception.SystemError(errno, self)
            }
        }

        /**
         * Removes the value of the environment variable `name`.
         * 
         * An instance of {Exception.SystemError} is raised on error.
         */
        const def unsetEnvironment(self, name) {
            if var errno = System.OperatingSystem.g_lib.call('mint_os_unset_environment', name) {
                raise Exception.SystemError(errno, self)
            }
        }

        // TODO operating system utils

        /// Global library handle.
        - @g_lib = lib('libmint-system')
    }

    /// Global operating system instance
    @const OS = System.OperatingSystem()
}
