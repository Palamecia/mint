/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides tools to manage the terminal I/O.
 */

load exception.system

package System {

	/// File descriptor for standard input
	@const stdin = 0

	/// File descriptor for standard output
	@const stdout = 1

	/// File descriptor for standard error output
	@const stderr = 2

	/**
	 * This class provides an interface to interact with a terminal for command
	 * line scripts.
	 */
	class Terminal {
		/**
		 * Creates a new terminal context instance.
		 */
		const def new(self) {
			if self.d_ptr = System.Terminal.g_lib.call('mint_terminal_new') {
				self.d_ptr.delete = def [g_lib = System.Terminal.g_lib] (self) {
					g_lib.call('mint_terminal_delete', self)
				}
				return self
			}
		}

		/**
		 * Flushes any buffered data.
		 */
		const def delete(self) {
			Terminal.g_lib.call('mint_terminal_flush')
		}

		/**
		 * Returns `true` if the stream described by `stream` is a terminal;
		 * otherwise returns `false`.
		 */
		@const def isTerminal(stream) {
			switch typeof stream {
			case 'number':
				return System.Terminal.g_lib.call('mint_terminal_is_terminal', stream)
			case 'string':
				load system.file
				return System.Terminal.g_lib.call('mint_terminal_is_terminal', System.open(stream).getDescriptor())
			default:
				if defined stream.getDescriptor {
					return System.Terminal.g_lib.call('mint_terminal_is_terminal', stream.getDescriptor())
				}
				if defined stream.toFile {
					return System.Terminal.g_lib.call('mint_terminal_is_terminal', stream.toFile().getDescriptor())
				}
			}
			return false
		}

		/**
		 * Returns the terminal width in number of columns.
		 */
		@const def getWidth() {
			return System.Terminal.g_lib.call('mint_terminal_get_width')
		}
		
		/**
		 * Returns the terminal height in number of rows.
		 */
		@const def getHeight() {
			return System.Terminal.g_lib.call('mint_terminal_get_height')
		}

		/**
		 * Returns the terminal's cursor current row number.
		 */
		@const def getCursorRow() {
			return System.Terminal.g_lib.call('mint_terminal_get_cursor_row')
		}

		/**
		 * Returns the terminal's cursor current column number.
		 */
		@const def getCursorColumn() {
			return System.Terminal.g_lib.call('mint_terminal_get_cursor_column')
		}

		/**
		 * Sets the terminal's cursor position to `row` and `column`.
		 */
		@const def setCursorPos(row, column) {
			System.Terminal.g_lib.call('mint_terminal_set_cursor_pos', row, column)
		}

		/**
		 * Moves the terminal's cursor position `count` columns left.
		 */
		@const def moveCursorLeft(count = 1) {
			System.Terminal.g_lib.call('mint_terminal_move_cursor_left', count)
		}

		/**
		 * Moves the terminal's cursor position `count` columns right.
		 */
		@const def moveCursorRight(count = 1) {
			System.Terminal.g_lib.call('mint_terminal_move_cursor_right', count)
		}

		/**
		 * Moves the terminal's cursor position `count` rows up.
		 */
		@const def moveCursorUp(count = 1) {
			System.Terminal.g_lib.call('mint_terminal_move_cursor_up', count)
		}

		/**
		 * Moves the terminal's cursor position `count` rows down.
		 */
		@const def moveCursorDown(count = 1) {
			System.Terminal.g_lib.call('mint_terminal_move_cursor_down', count)
		}

		/**
		 * Moves the terminal's cursor position to the begin of the current line.
		 */
		@const def moveCursorToStartOfLine() {
			System.Terminal.g_lib.call('mint_terminal_move_cursor_to_start_of_line', count)
		}

		// TODO add customisation methods

		/**
		 * Starts an interactive edition of a line of text on the terminal. Returns
		 * the whole text if validated using enter; otherwise returns `none`.
		 */
		const def editLine(self) {
			return System.Terminal.g_lib.call('mint_terminal_edit_line', self.d_ptr)
		}

		/**
		 * Reads the next character from {System.stdin}, and returns it as a
		 * string. Data is read until a valid character is read or if the end
		 * of input is detected.
		 */
		const def readChar(self) {
			return System.Terminal.g_lib.call('mint_terminal_readchar')
		}

		/**
		 * Reads a word from {System.stdin}, and returns it as a string. Words
		 * are separated by whitespace (i.e., all characters for which {isSpace}
		 * returns `true`).
		 * 
		 * Leading whitespace are skipped.
		 */
		const def readWord(self) {
			return System.Terminal.g_lib.call('mint_terminal_readword')
		}

		/**
		 * Reads the next line from {System.stdin}, and returns it as a string.
		 * Data is read until a `'\n'` character is read or if the end of
		 * input is detected.
		 */
		const def readLine(self) {
			return System.Terminal.g_lib.call('mint_terminal_readline')
		}

		/**
		 * Reads all remaining data from {System.stdin}, and returns it as a
		 * string.
		 */
		const def read(self, delim = '\n') {
			return System.Terminal.g_lib.call('mint_terminal_read', delim)
		}

		/**
		 * Writes the content of `data` to {System.stdout}. Returns an iteraror
		 * containing `true` and the amount of sent data in bytes if the data
		 * was successfully sent to the peer; otherwise returns `false`.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def write(self, data) {
			var written, var errno = System.Terminal.g_lib.call('mint_terminal_write', data)
			if errno {
				raise SystemError(errno, self)
			}
			return (written > 0, written)
		}

		/**
		 * Writes the content of `data` to {System.stderr}. Returns an iteraror
		 * containing `true` and the amount of sent data in bytes if the data
		 * was successfully sent to the peer; otherwise returns `false`.
		 * 
		 * An instance of {SystemError} is raised on error.
		 */
		const def writeError(self, data) {
			var written, var errno = System.Terminal.g_lib.call('mint_terminal_write_error', data)
			if errno {
				raise SystemError(errno, self)
			}
			return (written > 0, written)
		}

		/**
		 * Clears from the terminal's cursor position to the end of the line.
		 */
		const def clearToEndOfLine(self) {
			System.Terminal.g_lib.call('clear_to_end_of_line')
		}

		/**
		 * Clears the current line.
		 */
		const def clearLine(self) {
			System.Terminal.g_lib.call('clear_to_end_of_line')
		}

		/**
		 * Resets the current printer background and foreground colors and style
		 * to default.
		 */
		const def reset(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[0m')
		}

		/**
		 * Changes the current printer style to bold.
		 */
		const def bold(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[1m')
		}

		/**
		 * Changes the current printer style to dark.
		 */
		const def dark(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[2m')
		}
		
		/**
		 * Changes the current printer style to italic.
		 */
		const def italic(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[3m')
		}
		
		/**
		 * Changes the current printer style to underline.
		 */
		const def underline(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[4m')
		}
		
		/**
		 * Changes the current printer style to blink.
		 */
		const def blink(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[5m')
		}
		
		/**
		 * Changes the current printer style to reverse.
		 */
		const def reverse(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[7m')
		}
		
		/**
		 * Changes the current printer style to concealed.
		 */
		const def concealed(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[8m')
		}
		
		/**
		 * Changes the current printer style to crossed.
		 */
		const def crossed(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[9m')
		}
		
		/**
		 * Changes the current printer foreground color to grey.
		 */
		const def grey(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[30m')
		}
		
		/**
		 * Changes the current printer foreground color to red.
		 */
		const def red(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[31m')
		}
		
		/**
		 * Changes the current printer foreground color to green.
		 */
		const def green(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[32m')
		}
		
		/**
		 * Changes the current printer foreground color to yellow.
		 */
		const def yellow(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[33m')
		}
		
		/**
		 * Changes the current printer foreground color to blue.
		 */
		const def blue(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[34m')
		}
		
		/**
		 * Changes the current printer foreground color to magenta.
		 */
		const def magenta(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[35m')
		}
		
		/**
		 * Changes the current printer foreground color to cyan.
		 */
		const def cyan(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[36m')
		}
		
		/**
		 * Changes the current printer foreground color to white.
		 */
		const def white(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[37m')
		}
		
		/**
		 * Changes the current printer background color to grey.
		 */
		const def onGrey(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[40m')
		}
		
		/**
		 * Changes the current printer background color to red.
		 */
		const def onRed(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[41m')
		}
		
		/**
		 * Changes the current printer background color to green.
		 */
		const def onGreen(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[42m')
		}
		
		/**
		 * Changes the current printer background color to yellow.
		 */
		const def onYellow(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[43m')
		}
		
		/**
		 * Changes the current printer background color to blue.
		 */
		const def onBlue(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[44m')
		}
		
		/**
		 * Changes the current printer background color to magenta.
		 */
		const def onMagenta(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[45m')
		}
		
		/**
		 * Changes the current printer background color to cyan.
		 */
		const def onCyan(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[46m')
		}
		
		/**
		 * Changes the current printer background color to white.
		 */
		const def onWhite(self) {
			Terminal.g_lib.call('mint_terminal_change_attribute', '\e[47m')
		}

		// TODO other vt100 escape sequences

		/**
		 * Waits until data is available on {System.stdin}. If `timeout` is given,
		 * the wait stop after `timeout` milliseconds if {System.stdin} still
		 * have no data to read.
		 * 
		 * Returns `true` if data is available on {System.stdin}; otherwise
		 * returns `false` if the wait timed out.
		 * 
		 * After a call to this method, the event is reseted.
		 */
		const def wait(self, timeout = none) {
			return System.Terminal.g_lib.call('mint_terminal_wait', timeout)
		}

		/**
		 * Returns the handle used by {Event.Watcher}.
		 */
		const def getHandle(const self) {
			return System.Terminal.g_lib.call('mint_terminal_get_stdin_handle')
		}

		/**
		 * Writes `data` to {System.stdin}, and returns a reference to the
		 * stream.
		 */
		const def <<(self, data) {
			self.write(data)
			return self
		}

		/**
		 * Reads a all remaining data in {System.stdin} and stores it in `data`,
		 * then returns a reference to the terminal.
		 */
		const def >>(self, data) {
			data := self.read()
			return self
		}

		/// Global library handle.
		- @g_lib = lib('libmint-system')

		/// Object data.
		- d_ptr = null
	}

	/// Global terminal instance
	@const IO = System.Terminal()
}
