/**
 * @license
 * Copyright (c) 2024 Gauvain CHERY.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @module
 * This module provides the {System.TimeZone} class which provides access to the
 * time zones informations.
 */

load mint.type

package System {

/**
 * This class provides a stateless calculator for time zone conversions between
 * UTC and a specific time zone.
 */
class TimeZone {
	/**
	 * Creates a new object for the time zone specified by `timezone`. The `timezone`
	 * value can be any time zone identifier supported by the system, a IANA time zone
	 * ID or an offset from UTC like "-05:30". The `timezone` value can also be an
	 * instance of {System.TimeZone}.
	 */
	const def new(self, timezone) {
		switch typeof timezone {
		case 'System.TimeZone':
			return timezone
		default:
			self.name = string(timezone)
			if self.zoneinfo = System.TimeZone.g_lib.call('mint_timezone_open', self.name) {
				self.zoneinfo.delete = def [g_lib = System.TimeZone.g_lib] (self) {
					g_lib.call('mint_timezone_close', self)
				}
				return self
			}
		}
	}

	/**
	 * Returns the current system time zone.
	 */
	@const def current() {
		return System.TimeZone(System.TimeZone.g_lib.call('mint_timezone_current_name'))
	}

	/**
	 * Sets the system's current time zone to `timezone`.
	 * 
	 * An instance of {Exception.SystemError} is raised on error.
	 */
	@const def setCurrent(timezone) {
		var timezone = System.TimeZone(timezone)
		if var errno = System.TimeZone.g_lib.call('mint_timezone_set_current', timezone.name) {
			raise Exception.SystemError(errno, timezone)
		}
	}

	/**
	 * Returns a list of all available time zone IDs on this system.
	 */
	@const def list() {
		return System.TimeZone.g_lib.call('mint_timezone_list')
	}

	/**
	 * Returns the time zone ID for the time zone.
	 */
	const def getName(const self) {
		return self.name
	}

	/**
	 * Returns the amount of seconds since 1970-01-01T00:00:00Z from the given
	 * date and time in this timezone.
	 * 
	 * * `year` is the year of the date and must be a number.
	 * * `month` is the month of the date and must be a number between 1 and 12.
	 * * `day` is the day of the date and must be a number between 1 and 31.
	 * * `h` is the amount of hours of the time and must be a number between 0 and 23.
	 * * `min` is the amount of minutes of the time and must be a number between 0 and 59.
	 * * `sec` is the amount of seconds of the time and must be a number between 0 and 60.
	 */
	const def secondsSinceEpoch(const self, year, month, day, h = 0, min = 0, sec = 0) {
		return System.TimeZone.g_lib.call('mint_timezone_seconds_since_epoch', self.zoneinfo, year, month, day, h, min, sec)
	}

	/**
	 * Returns an iterator containing the year, month, day, hours, minutes, seconds
	 * and milliseconds in this timezone for the given date and time. The date and
	 * time given by `seconds` must be expressed in seconds elapsed since 
	 * 1970-01-01T00:00:00Z or be an instance of {System.Date}.
	 */
	const def timeFromSeconds(const self, seconds) {
		switch typeof seconds {
		case 'System.Date':
			return System.TimeZone.g_lib.call('mint_timezone_time_from_duration', self.zoneinfo, seconds.to_std_chrono_milliseconds())
		default:
			return System.TimeZone.g_lib.call('mint_timezone_time_from_seconds', self.zoneinfo, number(seconds))
		}
	}

	/**
	 * Returns the weekday in this timezone for the given date and time. The
	 * date and time given by `seconds` must be expressed in seconds elapsed
	 * since 1970-01-01T00:00:00Z or be an instance of {System.Date}.
	 * 
	 * The {System.WeekDay} enum can be used to check returned values.
	 */
	const def weekDayFromSeconds(const self, seconds) {
		switch typeof seconds {
		case 'System.Date':
			return System.TimeZone.g_lib.call('mint_timezone_week_day_from_duration', self.zoneinfo, seconds.to_std_chrono_milliseconds())
		default:
			return System.TimeZone.g_lib.call('mint_timezone_week_day_from_seconds', self.zoneinfo, number(seconds))
		}
	}

	/**
	 * Returns the day in the year in this timezone for the given date and time.
	 * The date and time given by `seconds` must be expressed in seconds elapsed
	 * since 1970-01-01T00:00:00Z or be an instance of {System.Date}.
	 */
	const def yearDayFromSeconds(const self, seconds) {
		switch typeof seconds {
		case 'System.Date':
			return System.TimeZone.g_lib.call('mint_timezone_year_day_from_duration', self.zoneinfo, seconds.to_std_chrono_milliseconds())
		default:
			return System.TimeZone.g_lib.call('mint_timezone_year_day_from_seconds', self.zoneinfo, number(seconds))
		}
	}

	/**
	 * Returns `true` if daylight-saving was in effect at the given date and
	 * time; otherwise returns `false`. The date and time given by `seconds`
	 * must be expressed in seconds elapsed since 1970-01-01T00:00:00Z or be an
	 * instance of {System.Date}.
	 */
	const def isDaylightTimeFromSeconds(const self, seconds) {
		switch typeof seconds {
		case 'System.Date':
			return System.TimeZone.g_lib.call('mint_timezone_is_dst_from_duration', self.zoneinfo, seconds.to_std_chrono_milliseconds())
		default:
			return System.TimeZone.g_lib.call('mint_timezone_is_dst_from_seconds', self.zoneinfo, number(seconds))
		}
	}

	/**
	 * Returns the amount of milliseconds since 1970-01-01T00:00:00.000Z from
	 * the given date and time in this timezone.
	 * 
	 * * `year` is the year of the date and must be a number.
	 * * `month` is the month of the date and must be a number between 1 and 12.
	 * * `day` is the day of the date and must be a number between 1 and 31.
	 * * `h` is the amount of hours of the time and must be a number between 0 and 23.
	 * * `min` is the amount of minutes of the time and must be a number between 0 and 59.
	 * * `sec` is the amount of seconds of the time and must be a number between 0 and 60.
	 * * `ms` is the amount of milliseconds of the time and must be a number between 0 and 999.
	 */
	const def millisecondsSinceEpoch(const self, year, month, day, h = 0, min = 0, sec = 0, ms = 0) {
		return System.TimeZone.g_lib.call('mint_timezone_milliseconds_since_epoch', self.zoneinfo, year, month, day, h, min, sec, ms)
	}

	/**
	 * Returns an iterator containing the year, month, day, hours, minutes, seconds
	 * and milliseconds in this timezone for the given date and time. The date and
	 * time given by `milliseconds` must be expressed in milliseconds elapsed since 
	 * 1970-01-01T00:00:00.000Z or be an instance of {System.Date}.
	 */
	const def timeFromMilliseconds(const self, milliseconds) {
		switch typeof milliseconds {
		case 'System.Date':
			return System.TimeZone.g_lib.call('mint_timezone_time_from_duration', self.zoneinfo, milliseconds.to_std_chrono_milliseconds())
		default:
			return System.TimeZone.g_lib.call('mint_timezone_time_from_milliseconds', self.zoneinfo, number(milliseconds))
		}
	}

	/**
	 * Returns the weekday in this timezone for the given date and time. The
	 * date and time given by `milliseconds` must be expressed in milliseconds
	 * elapsed since 1970-01-01T00:00:00.000Z or be an instance of {System.Date}.
	 * 
	 * The {System.WeekDay} enum can be used to check returned values.
	 */
	const def weekDayFromMilliseconds(const self, milliseconds) {
		switch typeof milliseconds {
		case 'System.Date':
			return System.TimeZone.g_lib.call('mint_timezone_week_day_from_duration', self.zoneinfo, milliseconds.to_std_chrono_milliseconds())
		default:
			return System.TimeZone.g_lib.call('mint_timezone_week_day_from_milliseconds', self.zoneinfo, number(milliseconds))
		}
	}

	/**
	 * Returns the day in the year in this timezone for the given date and time.
	 * The date and time given by `milliseconds` must be expressed in milliseconds
	 * elapsed since 1970-01-01T00:00:00.000Z or be an instance of {System.Date}.
	 */
	const def yearDayFromMilliseconds(const self, milliseconds) {
		switch typeof milliseconds {
		case 'System.Date':
			return System.TimeZone.g_lib.call('mint_timezone_year_day_from_duration', self.zoneinfo, milliseconds.to_std_chrono_milliseconds())
		default:
			return System.TimeZone.g_lib.call('mint_timezone_year_day_from_milliseconds', self.zoneinfo, number(milliseconds))
		}
	}

	/**
	 * Returns `true` if daylight-saving was in effect at the given date and
	 * time; otherwise returns `false`. The date and time given by `milliseconds`
	 * must be expressed in milliseconds elapsed since 1970-01-01T00:00:00.000Z
	 * or be an instance of {System.Date}.
	 */
	const def isDaylightTimeFromMilliseconds(const self, milliseconds) {
		switch typeof milliseconds {
		case 'System.Date':
			return System.TimeZone.g_lib.call('mint_timezone_is_dst_from_duration', self.zoneinfo, milliseconds.to_std_chrono_milliseconds())
		default:
			return System.TimeZone.g_lib.call('mint_timezone_is_dst_from_milliseconds', self.zoneinfo, number(milliseconds))
		}
	}

	/**
	 * Returns `true` if the time zone described by `other` and this object are
	 * the same time zone; otherwise returns `false`.
	 */
	const def ==(const self, const other) {
		if var tz = System.TimeZone(other) {
			return System.TimeZone.g_lib.call('mint_timezone_match', self.zoneinfo, tz.zoneinfo)
		}
		return false
	}

	/**
	 * Returns `false` if the time zone described by `other` and this object are
	 * the same time zone; otherwise returns `true`.
	 */
	const def !=(const self, other) {
		if var tz = System.TimeZone(other) {
			return not System.TimeZone.g_lib.call('mint_timezone_match', self.zoneinfo, tz.zoneinfo)
		}
		return true
	}

	/// Global library handle.
	- @g_lib = lib('libmint-system')

	/// Internal time zone informations.
	- zoneinfo = null

	/// Internal time zone name.
	- name = ''
}

}
