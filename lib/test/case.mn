load test.suite
load system.terminal

package Test {

	/*!
	* @class Test.Case
	*/
	class Case {
		~def discover(self) {
			self.found = []
			for member in membersof self {
				if member.startsWith('test') {
					self.found << member
				}
			}
			return self.found.size()
		}

		~def run(self) {
			print (System.IO) {
				System.IO.bold()
				System.IO.green()
				'[----------]'
				System.IO.reset()
				' %d tests from %s\n' % (self.found.size(), typeof self)
			}
			for test in self.found {
				print (System.IO) {
					System.IO.bold()
					System.IO.green()
					'[ RUN      ]'
					System.IO.reset()
					' %s.%s\n' % (typeof self, test)
				}
				try {
					self.$(test)()
				} catch e {
					/// @todo print exception info
					self.failuresCount++
				}
				if self.failuresCount {
					print (System.IO) {
						System.IO.bold()
						System.IO.red()
						'[  FAILED  ]'
						System.IO.reset()
						' %s.%s\n' % (typeof self, test)
					}
					self.failed << test
				} else {
					print (System.IO) {
						System.IO.bold()
						System.IO.green()
						'[       OK ]'
						System.IO.reset()
						' %s.%s\n' % (typeof self, test)
					}
				}
				self.failuresCount = 0
			}
			print (System.IO) {
				System.IO.bold()
				System.IO.green()
				'[----------]'
				System.IO.reset()
				' %d tests from %s\n' % (self.found.size(), typeof self)
			}
		}

		~def showSummary(self) {
			for test in self.failed {
				print (System.IO) {
					System.IO.bold()
					System.IO.red()
					'[  FAILED  ]'
					System.IO.reset()
					' %s.%s\n' % (typeof self, test)
				}
			}
		}

		def expectEqual(self, expected, result, message = none) {
			if expected != result {
				print (System.IO) {
					System.IO.magenta()
					Case.g_lib.call('mint_test_case_line_infos') + '\n'
					"\tValue of: %s\n" % self.printValue(result)
					"\tExpected: %s\n" % self.printValue(expected)
					defined message ? '\t' + message + '\n' : ''
				}
				self.failuresCount++
			}
		}

		def expectNotEqual(self, expected, result, message = none) {
			if expected == result {
				print (System.IO) {
					System.IO.magenta()
					Case.g_lib.call('mint_test_case_line_infos') + '\n'
					"\tExpected: %s != %s\n" % (self.printValue(expected), self.printValue(result))
					defined message ? '\t' + message + '\n' : ''
				}
				self.failuresCount++
			}
		}

		def expectIsSame(self, expected, result, message = none) {
			if not (expected is result) {
				print (System.IO) {
					System.IO.magenta()
					Case.g_lib.call('mint_test_case_line_infos') + '\n'
					"\tAddress of: 0x%P\n" % result
					"\tExpected:   0x%P\n" % expected
					defined message ? '\t' + message + '\n' : ''
				}
				self.failuresCount++
			}
		}

		def expectIsNotSame(self, expected, result, message = none) {
			if expected is result {
				print (System.IO) {
					System.IO.magenta()
					Case.g_lib.call('mint_test_case_line_infos') + '\n'
					"\tExpected: 0x%P != 0x%P\n" % (expected, result)
					defined message ? '\t' + message + '\n' : ''
				}
				self.failuresCount++
			}
		}

		def expectDefined(self, value, message = none) {
			if not defined value {
				print (System.IO) {
					System.IO.magenta()
					Case.g_lib.call('mint_test_case_line_infos') + '\n'
					"\tExpected defined\n"
					defined message ? '\t' + message + '\n' : ''
				}
				self.failuresCount++
			}
		}

		def expectNotDefined(self, value, message = none) {
			if defined value {
				print (System.IO) {
					System.IO.magenta()
					Case.g_lib.call('mint_test_case_line_infos') + '\n'
					"\tExpected not defined: %s\n" % self.printValue(value)
					defined message ? '\t' + message + '\n' : ''
				}
				self.failuresCount++
			}
		}

		- def printValue(self, value) {
			switch typeof value {
			case 'string':
				return "'%s'" % value
			case 'none':
			case 'null':
			case 'package':
			case 'function':
			case 'lib':
			case 'libobject':
				return '(%s)' % (typeof value)
			case 'number':
			case 'boolean':
			case 'regex':
			case 'array':
			case 'hash':
			case 'iterator':
				return value
			default:
				return '%s(%s)' % (typeof value, value)
			}
		}
		
		- found = []
		- failed = []
		- failuresCount = 0
		- @g_lib = lib('libmint-test')
	}
	
}
