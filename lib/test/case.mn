/**
 * This module provides the {Test.Case} class which is a base class to implement test cases.
 */

load test.suite
load mint.type
load system.terminal

package Test {

	/**
	 * {Test.Case} provide a base class to implement test cases. Any member of a class
 	 * derived from {Test.Case} that starts with `'test'` is automatically added to the
 	 * test case. This class also provide methods to test values such as {@see expectEqual}.
	 * 
 	 * **Example**:
 	 * ```mint
 	 * load test.case
	 * 
	 * class MyTestCase : Test.Case {
	 *     def testAddOneAndOne(self) {
	 *         self.expectEqual(2, 1 + 1, '1 + 1 is not 2')
	 *     }
	 * }
	 * ```
	 */
	class Case {
		/**
		 * Initialize the set of test members to call and return the amount of tests found.
		 */
		~ const def discover(self, filter = /.*/) {
			self.found = []
			for var member in membersof self {
				if member.startsWith('test') and filter =~ self.getTestName(member) {
					self.found << member
				}
			}
			return self.found.size()
		}

		/**
		 * Returns the list of test names found in this test case.
		 */
		~ const def list(self, filter = /.*/) {
			var found = []
			for var member in membersof self {
				if member.startsWith('test') and filter =~ self.getTestName(member) {
					found << member[4...member.size()]
				}
			}
			return found
		}

		/**
		 * Run test members. To initialize the set of test members to run, {@see discover} must be
		 * called first. This member should be called using {Test.Suite.run}.
		 */
		~ const def run(self) {
			print (System.IO) {
				System.IO.bold()
				System.IO.green()
				'[----------]'
				System.IO.reset()
				' %d tests from %s\n' % (self.found.size(), typeof self)
			}
			for var test in self.found {
				print (System.IO) {
					System.IO.bold()
					System.IO.green()
					'[ RUN      ]'
					System.IO.reset()
					' %s\n' % self.getTestName(test)
				}
				try {
					self.$(test)()
				} catch e {
					if defined e.show {
						e.show()
					} else {
						print (System.stderr) {
							System.IO.bold()
							System.IO.red()
							'exception (%s): %s' % (typeof e, e.toString())
							System.IO.reset()
							'\n'
						}
					}
					self.failuresCount++
				}
				if self.failuresCount {
					print (System.IO) {
						System.IO.bold()
						System.IO.red()
						'[  FAILED  ]'
						System.IO.reset()
						' %s\n' % self.getTestName(test)
					}
					self.failed << test
				} else {
					print (System.IO) {
						System.IO.bold()
						System.IO.green()
						'[       OK ]'
						System.IO.reset()
						' %s\n' % self.getTestName(test)
					}
				}
				self.failuresCount = 0
			}
			print (System.IO) {
				System.IO.bold()
				System.IO.green()
				'[----------]'
				System.IO.reset()
				' %d tests from %s\n' % (self.found.size(), typeof self)
			}
		}

		/**
		 * Print the summary of failed tests on standard output.
		 */
		~ const def showSummary(self) {
			for var test in self.failed {
				print (System.IO) {
					System.IO.bold()
					System.IO.red()
					'[  FAILED  ]'
					System.IO.reset()
					' %s\n' % self.getTestName(test)
				}
			}
		}

		/**
		 * Test for equality between `expected` and `result`. If given values are not equal,
		 * the test fail. If `message` is given, the message is printed on the standard output.
		 */
		const def expectEqual(self, %expected, %result, message = none) {
			if expected != result {
				print (System.IO) {
					System.IO.magenta()
					Case.g_lib.call('mint_test_case_line_infos') + '\n'
					"\tValue of: %s\n" % self.printValue(result)
					"\tExpected: %s\n" % self.printValue(expected)
					defined message ? '\t' + message + '\n' : ''
					System.IO.reset()
				}
				self.failuresCount++
			}
		}

		/**
		 * Test for inequality between `expected` and `result`. If given values are equal,
		 * the test fail. If `message` is given, the message is printed on the standard output.
		 */
		const def expectNotEqual(self, %expected, %result, message = none) {
			if expected == result {
				print (System.IO) {
					System.IO.magenta()
					Case.g_lib.call('mint_test_case_line_infos') + '\n'
					"\tExpected: %s != %s\n" % (self.printValue(expected), self.printValue(result))
					defined message ? '\t' + message + '\n' : ''
					System.IO.reset()
				}
				self.failuresCount++
			}
		}

		/**
		 * Test for address equality between `expected` and `result`. If given address are not
		 * equal, the test fail. If `message` is given, the message is printed on the standard
		 * output.
		 */
		const def expectIsSame(self, %expected, %result, message = none) {
			if not (expected is result) {
				print (System.IO) {
					System.IO.magenta()
					Case.g_lib.call('mint_test_case_line_infos') + '\n'
					"\tAddress of: 0x%P\n" % result
					"\tExpected:   0x%P\n" % expected
					defined message ? '\t' + message + '\n' : ''
				}
				self.failuresCount++
			}
		}

		/**
		 * Test for address inequality between `expected` and `result`. If given address are
		 * equal, the test fail. If `message` is given, the message is printed on the standard
		 * output.
		 */
		const def expectIsNotSame(self, %expected, %result, message = none) {
			if expected is result {
				print (System.IO) {
					System.IO.magenta()
					Case.g_lib.call('mint_test_case_line_infos') + '\n'
					"\tExpected: 0x%P != 0x%P\n" % (expected, result)
					defined message ? '\t' + message + '\n' : ''
					System.IO.reset()
				}
				self.failuresCount++
			}
		}

		/**
		 * Test for defined `value`. If given value is not defined, the test fail.
		 * If `message` is given, the message is printed on the standard output.
		 */
		const def expectDefined(self, %value, message = none) {
			if not defined value {
				print (System.IO) {
					System.IO.magenta()
					Case.g_lib.call('mint_test_case_line_infos') + '\n'
					"\tExpected defined\n"
					defined message ? '\t' + message + '\n' : ''
					System.IO.reset()
				}
				self.failuresCount++
			}
		}

		/**
		 * Test for undefined `value`. If given value is defined, the test fail.
		 * If `message` is given, the message is printed on the standard output.
		 */
		const def expectNotDefined(self, %value, message = none) {
			if defined value {
				print (System.IO) {
					System.IO.magenta()
					Case.g_lib.call('mint_test_case_line_infos') + '\n'
					"\tExpected not defined: %s\n" % (self.printValue(value))
					defined message ? '\t' + message + '\n' : ''
					System.IO.reset()
				}
				self.failuresCount++
			}
		}

		/**
		 * Extracts the name of the given `test` method.
		 */
		- const def getTestName(const self, test) {
			return '%s.%s' % (typeof self, test[4...test.size()])
		}

		/**
		 * Returns a printable string representation of `value` based on its type.
		 */
		- const def printValue(self, value) {
			switch typeof value {
			case 'string':
				return "'%s'" % value
			case 'none':
			case 'null':
			case 'package':
			case 'function':
			case 'lib':
			case 'libobject':
				return '(%s)' % (typeof value)
			case 'number':
			case 'boolean':
			case 'regex':
			case 'array':
			case 'hash':
			case 'iterator':
				return value
			default:
				return '%s(%s)' % (typeof value, value)
			}
		}
		
		/// Global library handle.
		- @g_lib = lib('libmint-test')
		
		/// Internal list of found test methods.
		- found = []

		/// Internal list of failed test methods.
		- failed = []

		/// Internal counter of test failures.
		- failuresCount = 0
	}
	
}
