load system.terminal
load mint.lang
load mint.type
load test.case

package Test {

	/*!
	* @class Test.Suite
	*/
	class Suite {
		~ new

		@def instance() {
			return Suite.g_instance
		}

		def run(self) {
			cases = []
			for name, type in types() {
				if is_base_of(Test.Case, type) {
					cases << new(name)
				}
			}

			found = 0
			for test_case in cases {
				found += test_case.discover()
			}

			print (System.IO) {
				System.IO.bold()
				System.IO.green()
				'[==========]'
				System.IO.reset()
				' Running %d tests from %d test cases.\n' % (found, cases.size())
			}
			for test_case in cases {
				test_case.run()
				print (System.IO) {'\n'}
			}
			print (System.IO) {
				System.IO.bold()
				System.IO.green()
				'[==========]'
				System.IO.reset()
				' %d tests from %d test cases ran.\n' % (found, cases.size())
			}
			for test_case in cases {
				test_case.showSummary()
			}
		}

		- @g_instance = none
	}

	Suite.g_instance = Suite()
}
