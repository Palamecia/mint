load test.case
load mint.function

class FunctionTest : Test.Case {
	class MyClass {
		const def new(self, message) {
			self.message = message
			return self
		}

		const def myMethod(self) {
			return self.message
		}

		- message
	}

	const def testCallbackCall(self) {
		object = FunctionTest.MyClass('success')
		func = Callback(object, object.myMethod)
		self.expectEqual('success', func())
		object = FunctionTest.MyClass('test')
		func = Callback(object, object.myMethod)
		self.expectEqual('test', func())
	}

	const def testSignalConnect(self) {
		var sig = Signal()
		var first = def {}
		var second = def {}
		self.expectEqual(true, sig.connect(first))
		self.expectEqual(true, sig.connect(second))
		self.expectEqual(false, sig.connect(first))
		self.expectEqual(true, sig.disconnect(first))
		self.expectEqual(false, sig.disconnect(first))
		self.expectEqual(true, sig.connect(first))
	}

	const def testSignalCount(self) {
		var sig = Signal()
		var activation = 0
		sig.connect(def [activation] {
			activation := activation + 1
		})
		sig.connect(def [activation] {
			activation := activation + 1
		})
		sig.connect(def [activation] {
			activation := activation + 1
		})
		sig()
		self.expectEqual(3, activation)
	}

	const def testSignalOrder(self) {
		var sig = Signal()
		var activation = 0
		var first, var second, var third = (0, 0, 0)
		sig.connect(def [first, activation] {
			first := activation := activation + 1
		})
		sig.connect(def [second, activation] {
			second := activation := activation + 1
		})
		sig.connect(def [third, activation] {
			third := activation := activation + 1
		})
		sig()
		self.expectEqual(3, activation)
		self.expectEqual(1, first)
		self.expectEqual(2, second)
		self.expectEqual(3, third)
	}

	const def testToString(self) {
		object = FunctionTest.MyClass('success')
		func = Callback(object, object.myMethod)
		self.expectEqual('FunctionTest.MyClass.myMethod', func.toString())
	}
}
