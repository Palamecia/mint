load test.case
load network.channel
load network.endpoints.tcpip
load network.serializers.server

class NetworkChannelTest : Test.Case {
    def testOnMessage(self) {

        var result = 'ko'
        var client = Network.Channel(Network.TcpIp('127.0.0.1', 7357))
        var server = Network.Channel(Network.TcpIp('127.0.0.1', 7357), Network.ServerSerializer)

        server.onMessage = def [result] (self, channel) {
            var client = Network.Channel(channel.read())
            client.onMessage = def [result] (self, channel) {
                result := channel.read()
                channel.close()
                channel.unwatch()
            }
            client.watch()
            channel.close()
            channel.unwatch()
        }

        client.onOpen = def (self, channel) {
            channel.write('ok')
        }

        client.onClose = def (self, channel) {
            channel.unwatch()
        }

        self.expectEqual(true, server.watch())
        self.expectEqual(true, server.listen())

        self.expectEqual(true, client.watch())
        self.expectEqual(true, client.connect())

        Network.Scheduler.instance().run()
        self.expectEqual('ok', result)
    }

    def testWatch(self) {

        var i = 0
        var client = Network.Channel(Network.TcpIp('127.0.0.1', 7357))
        var server = Network.Channel(Network.TcpIp('127.0.0.1', 7357), Network.ServerSerializer)

        server.onMessage = def [result] (self, channel) {
            var client = Network.Channel(channel.read())
            client.close()
        }

        client.onClose = def [i, server] (self, channel) {
            if (i := i + 1) < 3 {
                channel.connect()
            } else {
                channel.unwatch()
                server.close()
                server.unwatch()
            }
        }

        self.expectEqual(true, server.watch())
        self.expectEqual(true, server.listen())

        self.expectEqual(true, client.watch())
        self.expectEqual(true, client.connect())

        Network.Scheduler.instance().run()
        self.expectEqual(3, i)
    }
}
