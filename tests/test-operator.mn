load test.case

class OperatorRecorder {
	final record = []
	const def +(self) {
		self.record << '+(0)'
		return self
	}
	const def +(self, other) {
		self.record << '+(1)'
		return self
	}
	const def -(self) {
		self.record << '-(0)'
		return self
	}
	const def -(self, other) {
		self.record << '-(1)'
		return self
	}
	const def *(self, other) {
		self.record << '*(1)'
		return self
	}
	const def /(self, other) {
		self.record << '/(1)'
		return self
	}
	const def %(self, other) {
		self.record << '%(1)'
		return self
	}
}

class OperatorTest : Test.Case {

	const def testPriority(self) {
		var recorder = OperatorRecorder()
		-recorder * 2
		self.expectEqual(['-(0)', '*(1)'], recorder.record)
	}

	const def testAdd(self) {

		self.expectEqual(false, addOperator(false, false))
		self.expectEqual(true, addOperator(false, true))
		self.expectEqual(true, addOperator(true, false))
		self.expectEqual(true, addOperator(true, true))
	
		self.expectEqual(4, addOperator(2, 2))
		self.expectEqual(4, addOperator(2, '2'))

		self.expectEqual('22', addOperator('2', '2'))
		self.expectEqual('22', addOperator('2', 2))
	}
	
	const def testSub(self) {
		self.expectEqual(false, subOperator(false, false))
		self.expectEqual(true, subOperator(false, true))
		self.expectEqual(true, subOperator(true, false))
		self.expectEqual(false, subOperator(true, true))
	
		self.expectEqual(0, subOperator(2, 2))
		self.expectEqual(0, subOperator(2, '2'))

		self.expectEqual(false, (membersof '').in('-'))
	}

	const def testEq(self) {
		self.expectEqual(true, eqOperator(false, false))
		self.expectEqual(false, eqOperator(false, true))
		self.expectEqual(false, eqOperator(true, false))
		self.expectEqual(true, eqOperator(true, true))
	
		self.expectEqual(true, eqOperator(2, 2))
		self.expectEqual(true, eqOperator(2, '2'))
	}

	const def testNe(self) {
		self.expectEqual(false, neOperator(false, false))
		self.expectEqual(true, neOperator(false, true))
		self.expectEqual(true, neOperator(true, false))
		self.expectEqual(false, neOperator(true, true))
	
		self.expectEqual(false, neOperator(2, 2))
		self.expectEqual(false, neOperator(2, '2'))
	}

	const def testStrictEq(self) {
		self.expectEqual(true, strictEqOperator(false, false))
		self.expectEqual(false, strictEqOperator(false, true))
		self.expectEqual(false, strictEqOperator(true, false))
		self.expectEqual(true, strictEqOperator(true, true))
	
		self.expectEqual(true, strictEqOperator(2, 2))
		self.expectEqual(false, strictEqOperator(2, '2'))
	}

	const def testStrictNe(self) {
		self.expectEqual(false, strictNeOperator(false, false))
		self.expectEqual(true, strictNeOperator(false, true))
		self.expectEqual(true, strictNeOperator(true, false))
		self.expectEqual(false, strictNeOperator(true, true))
	
		self.expectEqual(false, strictNeOperator(2, 2))
		self.expectEqual(true, strictNeOperator(2, '2'))
	}

	const def testHashKeyCompare(self) {
		self.expectEqual(false, hashKeyCompareOperator(none, none))
		self.expectEqual(false, hashKeyCompareOperator(null, null))
		self.expectEqual(false, hashKeyCompareOperator(null, none))
		self.expectEqual(true, hashKeyCompareOperator(none, null))
	}
}
