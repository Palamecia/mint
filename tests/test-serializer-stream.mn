load test.case
load mint.type
load serializer.bufferedstream
load serializer.stringstream

class TestStringStream : Test.Case {
	const def testReadChar(self) {
		var s = Serializer.StringStream('test')
		self.expectEqual('t', s.readChar())
		self.expectEqual('e', s.readChar())
		self.expectEqual('s', s.readChar())
		self.expectEqual('t', s.readChar())
		self.expectNotDefined(s.readChar())
	}

	const def testReadWord(self) {
		var s = Serializer.StringStream('test test test test')
		self.expectEqual('test', s.readWord())
		self.expectEqual('test', s.readWord())
		self.expectEqual('test', s.readWord())
		self.expectEqual('test', s.readWord())
		self.expectNotDefined(s.readWord())
	}

	const def testReadLine(self) {
		var s = Serializer.StringStream('test\ntest\ntest\ntest')
		self.expectEqual('test', s.readLine())
		self.expectEqual('test', s.readLine())
		self.expectEqual('test', s.readLine())
		self.expectEqual('test', s.readLine())
		self.expectNotDefined(s.readWord())
	}

	const def testReadLines(self) {
		var s = Serializer.StringStream('test\ntest\ntest\ntest')
		self.expectEqual(['test', 'test', 'test', 'test'], array(s.readLines()))
		self.expectNotDefined(s.readWord())
	}

	const def testRead(self) {
		var s = Serializer.StringStream('test\ntest\ntest\ntest')
		self.expectEqual('test\ntest\ntest\ntest', s.read())
		self.expectNotDefined(s.readWord())
	}
}

class TestBufferedStream : Test.Case {
	const def testReadChar(self) {
		var s = Serializer.BufferedStream(Serializer.StringStream('test'))
		self.expectEqual('t', s.readChar())
		self.expectEqual('e', s.readChar())
		self.expectEqual('s', s.readChar())
		self.expectEqual('t', s.readChar())
		self.expectNotDefined(s.readChar())
	}

	const def testReadWord(self) {
		var s = Serializer.BufferedStream(Serializer.StringStream('test test test test'))
		self.expectEqual('test', s.readWord())
		self.expectEqual('test', s.readWord())
		self.expectEqual('test', s.readWord())
		self.expectEqual('test', s.readWord())
		self.expectNotDefined(s.readWord())
	}

	const def testReadLine(self) {
		var s = Serializer.BufferedStream(Serializer.StringStream('test\ntest\ntest\ntest'))
		self.expectEqual('test', s.readLine())
		self.expectEqual('test', s.readLine())
		self.expectEqual('test', s.readLine())
		self.expectEqual('test', s.readLine())
		self.expectNotDefined(s.readWord())
	}

	const def testReadLines(self) {
		var s = Serializer.BufferedStream(Serializer.StringStream('test\ntest\ntest\ntest'))
		self.expectEqual(['test', 'test', 'test', 'test'], array(s.readLines()))
		self.expectNotDefined(s.readWord())
	}

	const def testRead(self) {
		var s = Serializer.BufferedStream(Serializer.StringStream('test\ntest\ntest\ntest'))
		self.expectEqual('test\ntest\ntest\ntest', s.read())
		self.expectNotDefined(s.readWord())
	}
}
