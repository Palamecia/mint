load test.case
load serializer.bufferedstream
load serializer.stringstream

class TestStringStream : Test.Case {
	def testReadChar(self) {
		s = StringStream('test')
		self.expectEqual('t', s.readChar())
		self.expectEqual('e', s.readChar())
		self.expectEqual('s', s.readChar())
		self.expectEqual('t', s.readChar())
		self.expectNotDefined(s.readChar())
	}

	def testReadWord(self) {
		s = StringStream('test test test test')
		self.expectEqual('test', s.readWord())
		self.expectEqual('test', s.readWord())
		self.expectEqual('test', s.readWord())
		self.expectEqual('test', s.readWord())
		self.expectNotDefined(s.readWord())
	}

	def testReadLine(self) {
		s = StringStream('test\ntest\ntest\ntest')
		self.expectEqual('test', s.readLine())
		self.expectEqual('test', s.readLine())
		self.expectEqual('test', s.readLine())
		self.expectEqual('test', s.readLine())
		self.expectNotDefined(s.readWord())
	}

	def testReadLines(self) {
		s = StringStream('test\ntest\ntest\ntest')
		self.expectEqual(['test', 'test', 'test', 'test'], s.readLines())
		self.expectNotDefined(s.readWord())
	}

	def testRead(self) {
		s = StringStream('test\ntest\ntest\ntest')
		self.expectEqual('test\ntest\ntest\ntest', s.read())
		self.expectNotDefined(s.readWord())
	}
}

class TestBufferedStream : Test.Case {
	def testReadChar(self) {
		s = BufferedStream(StringStream('test'))
		self.expectEqual('t', s.readChar())
		self.expectEqual('e', s.readChar())
		self.expectEqual('s', s.readChar())
		self.expectEqual('t', s.readChar())
		self.expectNotDefined(s.readChar())
	}

	def testReadWord(self) {
		s = BufferedStream(StringStream('test test test test'))
		self.expectEqual('test', s.readWord())
		self.expectEqual('test', s.readWord())
		self.expectEqual('test', s.readWord())
		self.expectEqual('test', s.readWord())
		self.expectNotDefined(s.readWord())
	}

	def testReadLine(self) {
		s = BufferedStream(StringStream('test\ntest\ntest\ntest'))
		self.expectEqual('test', s.readLine())
		self.expectEqual('test', s.readLine())
		self.expectEqual('test', s.readLine())
		self.expectEqual('test', s.readLine())
		self.expectNotDefined(s.readWord())
	}

	def testReadLines(self) {
		s = BufferedStream(StringStream('test\ntest\ntest\ntest'))
		self.expectEqual(['test', 'test', 'test', 'test'], s.readLines())
		self.expectNotDefined(s.readWord())
	}

	def testRead(self) {
		s = BufferedStream(StringStream('test\ntest\ntest\ntest'))
		self.expectEqual('test\ntest\ntest\ntest', s.read())
		self.expectNotDefined(s.readWord())
	}
}
