load test.case
load system.thread

class ThreadTest : Test.Case {
	const def testMutexType(self) {
		self.expectIsSame(System.Mutex.Type.Normal, System.Mutex().getType())
		self.expectIsSame(System.Mutex.Type.Normal, System.Mutex(System.Mutex.Type.Normal).getType())
		self.expectIsSame(System.Mutex.Type.Recursive, System.Mutex(System.Mutex.Type.Recursive).getType())
	}

	const def testSharedReference(self) {

		var i = 0
		var m = System.Mutex()
		var t = System.Thread(def [i] (m) {
			m.lock()
			for i in 0..100 {
				m.unlock()
				System.wait()
				m.lock()
			}
			m.unlock()
		})

		var v = 0
		t.start(m)

		m.lock()
		while v < 100 {
			m.unlock()
			System.wait()
			m.lock()
			v = i
		}
		m.unlock()

		self.expectEqual(100, v)
	}

	const def testAsync(self) {
		var f = System.async(def {
			return 42
		})
		self.expectEqual('System.Future', typeof f)
		self.expectEqual(42, f.get())
	}
}
